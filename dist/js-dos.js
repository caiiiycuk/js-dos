!function i(s,a,c){function u(t,e){if(!a[t]){if(!s[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var o=new Error("Cannot find module '"+t+"'");throw o.code="MODULE_NOT_FOUND",o}var r=a[t]={exports:{}};s[t][0].call(r.exports,function(e){return u(s[t][1][e]||e)},r,r.exports,i,s,a,c)}return a[t].exports}for(var l="function"==typeof require&&require,e=0;e<c.length;e++)u(c[e]);return u}({1:[function(e,t,n){"use strict";var u=e("./utils");function l(){var o={},n=0,r=0,i=0;return{add:function(e,t){t||(t=e,e=0),r<e?r=e:e<i&&(i=e),o[e]||(o[e]=[]),o[e].push(t),n++},process:function(){for(var e=i;e<=r;e++)for(var t=o[e],n=0;n<t.length;n++){(0,t[n])()}},size:function(){return n}}}t.exports=function(e){var t=(e=e||{}).reporter,n=u.getOption(e,"async",!0),o=u.getOption(e,"auto",!0);o&&!n&&(t&&t.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true."),n=!0);var r,i=l(),s=!1;function a(){for(s=!0;i.size();){var e=i;i=l(),e.process()}s=!1}function c(){r=setTimeout(a,0)}return{add:function(e,t){!s&&o&&n&&0===i.size()&&c(),i.add(e,t)},force:function(e){s||(void 0===e&&(e=n),r&&(clearTimeout(r),r=null),(e?c:a)())}}}},{"./utils":2}],2:[function(e,t,n){"use strict";(t.exports={}).getOption=function(e,t,n){var o=e[t];return null!=o||void 0===n?o:n}},{}],3:[function(e,t,n){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],4:[function(e,t,n){var o=e("./_wks")("unscopables"),r=Array.prototype;null==r[o]&&e("./_hide")(r,o,{}),t.exports=function(e){r[o][e]=!0}},{"./_hide":33,"./_wks":97}],5:[function(e,t,n){"use strict";var o=e("./_string-at")(!0);t.exports=function(e,t,n){return t+(n?o(e,t).length:1)}},{"./_string-at":79}],6:[function(e,t,n){t.exports=function(e,t,n,o){if(!(e instanceof t)||void 0!==o&&o in e)throw TypeError(n+": incorrect invocation!");return e}},{}],7:[function(e,t,n){var o=e("./_is-object");t.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":41}],8:[function(e,t,n){"use strict";var l=e("./_to-object"),d=e("./_to-absolute-index"),f=e("./_to-length");t.exports=[].copyWithin||function(e,t,n){var o=l(this),r=f(o.length),i=d(e,r),s=d(t,r),a=2<arguments.length?n:void 0,c=Math.min((void 0===a?r:d(a,r))-s,r-i),u=1;for(s<i&&i<s+c&&(u=-1,s+=c-1,i+=c-1);0<c--;)s in o?o[i]=o[s]:delete o[i],i+=u,s+=u;return o}},{"./_to-absolute-index":83,"./_to-length":87,"./_to-object":88}],9:[function(e,t,n){"use strict";var u=e("./_to-object"),l=e("./_to-absolute-index"),d=e("./_to-length");t.exports=function(e,t,n){for(var o=u(this),r=d(o.length),i=arguments.length,s=l(1<i?t:void 0,r),a=2<i?n:void 0,c=void 0===a?r:l(a,r);s<c;)o[s++]=e;return o}},{"./_to-absolute-index":83,"./_to-length":87,"./_to-object":88}],10:[function(e,t,n){var c=e("./_to-iobject"),u=e("./_to-length"),l=e("./_to-absolute-index");t.exports=function(a){return function(e,t,n){var o,r=c(e),i=u(r.length),s=l(n,i);if(a&&t!=t){for(;s<i;)if((o=r[s++])!=o)return!0}else for(;s<i;s++)if((a||s in r)&&r[s]===t)return a||s||0;return!a&&-1}}},{"./_to-absolute-index":83,"./_to-iobject":86,"./_to-length":87}],11:[function(e,t,n){var _=e("./_ctx"),b=e("./_iobject"),w=e("./_to-object"),x=e("./_to-length"),o=e("./_array-species-create");t.exports=function(d,e){var f=1==d,p=2==d,h=3==d,y=4==d,m=6==d,v=5==d||m,g=e||o;return function(e,t,n){for(var o,r,i=w(e),s=b(i),a=_(t,n,3),c=x(s.length),u=0,l=f?g(e,c):p?g(e,0):void 0;u<c;u++)if((v||u in s)&&(r=a(o=s[u],u,i),d))if(f)l[u]=r;else if(r)switch(d){case 3:return!0;case 5:return o;case 6:return u;case 2:l.push(o)}else if(y)return!1;return m?-1:h||y?y:l}}},{"./_array-species-create":13,"./_ctx":19,"./_iobject":38,"./_to-length":87,"./_to-object":88}],12:[function(e,t,n){var o=e("./_is-object"),r=e("./_is-array"),i=e("./_wks")("species");t.exports=function(e){var t;return r(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!r(t.prototype)||(t=void 0),o(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},{"./_is-array":40,"./_is-object":41,"./_wks":97}],13:[function(e,t,n){var o=e("./_array-species-constructor");t.exports=function(e,t){return new(o(e))(t)}},{"./_array-species-constructor":12}],14:[function(e,t,n){"use strict";var i=e("./_a-function"),s=e("./_is-object"),a=e("./_invoke"),c=[].slice,u={};t.exports=Function.bind||function(t){var n=i(this),o=c.call(arguments,1),r=function(){var e=o.concat(c.call(arguments));return this instanceof r?function(e,t,n){if(!(t in u)){for(var o=[],r=0;r<t;r++)o[r]="a["+r+"]";u[t]=Function("F,a","return new F("+o.join(",")+")")}return u[t](e,n)}(n,e.length,e):a(n,e,t)};return s(n.prototype)&&(r.prototype=n.prototype),r}},{"./_a-function":3,"./_invoke":37,"./_is-object":41}],15:[function(e,t,n){var r=e("./_cof"),i=e("./_wks")("toStringTag"),s="Arguments"==r(function(){return arguments}());t.exports=function(e){var t,n,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),i))?n:s?r(t):"Object"==(o=r(t))&&"function"==typeof t.callee?"Arguments":o}},{"./_cof":16,"./_wks":97}],16:[function(e,t,n){var o={}.toString;t.exports=function(e){return o.call(e).slice(8,-1)}},{}],17:[function(e,t,n){var o=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=o)},{}],18:[function(e,t,n){"use strict";var o=e("./_object-dp"),r=e("./_property-desc");t.exports=function(e,t,n){t in e?o.f(e,t,r(0,n)):e[t]=n}},{"./_object-dp":53,"./_property-desc":67}],19:[function(e,t,n){var i=e("./_a-function");t.exports=function(o,r,e){if(i(o),void 0===r)return o;switch(e){case 1:return function(e){return o.call(r,e)};case 2:return function(e,t){return o.call(r,e,t)};case 3:return function(e,t,n){return o.call(r,e,t,n)}}return function(){return o.apply(r,arguments)}}},{"./_a-function":3}],20:[function(e,t,n){t.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},{}],21:[function(e,t,n){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":26}],22:[function(e,t,n){var o=e("./_is-object"),r=e("./_global").document,i=o(r)&&o(r.createElement);t.exports=function(e){return i?r.createElement(e):{}}},{"./_global":31,"./_is-object":41}],23:[function(e,t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],24:[function(e,t,n){var a=e("./_object-keys"),c=e("./_object-gops"),u=e("./_object-pie");t.exports=function(e){var t=a(e),n=c.f;if(n)for(var o,r=n(e),i=u.f,s=0;r.length>s;)i.call(e,o=r[s++])&&t.push(o);return t}},{"./_object-gops":58,"./_object-keys":61,"./_object-pie":62}],25:[function(e,t,n){var y=e("./_global"),m=e("./_core"),v=e("./_hide"),g=e("./_redefine"),_=e("./_ctx"),b="prototype",w=function(e,t,n){var o,r,i,s,a=e&w.F,c=e&w.G,u=e&w.S,l=e&w.P,d=e&w.B,f=c?y:u?y[t]||(y[t]={}):(y[t]||{})[b],p=c?m:m[t]||(m[t]={}),h=p[b]||(p[b]={});for(o in c&&(n=t),n)i=((r=!a&&f&&void 0!==f[o])?f:n)[o],s=d&&r?_(i,y):l&&"function"==typeof i?_(Function.call,i):i,f&&g(f,o,i,e&w.U),p[o]!=i&&v(p,o,s),l&&h[o]!=i&&(h[o]=i)};y.core=m,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128,t.exports=w},{"./_core":17,"./_ctx":19,"./_global":31,"./_hide":33,"./_redefine":69}],26:[function(e,t,n){t.exports=function(e){try{return!!e()}catch(e){return!0}}},{}],27:[function(e,t,n){"use strict";e("./es6.regexp.exec");var l=e("./_redefine"),d=e("./_hide"),f=e("./_fails"),p=e("./_defined"),h=e("./_wks"),y=e("./_regexp-exec"),m=h("species"),v=!f(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),g=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(n,e,t){var o=h(n),i=!f(function(){var e={};return e[o]=function(){return 7},7!=""[n](e)}),r=i?!f(function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},"split"===n&&(t.constructor={},t.constructor[m]=function(){return t}),t[o](""),!e}):void 0;if(!i||!r||"replace"===n&&!v||"split"===n&&!g){var s=/./[o],a=t(p,o,""[n],function(e,t,n,o,r){return t.exec===y?i&&!r?{done:!0,value:s.call(t,n,o)}:{done:!0,value:e.call(n,t,o)}:{done:!1}}),c=a[0],u=a[1];l(String.prototype,n,c),d(RegExp.prototype,o,2==e?function(e,t){return u.call(e,this,t)}:function(e){return u.call(e,this)})}}},{"./_defined":20,"./_fails":26,"./_hide":33,"./_redefine":69,"./_regexp-exec":71,"./_wks":97,"./es6.regexp.exec":115}],28:[function(e,t,n){"use strict";var o=e("./_an-object");t.exports=function(){var e=o(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},{"./_an-object":7}],29:[function(e,t,n){var f=e("./_ctx"),p=e("./_iter-call"),h=e("./_is-array-iter"),y=e("./_an-object"),m=e("./_to-length"),v=e("./core.get-iterator-method"),g={},_={};(n=t.exports=function(e,t,n,o,r){var i,s,a,c,u=r?function(){return e}:v(e),l=f(n,o,t?2:1),d=0;if("function"!=typeof u)throw TypeError(e+" is not iterable!");if(h(u)){for(i=m(e.length);d<i;d++)if((c=t?l(y(s=e[d])[0],s[1]):l(e[d]))===g||c===_)return c}else for(a=u.call(e);!(s=a.next()).done;)if((c=p(a,l,s.value,t))===g||c===_)return c}).BREAK=g,n.RETURN=_},{"./_an-object":7,"./_ctx":19,"./_is-array-iter":39,"./_iter-call":42,"./_to-length":87,"./core.get-iterator-method":98}],30:[function(e,t,n){t.exports=e("./_shared")("native-function-to-string",Function.toString)},{"./_shared":76}],31:[function(e,t,n){var o=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=o)},{}],32:[function(e,t,n){var o={}.hasOwnProperty;t.exports=function(e,t){return o.call(e,t)}},{}],33:[function(e,t,n){var o=e("./_object-dp"),r=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,n){return o.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},{"./_descriptors":21,"./_object-dp":53,"./_property-desc":67}],34:[function(e,t,n){var o=e("./_global").document;t.exports=o&&o.documentElement},{"./_global":31}],35:[function(e,t,n){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":21,"./_dom-create":22,"./_fails":26}],36:[function(e,t,n){var i=e("./_is-object"),s=e("./_set-proto").set;t.exports=function(e,t,n){var o,r=t.constructor;return r!==n&&"function"==typeof r&&(o=r.prototype)!==n.prototype&&i(o)&&s&&s(e,o),e}},{"./_is-object":41,"./_set-proto":72}],37:[function(e,t,n){t.exports=function(e,t,n){var o=void 0===n;switch(t.length){case 0:return o?e():e.call(n);case 1:return o?e(t[0]):e.call(n,t[0]);case 2:return o?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return o?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return o?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},{}],38:[function(e,t,n){var o=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==o(e)?e.split(""):Object(e)}},{"./_cof":16}],39:[function(e,t,n){var o=e("./_iterators"),r=e("./_wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(o.Array===e||i[r]===e)}},{"./_iterators":47,"./_wks":97}],40:[function(e,t,n){var o=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==o(e)}},{"./_cof":16}],41:[function(e,t,n){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],42:[function(e,t,n){var i=e("./_an-object");t.exports=function(t,e,n,o){try{return o?e(i(n)[0],n[1]):e(n)}catch(e){var r=t.return;throw void 0!==r&&i(r.call(t)),e}}},{"./_an-object":7}],43:[function(e,t,n){"use strict";var o=e("./_object-create"),r=e("./_property-desc"),i=e("./_set-to-string-tag"),s={};e("./_hide")(s,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,n){e.prototype=o(s,{next:r(1,n)}),i(e,t+" Iterator")}},{"./_hide":33,"./_object-create":52,"./_property-desc":67,"./_set-to-string-tag":74,"./_wks":97}],44:[function(e,t,n){"use strict";function _(){return this}var b=e("./_library"),w=e("./_export"),x=e("./_redefine"),j=e("./_hide"),D=e("./_iterators"),k=e("./_iter-create"),E=e("./_set-to-string-tag"),B=e("./_object-gpo"),K=e("./_wks")("iterator"),C=!([].keys&&"next"in[].keys()),O="values";t.exports=function(e,t,n,o,r,i,s){k(n,t,o);function a(e){if(!C&&e in h)return h[e];switch(e){case"keys":case O:return function(){return new n(this,e)}}return function(){return new n(this,e)}}var c,u,l,d=t+" Iterator",f=r==O,p=!1,h=e.prototype,y=h[K]||h["@@iterator"]||r&&h[r],m=y||a(r),v=r?f?a("entries"):m:void 0,g="Array"==t&&h.entries||y;if(g&&(l=B(g.call(new e)))!==Object.prototype&&l.next&&(E(l,d,!0),b||"function"==typeof l[K]||j(l,K,_)),f&&y&&y.name!==O&&(p=!0,m=function(){return y.call(this)}),b&&!s||!C&&!p&&h[K]||j(h,K,m),D[t]=m,D[d]=_,r)if(c={values:f?m:a(O),keys:i?m:a("keys"),entries:v},s)for(u in c)u in h||x(h,u,c[u]);else w(w.P+w.F*(C||p),t,c);return c}},{"./_export":25,"./_hide":33,"./_iter-create":43,"./_iterators":47,"./_library":48,"./_object-gpo":59,"./_redefine":69,"./_set-to-string-tag":74,"./_wks":97}],45:[function(e,t,n){var i=e("./_wks")("iterator"),s=!1;try{var o=[7][i]();o.return=function(){s=!0},Array.from(o,function(){throw 2})}catch(e){}t.exports=function(e,t){if(!t&&!s)return!1;var n=!1;try{var o=[7],r=o[i]();r.next=function(){return{done:n=!0}},o[i]=function(){return r},e(o)}catch(e){}return n}},{"./_wks":97}],46:[function(e,t,n){t.exports=function(e,t){return{value:t,done:!!e}}},{}],47:[function(e,t,n){t.exports={}},{}],48:[function(e,t,n){t.exports=!1},{}],49:[function(e,t,n){function o(e){a(e,r,{value:{i:"O"+ ++c,w:{}}})}var r=e("./_uid")("meta"),i=e("./_is-object"),s=e("./_has"),a=e("./_object-dp").f,c=0,u=Object.isExtensible||function(){return!0},l=!e("./_fails")(function(){return u(Object.preventExtensions({}))}),d=t.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!s(e,r)){if(!u(e))return"F";if(!t)return"E";o(e)}return e[r].i},getWeak:function(e,t){if(!s(e,r)){if(!u(e))return!0;if(!t)return!1;o(e)}return e[r].w},onFreeze:function(e){return l&&d.NEED&&u(e)&&!s(e,r)&&o(e),e}}},{"./_fails":26,"./_has":32,"./_is-object":41,"./_object-dp":53,"./_uid":93}],50:[function(e,t,n){var a=e("./_global"),c=e("./_task").set,u=a.MutationObserver||a.WebKitMutationObserver,l=a.process,d=a.Promise,f="process"==e("./_cof")(l);t.exports=function(){function e(){var e,t;for(f&&(e=l.domain)&&e.exit();n;){t=n.fn,n=n.next;try{t()}catch(e){throw n?r():o=void 0,e}}o=void 0,e&&e.enter()}var n,o,r;if(f)r=function(){l.nextTick(e)};else if(!u||a.navigator&&a.navigator.standalone)if(d&&d.resolve){var t=d.resolve(void 0);r=function(){t.then(e)}}else r=function(){c.call(a,e)};else{var i=!0,s=document.createTextNode("");new u(e).observe(s,{characterData:!0}),r=function(){s.data=i=!i}}return function(e){var t={fn:e,next:void 0};o&&(o.next=t),n||(n=t,r()),o=t}}},{"./_cof":16,"./_global":31,"./_task":82}],51:[function(e,t,n){"use strict";var r=e("./_a-function");function o(e){var n,o;this.promise=new e(function(e,t){if(void 0!==n||void 0!==o)throw TypeError("Bad Promise constructor");n=e,o=t}),this.resolve=r(n),this.reject=r(o)}t.exports.f=function(e){return new o(e)}},{"./_a-function":3}],52:[function(o,e,t){function r(){}var i=o("./_an-object"),s=o("./_object-dps"),a=o("./_enum-bug-keys"),c=o("./_shared-key")("IE_PROTO"),u="prototype",l=function(){var e,t=o("./_dom-create")("iframe"),n=a.length;for(t.style.display="none",o("./_html").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;n--;)delete l[u][a[n]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(r[u]=i(e),n=new r,r[u]=null,n[c]=e):n=l(),void 0===t?n:s(n,t)}},{"./_an-object":7,"./_dom-create":22,"./_enum-bug-keys":23,"./_html":34,"./_object-dps":54,"./_shared-key":75}],53:[function(e,t,n){var o=e("./_an-object"),r=e("./_ie8-dom-define"),i=e("./_to-primitive"),s=Object.defineProperty;n.f=e("./_descriptors")?Object.defineProperty:function(e,t,n){if(o(e),t=i(t,!0),o(n),r)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},{"./_an-object":7,"./_descriptors":21,"./_ie8-dom-define":35,"./_to-primitive":89}],54:[function(e,t,n){var s=e("./_object-dp"),a=e("./_an-object"),c=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){a(e);for(var n,o=c(t),r=o.length,i=0;i<r;)s.f(e,n=o[i++],t[n]);return e}},{"./_an-object":7,"./_descriptors":21,"./_object-dp":53,"./_object-keys":61}],55:[function(e,t,n){var o=e("./_object-pie"),r=e("./_property-desc"),i=e("./_to-iobject"),s=e("./_to-primitive"),a=e("./_has"),c=e("./_ie8-dom-define"),u=Object.getOwnPropertyDescriptor;n.f=e("./_descriptors")?u:function(e,t){if(e=i(e),t=s(t,!0),c)try{return u(e,t)}catch(e){}if(a(e,t))return r(!o.f.call(e,t),e[t])}},{"./_descriptors":21,"./_has":32,"./_ie8-dom-define":35,"./_object-pie":62,"./_property-desc":67,"./_to-iobject":86,"./_to-primitive":89}],56:[function(e,t,n){var o=e("./_to-iobject"),r=e("./_object-gopn").f,i={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(e){return s&&"[object Window]"==i.call(e)?function(e){try{return r(e)}catch(e){return s.slice()}}(e):r(o(e))}},{"./_object-gopn":57,"./_to-iobject":86}],57:[function(e,t,n){var o=e("./_object-keys-internal"),r=e("./_enum-bug-keys").concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,r)}},{"./_enum-bug-keys":23,"./_object-keys-internal":60}],58:[function(e,t,n){n.f=Object.getOwnPropertySymbols},{}],59:[function(e,t,n){var o=e("./_has"),r=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=r(e),o(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?s:null}},{"./_has":32,"./_shared-key":75,"./_to-object":88}],60:[function(e,t,n){var s=e("./_has"),a=e("./_to-iobject"),c=e("./_array-includes")(!1),u=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var n,o=a(e),r=0,i=[];for(n in o)n!=u&&s(o,n)&&i.push(n);for(;t.length>r;)s(o,n=t[r++])&&(~c(i,n)||i.push(n));return i}},{"./_array-includes":10,"./_has":32,"./_shared-key":75,"./_to-iobject":86}],61:[function(e,t,n){var o=e("./_object-keys-internal"),r=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return o(e,r)}},{"./_enum-bug-keys":23,"./_object-keys-internal":60}],62:[function(e,t,n){n.f={}.propertyIsEnumerable},{}],63:[function(e,t,n){var r=e("./_export"),i=e("./_core"),s=e("./_fails");t.exports=function(e,t){var n=(i.Object||{})[e]||Object[e],o={};o[e]=t(n),r(r.S+r.F*s(function(){n(1)}),"Object",o)}},{"./_core":17,"./_export":25,"./_fails":26}],64:[function(e,t,n){var o=e("./_global").parseInt,r=e("./_string-trim").trim,i=e("./_string-ws"),s=/^[-+]?0[xX]/;t.exports=8!==o(i+"08")||22!==o(i+"0x16")?function(e,t){var n=r(String(e),3);return o(n,t>>>0||(s.test(n)?16:10))}:o},{"./_global":31,"./_string-trim":80,"./_string-ws":81}],65:[function(e,t,n){t.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},{}],66:[function(e,t,n){var o=e("./_an-object"),r=e("./_is-object"),i=e("./_new-promise-capability");t.exports=function(e,t){if(o(e),r(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},{"./_an-object":7,"./_is-object":41,"./_new-promise-capability":51}],67:[function(e,t,n){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],68:[function(e,t,n){var r=e("./_redefine");t.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},{"./_redefine":69}],69:[function(e,t,n){var i=e("./_global"),s=e("./_hide"),a=e("./_has"),c=e("./_uid")("src"),o=e("./_function-to-string"),r="toString",u=(""+o).split(r);e("./_core").inspectSource=function(e){return o.call(e)},(t.exports=function(e,t,n,o){var r="function"==typeof n;r&&(a(n,"name")||s(n,"name",t)),e[t]!==n&&(r&&(a(n,c)||s(n,c,e[t]?""+e[t]:u.join(String(t)))),e===i?e[t]=n:o?e[t]?e[t]=n:s(e,t,n):(delete e[t],s(e,t,n)))})(Function.prototype,r,function(){return"function"==typeof this&&this[c]||o.call(this)})},{"./_core":17,"./_function-to-string":30,"./_global":31,"./_has":32,"./_hide":33,"./_uid":93}],70:[function(e,t,n){"use strict";var r=e("./_classof"),i=RegExp.prototype.exec;t.exports=function(e,t){var n=e.exec;if("function"==typeof n){var o=n.call(e,t);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},{"./_classof":15}],71:[function(e,t,n){"use strict";var o,r,s=e("./_flags"),a=RegExp.prototype.exec,c=String.prototype.replace,i=a,u="lastIndex",l=(o=/a/,r=/b*/g,a.call(o,"a"),a.call(r,"a"),0!==o[u]||0!==r[u]),d=void 0!==/()??/.exec("")[1];(l||d)&&(i=function(e){var t,n,o,r,i=this;return d&&(n=new RegExp("^"+i.source+"$(?!\\s)",s.call(i))),l&&(t=i[u]),o=a.call(i,e),l&&o&&(i[u]=i.global?o.index+o[0].length:t),d&&o&&1<o.length&&c.call(o[0],n,function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(o[r]=void 0)}),o}),t.exports=i},{"./_flags":28}],72:[function(t,e,n){function r(e,t){if(i(e),!o(t)&&null!==t)throw TypeError(t+": can't set as prototype!")}var o=t("./_is-object"),i=t("./_an-object");e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,n,o){try{(o=t("./_ctx")(Function.call,t("./_object-gopd").f(Object.prototype,"__proto__").set,2))(e,[]),n=!(e instanceof Array)}catch(e){n=!0}return function(e,t){return r(e,t),n?e.__proto__=t:o(e,t),e}}({},!1):void 0),check:r}},{"./_an-object":7,"./_ctx":19,"./_is-object":41,"./_object-gopd":55}],73:[function(e,t,n){"use strict";var o=e("./_global"),r=e("./_object-dp"),i=e("./_descriptors"),s=e("./_wks")("species");t.exports=function(e){var t=o[e];i&&t&&!t[s]&&r.f(t,s,{configurable:!0,get:function(){return this}})}},{"./_descriptors":21,"./_global":31,"./_object-dp":53,"./_wks":97}],74:[function(e,t,n){var o=e("./_object-dp").f,r=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,n){e&&!r(e=n?e:e.prototype,i)&&o(e,i,{configurable:!0,value:t})}},{"./_has":32,"./_object-dp":53,"./_wks":97}],75:[function(e,t,n){var o=e("./_shared")("keys"),r=e("./_uid");t.exports=function(e){return o[e]||(o[e]=r(e))}},{"./_shared":76,"./_uid":93}],76:[function(e,t,n){var o=e("./_core"),r=e("./_global"),i="__core-js_shared__",s=r[i]||(r[i]={});(t.exports=function(e,t){return s[e]||(s[e]=void 0!==t?t:{})})("versions",[]).push({version:o.version,mode:e("./_library")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},{"./_core":17,"./_global":31,"./_library":48}],77:[function(e,t,n){var r=e("./_an-object"),i=e("./_a-function"),s=e("./_wks")("species");t.exports=function(e,t){var n,o=r(e).constructor;return void 0===o||null==(n=r(o)[s])?t:i(n)}},{"./_a-function":3,"./_an-object":7,"./_wks":97}],78:[function(e,t,n){"use strict";var o=e("./_fails");t.exports=function(e,t){return!!e&&o(function(){t?e.call(null,function(){},1):e.call(null)})}},{"./_fails":26}],79:[function(e,t,n){var c=e("./_to-integer"),u=e("./_defined");t.exports=function(a){return function(e,t){var n,o,r=String(u(e)),i=c(t),s=r.length;return i<0||s<=i?a?"":void 0:(n=r.charCodeAt(i))<55296||56319<n||i+1===s||(o=r.charCodeAt(i+1))<56320||57343<o?a?r.charAt(i):n:a?r.slice(i,i+2):o-56320+(n-55296<<10)+65536}}},{"./_defined":20,"./_to-integer":85}],80:[function(e,t,n){function o(e,t,n){var o={},r=a(function(){return!!c[e]()||"​"!="​"[e]()}),i=o[e]=r?t(d):c[e];n&&(o[n]=i),s(s.P+s.F*r,"String",o)}var s=e("./_export"),r=e("./_defined"),a=e("./_fails"),c=e("./_string-ws"),i="["+c+"]",u=RegExp("^"+i+i+"*"),l=RegExp(i+i+"*$"),d=o.trim=function(e,t){return e=String(r(e)),1&t&&(e=e.replace(u,"")),2&t&&(e=e.replace(l,"")),e};t.exports=o},{"./_defined":20,"./_export":25,"./_fails":26,"./_string-ws":81}],81:[function(e,t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],82:[function(e,t,n){function o(){var e=+this;if(_.hasOwnProperty(e)){var t=_[e];delete _[e],t()}}function r(e){o.call(e.data)}var i,s,a,c=e("./_ctx"),u=e("./_invoke"),l=e("./_html"),d=e("./_dom-create"),f=e("./_global"),p=f.process,h=f.setImmediate,y=f.clearImmediate,m=f.MessageChannel,v=f.Dispatch,g=0,_={},b="onreadystatechange";h&&y||(h=function(e){for(var t=[],n=1;n<arguments.length;)t.push(arguments[n++]);return _[++g]=function(){u("function"==typeof e?e:Function(e),t)},i(g),g},y=function(e){delete _[e]},"process"==e("./_cof")(p)?i=function(e){p.nextTick(c(o,e,1))}:v&&v.now?i=function(e){v.now(c(o,e,1))}:m?(a=(s=new m).port2,s.port1.onmessage=r,i=c(a.postMessage,a,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(i=function(e){f.postMessage(e+"","*")},f.addEventListener("message",r,!1)):i=b in d("script")?function(e){l.appendChild(d("script"))[b]=function(){l.removeChild(this),o.call(e)}}:function(e){setTimeout(c(o,e,1),0)}),t.exports={set:h,clear:y}},{"./_cof":16,"./_ctx":19,"./_dom-create":22,"./_global":31,"./_html":34,"./_invoke":37}],83:[function(e,t,n){var o=e("./_to-integer"),r=Math.max,i=Math.min;t.exports=function(e,t){return(e=o(e))<0?r(e+t,0):i(e,t)}},{"./_to-integer":85}],84:[function(e,t,n){var o=e("./_to-integer"),r=e("./_to-length");t.exports=function(e){if(void 0===e)return 0;var t=o(e),n=r(t);if(t!==n)throw RangeError("Wrong length!");return n}},{"./_to-integer":85,"./_to-length":87}],85:[function(e,t,n){var o=Math.ceil,r=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(0<e?r:o)(e)}},{}],86:[function(e,t,n){var o=e("./_iobject"),r=e("./_defined");t.exports=function(e){return o(r(e))}},{"./_defined":20,"./_iobject":38}],87:[function(e,t,n){var o=e("./_to-integer"),r=Math.min;t.exports=function(e){return 0<e?r(o(e),9007199254740991):0}},{"./_to-integer":85}],88:[function(e,t,n){var o=e("./_defined");t.exports=function(e){return Object(o(e))}},{"./_defined":20}],89:[function(e,t,n){var r=e("./_is-object");t.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":41}],90:[function(e,t,n){"use strict";if(e("./_descriptors")){var v=e("./_library"),g=e("./_global"),_=e("./_fails"),b=e("./_export"),w=e("./_typed"),o=e("./_typed-buffer"),h=e("./_ctx"),x=e("./_an-instance"),r=e("./_property-desc"),j=e("./_hide"),i=e("./_redefine-all"),s=e("./_to-integer"),D=e("./_to-length"),k=e("./_to-index"),a=e("./_to-absolute-index"),c=e("./_to-primitive"),u=e("./_has"),E=e("./_classof"),B=e("./_is-object"),y=e("./_to-object"),m=e("./_is-array-iter"),K=e("./_object-create"),C=e("./_object-gpo"),O=e("./_object-gopn").f,S=e("./core.get-iterator-method"),l=e("./_uid"),d=e("./_wks"),f=e("./_array-methods"),p=e("./_array-includes"),P=e("./_species-constructor"),T=e("./es6.array.iterator"),M=e("./_iterators"),L=e("./_iter-detect"),A=e("./_set-species"),I=e("./_array-fill"),N=e("./_array-copy-within"),F=e("./_object-dp"),R=e("./_object-gopd"),U=F.f,z=R.f,H=g.RangeError,G=g.TypeError,V=g.Uint8Array,W="ArrayBuffer",Y="Shared"+W,X="BYTES_PER_ELEMENT",q="prototype",J=Array[q],$=o.ArrayBuffer,Q=o.DataView,Z=f(0),ee=f(2),te=f(3),ne=f(4),oe=f(5),re=f(6),ie=p(!0),se=p(!1),ae=T.values,ce=T.keys,ue=T.entries,le=J.lastIndexOf,de=J.reduce,fe=J.reduceRight,pe=J.join,he=J.sort,ye=J.slice,me=J.toString,ve=J.toLocaleString,ge=d("iterator"),_e=d("toStringTag"),be=l("typed_constructor"),we=l("def_constructor"),xe=w.CONSTR,je=w.TYPED,De=w.VIEW,ke="Wrong length!",Ee=f(1,function(e,t){return Se(P(e,e[we]),t)}),Be=_(function(){return 1===new V(new Uint16Array([1]).buffer)[0]}),Ke=!!V&&!!V[q].set&&_(function(){new V(1).set({})}),Ce=function(e,t){var n=s(e);if(n<0||n%t)throw H("Wrong offset!");return n},Oe=function(e){if(B(e)&&je in e)return e;throw G(e+" is not a typed array!")},Se=function(e,t){if(!(B(e)&&be in e))throw G("It is not a typed array constructor!");return new e(t)},Pe=function(e,t){return Te(P(e,e[we]),t)},Te=function(e,t){for(var n=0,o=t.length,r=Se(e,o);n<o;)r[n]=t[n++];return r},Me=function(e,t,n){U(e,t,{get:function(){return this._d[n]}})},Le=function(e,t,n){var o,r,i,s,a,c,u=y(e),l=arguments.length,d=1<l?t:void 0,f=void 0!==d,p=S(u);if(null!=p&&!m(p)){for(c=p.call(u),i=[],o=0;!(a=c.next()).done;o++)i.push(a.value);u=i}for(f&&2<l&&(d=h(d,n,2)),o=0,r=D(u.length),s=Se(this,r);o<r;o++)s[o]=f?d(u[o],o):u[o];return s},Ae=function(){for(var e=0,t=arguments.length,n=Se(this,t);e<t;)n[e]=arguments[e++];return n},Ie=!!V&&_(function(){ve.call(new V(1))}),Ne=function(){return ve.apply(Ie?ye.call(Oe(this)):Oe(this),arguments)},Fe={copyWithin:function(e,t,n){return N.call(Oe(this),e,t,2<arguments.length?n:void 0)},every:function(e,t){return ne(Oe(this),e,1<arguments.length?t:void 0)},fill:function(e){return I.apply(Oe(this),arguments)},filter:function(e,t){return Pe(this,ee(Oe(this),e,1<arguments.length?t:void 0))},find:function(e,t){return oe(Oe(this),e,1<arguments.length?t:void 0)},findIndex:function(e,t){return re(Oe(this),e,1<arguments.length?t:void 0)},forEach:function(e,t){Z(Oe(this),e,1<arguments.length?t:void 0)},indexOf:function(e,t){return se(Oe(this),e,1<arguments.length?t:void 0)},includes:function(e,t){return ie(Oe(this),e,1<arguments.length?t:void 0)},join:function(e){return pe.apply(Oe(this),arguments)},lastIndexOf:function(e){return le.apply(Oe(this),arguments)},map:function(e,t){return Ee(Oe(this),e,1<arguments.length?t:void 0)},reduce:function(e){return de.apply(Oe(this),arguments)},reduceRight:function(e){return fe.apply(Oe(this),arguments)},reverse:function(){for(var e,t=this,n=Oe(t).length,o=Math.floor(n/2),r=0;r<o;)e=t[r],t[r++]=t[--n],t[n]=e;return t},some:function(e,t){return te(Oe(this),e,1<arguments.length?t:void 0)},sort:function(e){return he.call(Oe(this),e)},subarray:function(e,t){var n=Oe(this),o=n.length,r=a(e,o);return new(P(n,n[we]))(n.buffer,n.byteOffset+r*n.BYTES_PER_ELEMENT,D((void 0===t?o:a(t,o))-r))}},Re=function(e,t){return Pe(this,ye.call(Oe(this),e,t))},Ue=function(e,t){Oe(this);var n=Ce(t,1),o=this.length,r=y(e),i=D(r.length),s=0;if(o<i+n)throw H(ke);for(;s<i;)this[n+s]=r[s++]},ze={entries:function(){return ue.call(Oe(this))},keys:function(){return ce.call(Oe(this))},values:function(){return ae.call(Oe(this))}},He=function(e,t){return B(e)&&e[je]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ge=function(e,t){return He(e,t=c(t,!0))?r(2,e[t]):z(e,t)},Ve=function(e,t,n){return!(He(e,t=c(t,!0))&&B(n)&&u(n,"value"))||u(n,"get")||u(n,"set")||n.configurable||u(n,"writable")&&!n.writable||u(n,"enumerable")&&!n.enumerable?U(e,t,n):(e[t]=n.value,e)};xe||(R.f=Ge,F.f=Ve),b(b.S+b.F*!xe,"Object",{getOwnPropertyDescriptor:Ge,defineProperty:Ve}),_(function(){me.call({})})&&(me=ve=function(){return pe.call(this)});var We=i({},Fe);i(We,ze),j(We,ge,ze.values),i(We,{slice:Re,set:Ue,constructor:function(){},toString:me,toLocaleString:Ne}),Me(We,"buffer","b"),Me(We,"byteOffset","o"),Me(We,"byteLength","l"),Me(We,"length","e"),U(We,_e,{get:function(){return this[je]}}),t.exports=function(e,d,t,i){function f(e,r){U(e,r,{get:function(){return e=r,(t=this._d).v[n](e*d+t.o,Be);var e,t},set:function(e){return t=r,n=e,o=this._d,i&&(n=(n=Math.round(n))<0?0:255<n?255:255&n),void o.v[s](t*d+o.o,n,Be);var t,n,o},enumerable:!0})}var p=e+((i=!!i)?"Clamped":"")+"Array",n="get"+e,s="set"+e,h=g[p],a=h||{},o=h&&C(h),r=!h||!w.ABV,c={},u=h&&h[q];r?(h=t(function(e,t,n,o){x(e,h,p,"_d");var r,i,s,a,c=0,u=0;if(B(t)){if(!(t instanceof $||(a=E(t))==W||a==Y))return je in t?Te(h,t):Le.call(h,t);r=t,u=Ce(n,d);var l=t.byteLength;if(void 0===o){if(l%d)throw H(ke);if((i=l-u)<0)throw H(ke)}else if(l<(i=D(o)*d)+u)throw H(ke);s=i/d}else s=k(t),r=new $(i=s*d);for(j(e,"_d",{b:r,o:u,l:i,e:s,v:new Q(r)});c<s;)f(e,c++)}),u=h[q]=K(We),j(u,"constructor",h)):_(function(){h(1)})&&_(function(){new h(-1)})&&L(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=t(function(e,t,n,o){var r;return x(e,h,p),B(t)?t instanceof $||(r=E(t))==W||r==Y?void 0!==o?new a(t,Ce(n,d),o):void 0!==n?new a(t,Ce(n,d)):new a(t):je in t?Te(h,t):Le.call(h,t):new a(k(t))}),Z(o!==Function.prototype?O(a).concat(O(o)):O(a),function(e){e in h||j(h,e,a[e])}),h[q]=u,v||(u.constructor=h));var l=u[ge],y=!!l&&("values"==l.name||null==l.name),m=ze.values;j(h,be,!0),j(u,je,p),j(u,De,!0),j(u,we,h),(i?new h(1)[_e]==p:_e in u)||U(u,_e,{get:function(){return p}}),c[p]=h,b(b.G+b.W+b.F*(h!=a),c),b(b.S,p,{BYTES_PER_ELEMENT:d}),b(b.S+b.F*_(function(){a.of.call(h,1)}),p,{from:Le,of:Ae}),X in u||j(u,X,d),b(b.P,p,Fe),A(p),b(b.P+b.F*Ke,p,{set:Ue}),b(b.P+b.F*!y,p,ze),v||u.toString==me||(u.toString=me),b(b.P+b.F*_(function(){new h(1).slice()}),p,{slice:Re}),b(b.P+b.F*(_(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!_(function(){u.toLocaleString.call([1,2])})),p,{toLocaleString:Ne}),M[p]=y?l:m,v||y||j(u,ge,m)}}else t.exports=function(){}},{"./_an-instance":6,"./_array-copy-within":8,"./_array-fill":9,"./_array-includes":10,"./_array-methods":11,"./_classof":15,"./_ctx":19,"./_descriptors":21,"./_export":25,"./_fails":26,"./_global":31,"./_has":32,"./_hide":33,"./_is-array-iter":39,"./_is-object":41,"./_iter-detect":45,"./_iterators":47,"./_library":48,"./_object-create":52,"./_object-dp":53,"./_object-gopd":55,"./_object-gopn":57,"./_object-gpo":59,"./_property-desc":67,"./_redefine-all":68,"./_set-species":73,"./_species-constructor":77,"./_to-absolute-index":83,"./_to-index":84,"./_to-integer":85,"./_to-length":87,"./_to-object":88,"./_to-primitive":89,"./_typed":92,"./_typed-buffer":91,"./_uid":93,"./_wks":97,"./core.get-iterator-method":98,"./es6.array.iterator":104}],91:[function(e,t,n){"use strict";var o=e("./_global"),r=e("./_descriptors"),i=e("./_library"),s=e("./_typed"),a=e("./_hide"),c=e("./_redefine-all"),u=e("./_fails"),l=e("./_an-instance"),d=e("./_to-integer"),f=e("./_to-length"),p=e("./_to-index"),h=e("./_object-gopn").f,y=e("./_object-dp").f,m=e("./_array-fill"),v=e("./_set-to-string-tag"),g="ArrayBuffer",_="DataView",b="prototype",w="Wrong index!",x=o[g],j=o[_],D=o.Math,k=o.RangeError,E=o.Infinity,B=x,K=D.abs,C=D.pow,O=D.floor,S=D.log,P=D.LN2,T="byteLength",M="byteOffset",L=r?"_b":"buffer",A=r?"_l":T,I=r?"_o":M;function N(e,t,n){var o,r,i,s=new Array(n),a=8*n-t-1,c=(1<<a)-1,u=c>>1,l=23===t?C(2,-24)-C(2,-77):0,d=0,f=e<0||0===e&&1/e<0?1:0;for((e=K(e))!=e||e===E?(r=e!=e?1:0,o=c):(o=O(S(e)/P),e*(i=C(2,-o))<1&&(o--,i*=2),2<=(e+=1<=o+u?l/i:l*C(2,1-u))*i&&(o++,i/=2),c<=o+u?(r=0,o=c):1<=o+u?(r=(e*i-1)*C(2,t),o+=u):(r=e*C(2,u-1)*C(2,t),o=0));8<=t;s[d++]=255&r,r/=256,t-=8);for(o=o<<t|r,a+=t;0<a;s[d++]=255&o,o/=256,a-=8);return s[--d]|=128*f,s}function F(e,t,n){var o,r=8*n-t-1,i=(1<<r)-1,s=i>>1,a=r-7,c=n-1,u=e[c--],l=127&u;for(u>>=7;0<a;l=256*l+e[c],c--,a-=8);for(o=l&(1<<-a)-1,l>>=-a,a+=t;0<a;o=256*o+e[c],c--,a-=8);if(0===l)l=1-s;else{if(l===i)return o?NaN:u?-E:E;o+=C(2,t),l-=s}return(u?-1:1)*o*C(2,l-t)}function R(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function U(e){return[255&e]}function z(e){return[255&e,e>>8&255]}function H(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function G(e){return N(e,52,8)}function V(e){return N(e,23,4)}function W(e,t,n){y(e[b],t,{get:function(){return this[n]}})}function Y(e,t,n,o){var r=p(+n);if(r+t>e[A])throw k(w);var i=e[L]._b,s=r+e[I],a=i.slice(s,s+t);return o?a:a.reverse()}function X(e,t,n,o,r,i){var s=p(+n);if(s+t>e[A])throw k(w);for(var a=e[L]._b,c=s+e[I],u=o(+r),l=0;l<t;l++)a[c+l]=u[i?l:t-l-1]}if(s.ABV){if(!u(function(){x(1)})||!u(function(){new x(-1)})||u(function(){return new x,new x(1.5),new x(NaN),x.name!=g})){for(var q,J=(x=function(e){return l(this,x),new B(p(e))})[b]=B[b],$=h(B),Q=0;$.length>Q;)(q=$[Q++])in x||a(x,q,B[q]);i||(J.constructor=x)}var Z=new j(new x(2)),ee=j[b].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||c(j[b],{setInt8:function(e,t){ee.call(this,e,t<<24>>24)},setUint8:function(e,t){ee.call(this,e,t<<24>>24)}},!0)}else x=function(e){l(this,x,g);var t=p(e);this._b=m.call(new Array(t),0),this[A]=t},j=function(e,t,n){l(this,j,_),l(e,x,_);var o=e[A],r=d(t);if(r<0||o<r)throw k("Wrong offset!");if(o<r+(n=void 0===n?o-r:f(n)))throw k("Wrong length!");this[L]=e,this[I]=r,this[A]=n},r&&(W(x,T,"_l"),W(j,"buffer","_b"),W(j,T,"_l"),W(j,M,"_o")),c(j[b],{getInt8:function(e){return Y(this,1,e)[0]<<24>>24},getUint8:function(e){return Y(this,1,e)[0]},getInt16:function(e,t){var n=Y(this,2,e,t);return(n[1]<<8|n[0])<<16>>16},getUint16:function(e,t){var n=Y(this,2,e,t);return n[1]<<8|n[0]},getInt32:function(e,t){return R(Y(this,4,e,t))},getUint32:function(e,t){return R(Y(this,4,e,t))>>>0},getFloat32:function(e,t){return F(Y(this,4,e,t),23,4)},getFloat64:function(e,t){return F(Y(this,8,e,t),52,8)},setInt8:function(e,t){X(this,1,e,U,t)},setUint8:function(e,t){X(this,1,e,U,t)},setInt16:function(e,t,n){X(this,2,e,z,t,n)},setUint16:function(e,t,n){X(this,2,e,z,t,n)},setInt32:function(e,t,n){X(this,4,e,H,t,n)},setUint32:function(e,t,n){X(this,4,e,H,t,n)},setFloat32:function(e,t,n){X(this,4,e,V,t,n)},setFloat64:function(e,t,n){X(this,8,e,G,t,n)}});v(x,g),v(j,_),a(j[b],s.VIEW,!0),n[g]=x,n[_]=j},{"./_an-instance":6,"./_array-fill":9,"./_descriptors":21,"./_fails":26,"./_global":31,"./_hide":33,"./_library":48,"./_object-dp":53,"./_object-gopn":57,"./_redefine-all":68,"./_set-to-string-tag":74,"./_to-index":84,"./_to-integer":85,"./_to-length":87,"./_typed":92}],92:[function(e,t,n){for(var o,r=e("./_global"),i=e("./_hide"),s=e("./_uid"),a=s("typed_array"),c=s("view"),u=!(!r.ArrayBuffer||!r.DataView),l=u,d=0,f="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");d<9;)(o=r[f[d++]])?(i(o.prototype,a,!0),i(o.prototype,c,!0)):l=!1;t.exports={ABV:u,CONSTR:l,TYPED:a,VIEW:c}},{"./_global":31,"./_hide":33,"./_uid":93}],93:[function(e,t,n){var o=0,r=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++o+r).toString(36))}},{}],94:[function(e,t,n){var o=e("./_global").navigator;t.exports=o&&o.userAgent||""},{"./_global":31}],95:[function(e,t,n){var o=e("./_global"),r=e("./_core"),i=e("./_library"),s=e("./_wks-ext"),a=e("./_object-dp").f;t.exports=function(e){var t=r.Symbol||(r.Symbol=!i&&o.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:s.f(e)})}},{"./_core":17,"./_global":31,"./_library":48,"./_object-dp":53,"./_wks-ext":96}],96:[function(e,t,n){n.f=e("./_wks")},{"./_wks":97}],97:[function(e,t,n){var o=e("./_shared")("wks"),r=e("./_uid"),i=e("./_global").Symbol,s="function"==typeof i;(t.exports=function(e){return o[e]||(o[e]=s&&i[e]||(s?i:r)("Symbol."+e))}).store=o},{"./_global":31,"./_shared":76,"./_uid":93}],98:[function(e,t,n){var o=e("./_classof"),r=e("./_wks")("iterator"),i=e("./_iterators");t.exports=e("./_core").getIteratorMethod=function(e){if(null!=e)return e[r]||e["@@iterator"]||i[o(e)]}},{"./_classof":15,"./_core":17,"./_iterators":47,"./_wks":97}],99:[function(e,t,n){var o=e("./_export");o(o.P,"Array",{fill:e("./_array-fill")}),e("./_add-to-unscopables")("fill")},{"./_add-to-unscopables":4,"./_array-fill":9,"./_export":25}],100:[function(e,t,n){"use strict";var o=e("./_export"),r=e("./_array-methods")(2);o(o.P+o.F*!e("./_strict-method")([].filter,!0),"Array",{filter:function(e,t){return r(this,e,t)}})},{"./_array-methods":11,"./_export":25,"./_strict-method":78}],101:[function(e,t,n){"use strict";var h=e("./_ctx"),o=e("./_export"),y=e("./_to-object"),m=e("./_iter-call"),v=e("./_is-array-iter"),g=e("./_to-length"),_=e("./_create-property"),b=e("./core.get-iterator-method");o(o.S+o.F*!e("./_iter-detect")(function(e){Array.from(e)}),"Array",{from:function(e,t,n){var o,r,i,s,a=y(e),c="function"==typeof this?this:Array,u=arguments.length,l=1<u?t:void 0,d=void 0!==l,f=0,p=b(a);if(d&&(l=h(l,2<u?n:void 0,2)),null==p||c==Array&&v(p))for(r=new c(o=g(a.length));f<o;f++)_(r,f,d?l(a[f],f):a[f]);else for(s=p.call(a),r=new c;!(i=s.next()).done;f++)_(r,f,d?m(s,l,[i.value,f],!0):i.value);return r.length=f,r}})},{"./_create-property":18,"./_ctx":19,"./_export":25,"./_is-array-iter":39,"./_iter-call":42,"./_iter-detect":45,"./_to-length":87,"./_to-object":88,"./core.get-iterator-method":98}],102:[function(e,t,n){"use strict";var o=e("./_export"),r=e("./_array-includes")(!1),i=[].indexOf,s=!!i&&1/[1].indexOf(1,-0)<0;o(o.P+o.F*(s||!e("./_strict-method")(i)),"Array",{indexOf:function(e,t){return s?i.apply(this,arguments)||0:r(this,e,t)}})},{"./_array-includes":10,"./_export":25,"./_strict-method":78}],103:[function(e,t,n){var o=e("./_export");o(o.S,"Array",{isArray:e("./_is-array")})},{"./_export":25,"./_is-array":40}],104:[function(e,t,n){"use strict";var o=e("./_add-to-unscopables"),r=e("./_iter-step"),i=e("./_iterators"),s=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=s(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,r(1)):r(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},{"./_add-to-unscopables":4,"./_iter-define":44,"./_iter-step":46,"./_iterators":47,"./_to-iobject":86}],105:[function(e,t,n){var o=e("./_export");o(o.S,"Date",{now:function(){return(new Date).getTime()}})},{"./_export":25}],106:[function(e,t,n){var o=Date.prototype,r="Invalid Date",i="toString",s=o[i],a=o.getTime;new Date(NaN)+""!=r&&e("./_redefine")(o,i,function(){var e=a.call(this);return e==e?s.call(this):r})},{"./_redefine":69}],107:[function(e,t,n){var o=e("./_export");o(o.P,"Function",{bind:e("./_bind")})},{"./_bind":14,"./_export":25}],108:[function(e,t,n){var o=e("./_object-dp").f,r=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in r||e("./_descriptors")&&o(r,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},{"./_descriptors":21,"./_object-dp":53}],109:[function(e,t,n){"use strict";function o(e){var t=l(e,!1);if("string"==typeof t&&2<t.length){var n,o,r,i=(t=_?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:o=2,r=49;break;case 79:case 111:o=8,r=55;break;default:return+t}for(var s,a=t.slice(2),c=0,u=a.length;c<u;c++)if((s=a.charCodeAt(c))<48||r<s)return NaN;return parseInt(a,o)}}return+t}var r=e("./_global"),i=e("./_has"),s=e("./_cof"),a=e("./_inherit-if-required"),l=e("./_to-primitive"),c=e("./_fails"),u=e("./_object-gopn").f,d=e("./_object-gopd").f,f=e("./_object-dp").f,p=e("./_string-trim").trim,h="Number",y=r[h],m=y,v=y.prototype,g=s(e("./_object-create")(v))==h,_="trim"in String.prototype;if(!y(" 0o1")||!y("0b1")||y("+0x1")){y=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof y&&(g?c(function(){v.valueOf.call(n)}):s(n)!=h)?a(new m(o(t)),n,y):o(t)};for(var b,w=e("./_descriptors")?u(m):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)i(m,b=w[x])&&!i(y,b)&&f(y,b,d(m,b));(y.prototype=v).constructor=y,e("./_redefine")(r,h,y)}},{"./_cof":16,"./_descriptors":21,"./_fails":26,"./_global":31,"./_has":32,"./_inherit-if-required":36,"./_object-create":52,"./_object-dp":53,"./_object-gopd":55,"./_object-gopn":57,"./_redefine":69,"./_string-trim":80,"./_to-primitive":89}],110:[function(e,t,n){var o=e("./_export"),r=e("./_parse-int");o(o.S+o.F*(Number.parseInt!=r),"Number",{parseInt:r})},{"./_export":25,"./_parse-int":64}],111:[function(e,t,n){var o=e("./_export");o(o.S+o.F*!e("./_descriptors"),"Object",{defineProperty:e("./_object-dp").f})},{"./_descriptors":21,"./_export":25,"./_object-dp":53}],112:[function(e,t,n){var o=e("./_to-object"),r=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return r(o(e))}})},{"./_object-keys":61,"./_object-sap":63,"./_to-object":88}],113:[function(e,t,n){"use strict";var o=e("./_classof"),r={};r[e("./_wks")("toStringTag")]="z",r+""!="[object z]"&&e("./_redefine")(Object.prototype,"toString",function(){return"[object "+o(this)+"]"},!0)},{"./_classof":15,"./_redefine":69,"./_wks":97}],114:[function(n,e,t){"use strict";function o(){}function d(e){var t;return!(!m(e)||"function"!=typeof(t=e.then))&&t}function r(l,n){if(!l._n){l._n=!0;var o=l._c;x(function(){for(var c=l._v,u=1==l._s,e=0,t=function(e){var t,n,o,r=u?e.ok:e.fail,i=e.resolve,s=e.reject,a=e.domain;try{r?(u||(2==l._h&&N(l),l._h=1),!0===r?t=c:(a&&a.enter(),t=r(c),a&&(a.exit(),o=!0)),t===e.promise?s(K("Promise-chain cycle")):(n=d(t))?n.call(t,i,s):i(t)):s(c)}catch(e){a&&!o&&a.exit(),s(e)}};o.length>e;)t(o[e++]);l._c=[],l._n=!1,n&&!l._h&&A(l)})}}function i(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),r(t,!0))}var s,a,c,u,l=n("./_library"),f=n("./_global"),p=n("./_ctx"),h=n("./_classof"),y=n("./_export"),m=n("./_is-object"),v=n("./_a-function"),g=n("./_an-instance"),_=n("./_for-of"),b=n("./_species-constructor"),w=n("./_task").set,x=n("./_microtask")(),j=n("./_new-promise-capability"),D=n("./_perform"),k=n("./_user-agent"),E=n("./_promise-resolve"),B="Promise",K=f.TypeError,C=f.process,O=C&&C.versions,S=O&&O.v8||"",P=f[B],T="process"==h(C),M=a=j.f,L=!!function(){try{var e=P.resolve(1),t=(e.constructor={})[n("./_wks")("species")]=function(e){e(o,o)};return(T||"function"==typeof PromiseRejectionEvent)&&e.then(o)instanceof t&&0!==S.indexOf("6.6")&&-1===k.indexOf("Chrome/66")}catch(e){}}(),A=function(i){w.call(f,function(){var e,t,n,o=i._v,r=I(i);if(r&&(e=D(function(){T?C.emit("unhandledRejection",o,i):(t=f.onunhandledrejection)?t({promise:i,reason:o}):(n=f.console)&&n.error&&n.error("Unhandled promise rejection",o)}),i._h=T||I(i)?2:1),i._a=void 0,r&&e.e)throw e.v})},I=function(e){return 1!==e._h&&0===(e._a||e._c).length},N=function(t){w.call(f,function(){var e;T?C.emit("rejectionHandled",t):(e=f.onrejectionhandled)&&e({promise:t,reason:t._v})})},F=function(e){var n,o=this;if(!o._d){o._d=!0,o=o._w||o;try{if(o===e)throw K("Promise can't be resolved itself");(n=d(e))?x(function(){var t={_w:o,_d:!1};try{n.call(e,p(F,t,1),p(i,t,1))}catch(e){i.call(t,e)}}):(o._v=e,o._s=1,r(o,!1))}catch(e){i.call({_w:o,_d:!1},e)}}};L||(P=function(e){g(this,P,B,"_h"),v(e),s.call(this);try{e(p(F,this,1),p(i,this,1))}catch(e){i.call(this,e)}},(s=function(){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n("./_redefine-all")(P.prototype,{then:function(e,t){var n=M(b(this,P));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=T?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&r(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),c=function(){var e=new s;this.promise=e,this.resolve=p(F,e,1),this.reject=p(i,e,1)},j.f=M=function(e){return e===P||e===u?new c:a(e)}),y(y.G+y.W+y.F*!L,{Promise:P}),n("./_set-to-string-tag")(P,B),n("./_set-species")(B),u=n("./_core")[B],y(y.S+y.F*!L,B,{reject:function(e){var t=M(this);return(0,t.reject)(e),t.promise}}),y(y.S+y.F*(l||!L),B,{resolve:function(e){return E(l&&this===u?P:this,e)}}),y(y.S+y.F*!(L&&n("./_iter-detect")(function(e){P.all(e).catch(o)})),B,{all:function(e){var s=this,t=M(s),a=t.resolve,c=t.reject,n=D(function(){var o=[],r=0,i=1;_(e,!1,function(e){var t=r++,n=!1;o.push(void 0),i++,s.resolve(e).then(function(e){n||(n=!0,o[t]=e,--i||a(o))},c)}),--i||a(o)});return n.e&&c(n.v),t.promise},race:function(e){var t=this,n=M(t),o=n.reject,r=D(function(){_(e,!1,function(e){t.resolve(e).then(n.resolve,o)})});return r.e&&o(r.v),n.promise}})},{"./_a-function":3,"./_an-instance":6,"./_classof":15,"./_core":17,"./_ctx":19,"./_export":25,"./_for-of":29,"./_global":31,"./_is-object":41,"./_iter-detect":45,"./_library":48,"./_microtask":50,"./_new-promise-capability":51,"./_perform":65,"./_promise-resolve":66,"./_redefine-all":68,"./_set-species":73,"./_set-to-string-tag":74,"./_species-constructor":77,"./_task":82,"./_user-agent":94,"./_wks":97}],115:[function(e,t,n){"use strict";var o=e("./_regexp-exec");e("./_export")({target:"RegExp",proto:!0,forced:o!==/./.exec},{exec:o})},{"./_export":25,"./_regexp-exec":71}],116:[function(e,t,n){e("./_descriptors")&&"g"!=/./g.flags&&e("./_object-dp").f(RegExp.prototype,"flags",{configurable:!0,get:e("./_flags")})},{"./_descriptors":21,"./_flags":28,"./_object-dp":53}],117:[function(e,t,n){"use strict";var d=e("./_an-object"),f=e("./_to-length"),p=e("./_advance-string-index"),h=e("./_regexp-exec-abstract");e("./_fix-re-wks")("match",1,function(o,r,u,l){return[function(e){var t=o(this),n=null==e?void 0:e[r];return void 0!==n?n.call(e,t):new RegExp(e)[r](String(t))},function(e){var t=l(u,e,this);if(t.done)return t.value;var n=d(e),o=String(this);if(!n.global)return h(n,o);for(var r,i=n.unicode,s=[],a=n.lastIndex=0;null!==(r=h(n,o));){var c=String(r[0]);""===(s[a]=c)&&(n.lastIndex=p(o,f(n.lastIndex),i)),a++}return 0===a?null:s}]})},{"./_advance-string-index":5,"./_an-object":7,"./_fix-re-wks":27,"./_regexp-exec-abstract":70,"./_to-length":87}],118:[function(t,e,n){"use strict";t("./es6.regexp.flags");function o(e){t("./_redefine")(RegExp.prototype,a,e,!0)}var r=t("./_an-object"),i=t("./_flags"),s=t("./_descriptors"),a="toString",c=/./[a];t("./_fails")(function(){return"/a/b"!=c.call({source:"a",flags:"b"})})?o(function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!s&&e instanceof RegExp?i.call(e):void 0)}):c.name!=a&&o(function(){return c.call(this)})},{"./_an-object":7,"./_descriptors":21,"./_fails":26,"./_flags":28,"./_redefine":69,"./es6.regexp.flags":116}],119:[function(e,t,n){"use strict";var o=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=o(t,n),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":44,"./_string-at":79}],120:[function(e,t,n){"use strict";function o(e){var t=Y[e]=O(F[z]);return t._k=e,t}function r(e,t){D(e);for(var n,o=x(t=B(t)),r=0,i=o.length;r<i;)te(e,n=o[r++],t[n]);return e}function i(e){var t=V.call(this,e=K(e,!0));return!(this===q&&l(Y,e)&&!l(X,e))&&(!(t||!l(this,e)||!l(Y,e)||l(this,H)&&this[H][e])||t)}function s(e,t){if(e=B(e),t=K(t,!0),e!==q||!l(Y,t)||l(X,t)){var n=A(e,t);return!n||!l(Y,t)||l(e,H)&&e[H][t]||(n.enumerable=!0),n}}function a(e){for(var t,n=N(B(e)),o=[],r=0;n.length>r;)l(Y,t=n[r++])||t==H||t==h||o.push(t);return o}function c(e){for(var t,n=e===q,o=N(n?X:B(e)),r=[],i=0;o.length>i;)!l(Y,t=o[i++])||n&&!l(q,t)||r.push(Y[t]);return r}var u=e("./_global"),l=e("./_has"),d=e("./_descriptors"),f=e("./_export"),p=e("./_redefine"),h=e("./_meta").KEY,y=e("./_fails"),m=e("./_shared"),v=e("./_set-to-string-tag"),g=e("./_uid"),_=e("./_wks"),b=e("./_wks-ext"),w=e("./_wks-define"),x=e("./_enum-keys"),j=e("./_is-array"),D=e("./_an-object"),k=e("./_is-object"),E=e("./_to-object"),B=e("./_to-iobject"),K=e("./_to-primitive"),C=e("./_property-desc"),O=e("./_object-create"),S=e("./_object-gopn-ext"),P=e("./_object-gopd"),T=e("./_object-gops"),M=e("./_object-dp"),L=e("./_object-keys"),A=P.f,I=M.f,N=S.f,F=u.Symbol,R=u.JSON,U=R&&R.stringify,z="prototype",H=_("_hidden"),G=_("toPrimitive"),V={}.propertyIsEnumerable,W=m("symbol-registry"),Y=m("symbols"),X=m("op-symbols"),q=Object[z],J="function"==typeof F&&!!T.f,$=u.QObject,Q=!$||!$[z]||!$[z].findChild,Z=d&&y(function(){return 7!=O(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(e,t,n){var o=A(q,t);o&&delete q[t],I(e,t,n),o&&e!==q&&I(q,t,o)}:I,ee=J&&"symbol"==typeof F.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof F},te=function(e,t,n){return e===q&&te(X,t,n),D(e),t=K(t,!0),D(n),l(Y,t)?(n.enumerable?(l(e,H)&&e[H][t]&&(e[H][t]=!1),n=O(n,{enumerable:C(0,!1)})):(l(e,H)||I(e,H,C(1,{})),e[H][t]=!0),Z(e,t,n)):I(e,t,n)};J||(p((F=function(e){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=g(0<arguments.length?e:void 0),n=function(e){this===q&&n.call(X,e),l(this,H)&&l(this[H],t)&&(this[H][t]=!1),Z(this,t,C(1,e))};return d&&Q&&Z(q,t,{configurable:!0,set:n}),o(t)})[z],"toString",function(){return this._k}),P.f=s,M.f=te,e("./_object-gopn").f=S.f=a,e("./_object-pie").f=i,T.f=c,d&&!e("./_library")&&p(q,"propertyIsEnumerable",i,!0),b.f=function(e){return o(_(e))}),f(f.G+f.W+f.F*!J,{Symbol:F});for(var ne="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),oe=0;ne.length>oe;)_(ne[oe++]);for(var re=L(_.store),ie=0;re.length>ie;)w(re[ie++]);f(f.S+f.F*!J,"Symbol",{for:function(e){return l(W,e+="")?W[e]:W[e]=F(e)},keyFor:function(e){if(!ee(e))throw TypeError(e+" is not a symbol!");for(var t in W)if(W[t]===e)return t},useSetter:function(){Q=!0},useSimple:function(){Q=!1}}),f(f.S+f.F*!J,"Object",{create:function(e,t){return void 0===t?O(e):r(O(e),t)},defineProperty:te,defineProperties:r,getOwnPropertyDescriptor:s,getOwnPropertyNames:a,getOwnPropertySymbols:c});var se=y(function(){T.f(1)});f(f.S+f.F*se,"Object",{getOwnPropertySymbols:function(e){return T.f(E(e))}}),R&&f(f.S+f.F*(!J||y(function(){var e=F();return"[null]"!=U([e])||"{}"!=U({a:e})||"{}"!=U(Object(e))})),"JSON",{stringify:function(e){for(var t,n,o=[e],r=1;r<arguments.length;)o.push(arguments[r++]);if(n=t=o[1],(k(t)||void 0!==e)&&!ee(e))return j(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ee(t))return t}),o[1]=t,U.apply(R,o)}}),F[z][G]||e("./_hide")(F[z],G,F[z].valueOf),v(F,"Symbol"),v(Math,"Math",!0),v(u.JSON,"JSON",!0)},{"./_an-object":7,"./_descriptors":21,"./_enum-keys":24,"./_export":25,"./_fails":26,"./_global":31,"./_has":32,"./_hide":33,"./_is-array":40,"./_is-object":41,"./_library":48,"./_meta":49,"./_object-create":52,"./_object-dp":53,"./_object-gopd":55,"./_object-gopn":57,"./_object-gopn-ext":56,"./_object-gops":58,"./_object-keys":61,"./_object-pie":62,"./_property-desc":67,"./_redefine":69,"./_set-to-string-tag":74,"./_shared":76,"./_to-iobject":86,"./_to-object":88,"./_to-primitive":89,"./_uid":93,"./_wks":97,"./_wks-define":95,"./_wks-ext":96}],121:[function(e,t,n){e("./_typed-array")("Float32",4,function(o){return function(e,t,n){return o(this,e,t,n)}})},{"./_typed-array":90}],122:[function(e,t,n){e("./_typed-array")("Uint8",1,function(o){return function(e,t,n){return o(this,e,t,n)}})},{"./_typed-array":90}],123:[function(e,t,n){e("./_typed-array")("Uint8",1,function(o){return function(e,t,n){return o(this,e,t,n)}},!0)},{"./_typed-array":90}],124:[function(e,t,n){e("./_wks-define")("asyncIterator")},{"./_wks-define":95}],125:[function(e,t,n){for(var o=e("./es6.array.iterator"),r=e("./_object-keys"),i=e("./_redefine"),s=e("./_global"),a=e("./_hide"),c=e("./_iterators"),u=e("./_wks"),l=u("iterator"),d=u("toStringTag"),f=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=r(p),y=0;y<h.length;y++){var m,v=h[y],g=p[v],_=s[v],b=_&&_.prototype;if(b&&(b[l]||a(b,l,f),b[d]||a(b,d,v),c[v]=f,g))for(m in o)b[m]||i(b,m,o[m],!0)}},{"./_global":31,"./_hide":33,"./_iterators":47,"./_object-keys":61,"./_redefine":69,"./_wks":97,"./es6.array.iterator":104}],126:[function(e,t,n){"use strict";var o=t.exports={};o.isIE=function(e){return(-1!==(t=navigator.userAgent.toLowerCase()).indexOf("msie")||-1!==t.indexOf("trident")||-1!==t.indexOf(" edge/"))&&(!e||e===function(){for(var e=3,t=document.createElement("div"),n=t.getElementsByTagName("i");t.innerHTML="\x3c!--[if gt IE "+ ++e+"]><i></i><![endif]--\x3e",n[0];);return 4<e?e:void 0}());var t},o.isLegacyOpera=function(){return!!window.opera}},{}],127:[function(e,t,n){"use strict";(t.exports={}).forEach=function(e,t){for(var n=0;n<e.length;n++){var o=t(e[n]);if(o)return o}}},{}],128:[function(e,t,n){"use strict";var v=e("../browser-detector");t.exports=function(p){var h=(p=p||{}).reporter,y=p.batchProcessor,m=p.stateHandler.getState;if(!h)throw new Error("Missing required dependency: reporter.");function r(e){return m(e).object}return{makeDetectable:function(i,e,t){var n,o,r,s,a,c,u,l,d;function f(){function e(){if("static"===u.position){n.style.setProperty("position","relative",i.important?"important":"");var e=function(e,t,n,o){var r=n[o];"auto"!==r&&"0"!==r.replace(/[^-\d\.]/g,"")&&(e.warn("An element that is positioned static has style."+o+"="+r+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+o+" will be set to 0. Element: ",t),t.style.setProperty(o,"0",i.important?"important":""))};e(h,n,u,"top"),e(h,n,u,"right"),e(h,n,u,"bottom"),e(h,n,u,"left")}}""!==u.position&&(e(),c=!0);var t=document.createElement("object");t.style.cssText=a,t.tabIndex=-1,t.type="text/html",t.setAttribute("aria-hidden","true"),t.onload=function(){c||e(),function e(t,n){if(!t.contentDocument){var o=m(t);return o.checkForObjectDocumentTimeoutId&&window.clearTimeout(o.checkForObjectDocumentTimeoutId),void(o.checkForObjectDocumentTimeoutId=setTimeout(function(){o.checkForObjectDocumentTimeoutId=0,e(t,n)},100))}n(t.contentDocument)}(this,function(){o(n)})},v.isIE()||(t.data="about:blank"),m(n)&&(n.appendChild(t),m(n).object=t,v.isIE()&&(t.data="about:blank"))}t||(t=e,e=i,i=null),i=i||{},v.isIE(8)?t(e):(n=e,o=t,r=["display: block","position: absolute","top: 0","left: 0","width: 100%","height: 100%","border: none","padding: 0","margin: 0","opacity: 0","z-index: -1000","pointer-events: none"],s=p.important?" !important; ":"; ",a=(r.join(s)+s).trim(),c=!1,u=window.getComputedStyle(n),l=n.offsetWidth,d=n.offsetHeight,m(n).startSize={width:l,height:d},y?y.add(f):f())},addListener:function(e,t){function n(){t(e)}if(v.isIE(8))m(e).object={proxy:n},e.attachEvent("onresize",n);else{var o=r(e);if(!o)throw new Error("Element is not detectable by this strategy.");o.contentDocument.defaultView.addEventListener("resize",n)}},uninstall:function(e){if(m(e)){var t=r(e);t&&(v.isIE(8)?e.detachEvent("onresize",t.proxy):e.removeChild(t),m(e).checkForObjectDocumentTimeoutId&&window.clearTimeout(m(e).checkForObjectDocumentTimeoutId),delete m(e).object)}}}}},{"../browser-detector":126}],129:[function(e,t,n){"use strict";var S=e("../collection-utils").forEach;t.exports=function(n){var k=(n=n||{}).reporter,v=n.batchProcessor,E=n.stateHandler.getState,g=(n.stateHandler.hasState,n.idHandler);if(!v)throw new Error("Missing required dependency: batchProcessor");if(!k)throw new Error("Missing required dependency: reporter.");var B=function(){var e=document.createElement("div");e.style.cssText=C(["position: absolute","width: 1000px","height: 1000px","visibility: hidden","margin: 0","padding: 0"]);var t=document.createElement("div");t.style.cssText=C(["position: absolute","width: 500px","height: 500px","overflow: scroll","visibility: none","top: -1500px","left: -1500px","visibility: hidden","margin: 0","padding: 0"]),t.appendChild(e),document.body.insertBefore(t,document.body.firstChild);var n=500-t.clientWidth,o=500-t.clientHeight;return document.body.removeChild(t),{width:n,height:o}}(),K="erd_scroll_detection_container";function e(e){!function(o,r,e){if(!o.getElementById(r)){var t=e+"_animation",n=e+"_animation_active",i="/* Created by the element-resize-detector library. */\n";i+="."+e+" > div::-webkit-scrollbar { "+C(["display: none"])+" }\n\n",i+="."+n+" { "+C(["-webkit-animation-duration: 0.1s","animation-duration: 0.1s","-webkit-animation-name: "+t,"animation-name: "+t])+" }\n",i+="@-webkit-keyframes "+t+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n",function(e,t){t=t||function(e){o.head.appendChild(e)};var n=o.createElement("style");n.innerHTML=e,n.id=r,t(n)}(i+="@keyframes "+t+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }")}}(e,"erd_scroll_detection_scrollbar_style",K)}function C(e){var t=n.important?" !important; ":"; ";return(e.join(t)+t).trim()}function O(e,t,n){if(e.addEventListener)e.addEventListener(t,n);else{if(!e.attachEvent)return k.error("[scroll] Don't know how to add event listeners.");e.attachEvent("on"+t,n)}}function o(e,t,n){if(e.removeEventListener)e.removeEventListener(t,n);else{if(!e.detachEvent)return k.error("[scroll] Don't know how to remove event listeners.");e.detachEvent("on"+t,n)}}function _(e){return E(e).container.childNodes[0].childNodes[0].childNodes[0]}function b(e){return E(e).container.childNodes[0].childNodes[0].childNodes[1]}return e(window.document),{makeDetectable:function(w,x,e){function j(){if(w.debug){var e=Array.prototype.slice.call(arguments);if(e.unshift(g.get(x),"Scroll: "),k.log.apply)k.log.apply(null,e);else for(var t=0;t<e.length;t++)k.log(e[t])}}function r(e){var t=E(e).container.childNodes[0],n=window.getComputedStyle(t);return!n.width||-1===n.width.indexOf("px")}function t(){var e=window.getComputedStyle(x),t={};return t.position=e.position,t.width=x.offsetWidth,t.height=x.offsetHeight,t.top=e.top,t.right=e.right,t.bottom=e.bottom,t.left=e.left,t.widthCSS=e.width,t.heightCSS=e.height,t}function n(){if(j("storeStyle invoked."),E(x)){var e=t();E(x).style=e}else j("Aborting because element has been uninstalled")}function a(e,t,n){E(e).lastWidth=t,E(e).lastHeight=n}function u(){return 2*B.width+1}function l(){return 2*B.height+1}function d(e){return e+10+u()}function f(e){return e+10+l()}function c(e,t,n){var o=_(e),r=b(e),i=d(t),s=f(n),a=2*t+u(),c=2*n+l();o.scrollLeft=i,o.scrollTop=s,r.scrollLeft=a,r.scrollTop=c}function D(){var e=E(x).container;if(!e){(e=document.createElement("div")).className=K,e.style.cssText=C(["visibility: hidden","display: inline","width: 0px","height: 0px","z-index: -1","overflow: hidden","margin: 0","padding: 0"]),E(x).container=e,e.className+=" "+K+"_animation_active",x.appendChild(e);var t=function(){E(x).onRendered&&E(x).onRendered()};O(e,"animationstart",t),E(x).onAnimationStart=t}return e}function o(){if(j("Injecting elements"),E(x)){!function(){var e=E(x).style;if("static"===e.position){x.style.setProperty("position","relative",w.important?"important":"");var t=function(e,t,n,o){var r=n[o];"auto"!==r&&"0"!==r.replace(/[^-\d\.]/g,"")&&(e.warn("An element that is positioned static has style."+o+"="+r+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+o+" will be set to 0. Element: ",t),t.style[o]=0)};t(k,x,e,"top"),t(k,x,e,"right"),t(k,x,e,"bottom"),t(k,x,e,"left")}}();var e=E(x).container;e=e||D();var t,n,o,r,i=B.width,s=B.height,a=C(["position: absolute","flex: none","overflow: hidden","z-index: -1","visibility: hidden","width: 100%","height: 100%","left: 0px","top: 0px"]),c=C(["position: absolute","flex: none","overflow: hidden","z-index: -1","visibility: hidden"].concat(["left: "+(t=(t=-(1+i))?t+"px":"0"),"top: "+(n=(n=-(1+s))?n+"px":"0"),"right: "+(r=(r=-i)?r+"px":"0"),"bottom: "+(o=(o=-s)?o+"px":"0")])),u=C(["position: absolute","flex: none","overflow: scroll","z-index: -1","visibility: hidden","width: 100%","height: 100%"]),l=C(["position: absolute","flex: none","overflow: scroll","z-index: -1","visibility: hidden","width: 100%","height: 100%"]),d=C(["position: absolute","left: 0","top: 0"]),f=C(["position: absolute","width: 200%","height: 200%"]),p=document.createElement("div"),h=document.createElement("div"),y=document.createElement("div"),m=document.createElement("div"),v=document.createElement("div"),g=document.createElement("div");p.dir="ltr",p.style.cssText=a,p.className=K,h.className=K,h.style.cssText=c,y.style.cssText=u,m.style.cssText=d,v.style.cssText=l,g.style.cssText=f,y.appendChild(m),v.appendChild(g),h.appendChild(y),h.appendChild(v),p.appendChild(h),e.appendChild(p),O(y,"scroll",_),O(v,"scroll",b),E(x).onExpandScroll=_,E(x).onShrinkScroll=b}else j("Aborting because element has been uninstalled");function _(){E(x).onExpand&&E(x).onExpand()}function b(){E(x).onShrink&&E(x).onShrink()}}function i(){function i(e,t,n){var o=_(e).childNodes[0],r=d(t),i=f(n);o.style.setProperty("width",r+"px",w.important?"important":""),o.style.setProperty("height",i+"px",w.important?"important":"")}function n(e){var n=x.offsetWidth,o=x.offsetHeight,r=n!==E(x).lastWidth||o!==E(x).lastHeight;j("Storing current size",n,o),a(x,n,o),v.add(0,function(){if(r)if(E(x))if(s()){if(w.debug){var e=x.offsetWidth,t=x.offsetHeight;e===n&&t===o||k.warn(g.get(x),"Scroll: Size changed before updating detector elements.")}i(x,n,o)}else j("Aborting because element container has not been initialized");else j("Aborting because element has been uninstalled")}),v.add(1,function(){E(x)?s()?c(x,n,o):j("Aborting because element container has not been initialized"):j("Aborting because element has been uninstalled")}),r&&e&&v.add(2,function(){E(x)?s()?e():j("Aborting because element container has not been initialized"):j("Aborting because element has been uninstalled")})}function s(){return E(x).container}function o(){j("notifyListenersIfNeeded invoked");var e=E(x);return void 0===E(x).lastNotifiedWidth&&e.lastWidth===e.startSize.width&&e.lastHeight===e.startSize.height?j("Not notifying: Size is the same as the start size, and there has been no notification yet."):e.lastWidth===e.lastNotifiedWidth&&e.lastHeight===e.lastNotifiedHeight?j("Not notifying: Size already notified"):(j("Current size not notified, notifying..."),e.lastNotifiedWidth=e.lastWidth,e.lastNotifiedHeight=e.lastHeight,void S(E(x).listeners,function(e){e(x)}))}function e(){j("Scroll detected."),r(x)?j("Scroll event fired while unrendered. Ignoring..."):n(o)}if(j("registerListenersAndPositionElements invoked."),E(x)){E(x).onRendered=function(){if(j("startanimation triggered."),r(x))j("Ignoring since element is still unrendered...");else{j("Element rendered.");var e=_(x),t=b(x);0!==e.scrollLeft&&0!==e.scrollTop&&0!==t.scrollLeft&&0!==t.scrollTop||(j("Scrollbars out of sync. Updating detector elements..."),n(o))}},E(x).onExpand=e,E(x).onShrink=e;var t=E(x).style;i(x,t.width,t.height)}else j("Aborting because element has been uninstalled")}function s(){if(j("finalizeDomMutation invoked."),E(x)){var e=E(x).style;a(x,e.width,e.height),c(x,e.width,e.height)}else j("Aborting because element has been uninstalled")}function p(){e(x)}function h(){var e;j("Installing..."),E(x).listeners=[],e=t(),E(x).startSize={width:e.width,height:e.height},j("Element start size",E(x).startSize),v.add(0,n),v.add(1,o),v.add(2,i),v.add(3,s),v.add(4,p)}var y,m;e||(e=x,x=w,w=null),w=w||{},j("Making detectable..."),(m=y=x)!==m.ownerDocument.body&&!m.ownerDocument.body.contains(m)||null===window.getComputedStyle(y)?(j("Element is detached"),D(),j("Waiting until element is attached..."),E(x).onRendered=function(){j("Element is now attached"),h()}):h()},addListener:function(e,t){if(!E(e).listeners.push)throw new Error("Cannot add listener to an element that is not detectable.");E(e).listeners.push(t)},uninstall:function(e){var t=E(e);t&&(t.onExpandScroll&&o(_(e),"scroll",t.onExpandScroll),t.onShrinkScroll&&o(b(e),"scroll",t.onShrinkScroll),t.onAnimationStart&&o(t.container,"animationstart",t.onAnimationStart),t.container&&e.removeChild(t.container))},initDocument:e}}},{"../collection-utils":127}],130:[function(e,t,n){"use strict";var b=e("./collection-utils").forEach,a=e("./element-utils"),c=e("./listener-handler"),u=e("./id-generator"),l=e("./id-handler"),d=e("./reporter"),f=e("./browser-detector"),w=e("batch-processor"),x=e("./state-handler"),j=e("./detection-strategy/object.js"),D=e("./detection-strategy/scroll.js");function k(e){return Array.isArray(e)||void 0!==e.length}function E(e){if(Array.isArray(e))return e;var t=[];return b(e,function(e){t.push(e)}),t}function B(e){return e&&1===e.nodeType}function K(e,t,n){var o=e[t];return null==o&&void 0!==n?n:o}t.exports=function(t){var n;if((t=t||{}).idHandler)n={get:function(e){return t.idHandler.get(e,!0)},set:t.idHandler.set};else{var e=u(),o=l({idGenerator:e,stateHandler:x});n=o}var p=t.reporter;p=p||d(!1===p);var r=K(t,"batchProcessor",w({reporter:p})),h={};h.callOnAdd=!!K(t,"callOnAdd",!0),h.debug=!!K(t,"debug",!1);var y,m=c(n),v=a({stateHandler:x}),i=K(t,"strategy","object"),g=K(t,"important",!1),s={reporter:p,batchProcessor:r,stateHandler:x,idHandler:n,important:g};if("scroll"===i&&(f.isLegacyOpera()?(p.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy."),i="object"):f.isIE(9)&&(p.warn("Scroll strategy is not supported on IE9. Changing to object strategy."),i="object")),"scroll"===i)y=D(s);else{if("object"!==i)throw new Error("Invalid strategy name: "+i);y=j(s)}var _={};return{listenTo:function(e,i,s){function a(t){var e=m.get(t);b(e,function(e){e(t)})}function c(e,t,n){m.add(t,n),e&&n(t)}if(s||(s=i,i=e,e={}),!i)throw new Error("At least one element required.");if(!s)throw new Error("Listener required.");if(B(i))i=[i];else{if(!k(i))return p.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");i=E(i)}var u=0,l=K(e,"callOnAdd",h.callOnAdd),d=K(e,"onReady",function(){}),f=K(e,"debug",h.debug);b(i,function(e){x.getState(e)||(x.initState(e),n.set(e));var r=n.get(e);if(f&&p.log("Attaching listener to element",r,e),!v.isDetectable(e))return f&&p.log(r,"Not detectable."),v.isBusy(e)?(f&&p.log(r,"System busy making it detectable"),c(l,e,s),_[r]=_[r]||[],void _[r].push(function(){++u===i.length&&d()})):(f&&p.log(r,"Making detectable..."),v.markBusy(e,!0),y.makeDetectable({debug:f,important:g},e,function(e){if(f&&p.log(r,"onElementDetectable"),x.getState(e)){v.markAsDetectable(e),v.markBusy(e,!1),y.addListener(e,a),c(l,e,s);var t=x.getState(e);if(t&&t.startSize){var n=e.offsetWidth,o=e.offsetHeight;t.startSize.width===n&&t.startSize.height===o||a(e)}_[r]&&b(_[r],function(e){e()})}else f&&p.log(r,"Element uninstalled before being detectable.");delete _[r],++u===i.length&&d()}));f&&p.log(r,"Already detecable, adding listener."),c(l,e,s),u++}),u===i.length&&d()},removeListener:m.removeListener,removeAllListeners:m.removeAllListeners,uninstall:function(e){if(!e)return p.error("At least one element is required.");if(B(e))e=[e];else{if(!k(e))return p.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");e=E(e)}b(e,function(e){m.removeAllListeners(e),y.uninstall(e),x.cleanState(e)})},initDocument:function(e){y.initDocument&&y.initDocument(e)}}}},{"./browser-detector":126,"./collection-utils":127,"./detection-strategy/object.js":128,"./detection-strategy/scroll.js":129,"./element-utils":131,"./id-generator":132,"./id-handler":133,"./listener-handler":134,"./reporter":135,"./state-handler":136,"batch-processor":1}],131:[function(e,t,n){"use strict";t.exports=function(e){var n=e.stateHandler.getState;return{isDetectable:function(e){var t=n(e);return t&&!!t.isDetectable},markAsDetectable:function(e){n(e).isDetectable=!0},isBusy:function(e){return!!n(e).busy},markBusy:function(e,t){n(e).busy=!!t}}}},{}],132:[function(e,t,n){"use strict";t.exports=function(){var e=1;return{generate:function(){return e++}}}},{}],133:[function(e,t,n){"use strict";t.exports=function(e){var o=e.idGenerator,r=e.stateHandler.getState;return{get:function(e){var t=r(e);return t&&void 0!==t.id?t.id:null},set:function(e){var t=r(e);if(!t)throw new Error("setId required the element to have a resize detection state.");var n=o.generate();return t.id=n}}}},{}],134:[function(e,t,n){"use strict";t.exports=function(o){var r={};function i(e){var t=o.get(e);return void 0!==t&&r[t]||[]}return{get:i,add:function(e,t){var n=o.get(e);r[n]||(r[n]=[]),r[n].push(t)},removeListener:function(e,t){for(var n=i(e),o=0,r=n.length;o<r;++o)if(n[o]===t){n.splice(o,1);break}},removeAllListeners:function(e){var t=i(e);t&&(t.length=0)}}}},{}],135:[function(e,t,n){"use strict";t.exports=function(e){function t(){}var n={log:t,warn:t,error:t};if(!e&&window.console){var o=function(e,n){e[n]=function(){var e=console[n];if(e.apply)e.apply(console,arguments);else for(var t=0;t<arguments.length;t++)e(arguments[t])}};o(n,"log"),o(n,"warn"),o(n,"error")}return n}},{}],136:[function(e,t,n){"use strict";var o="_erd";function r(e){return e[o]}t.exports={initState:function(e){return e[o]={},r(e)},getState:r,cleanState:function(e){delete e[o]}}},{}],137:[function(e,t,n){var o,r;o=window,r=function(){return o={},r.m=n=[function(e,t,n){"use strict";n.r(t);function S(e,t){var n=t.x-e.x,o=t.y-e.y;return Math.sqrt(n*n+o*o)}function P(e){return e*(Math.PI/180)}function r(e){f.has(e)&&clearTimeout(f.get(e)),f.set(e,setTimeout(e,100))}function i(e,t,n){for(var o,r=t.split(/[ ,]+/g),i=0;i<r.length;i+=1)o=r[i],e.addEventListener?e.addEventListener(o,n,!1):e.attachEvent&&e.attachEvent(o,n)}function o(e,t,n){for(var o,r=t.split(/[ ,]+/g),i=0;i<r.length;i+=1)o=r[i],e.removeEventListener?e.removeEventListener(o,n):e.detachEvent&&e.detachEvent(o,n)}function s(e){return e.preventDefault(),e.type.match(/^touch/)?e.changedTouches:e}function a(){return{x:void 0!==window.pageXOffset?window.pageXOffset:(document.documentElement||document.body.parentNode||document.body).scrollLeft,y:void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}}function T(e,t){t.top||t.right||t.bottom||t.left?(e.style.top=t.top,e.style.right=t.right,e.style.bottom=t.bottom,e.style.left=t.left):(e.style.left=t.x+"px",e.style.top=t.y+"px")}function c(e,t,n){var o=p(e);for(var r in o)if(o.hasOwnProperty(r))if("string"==typeof t)o[r]=t+" "+n;else{for(var i="",s=0,a=t.length;s<a;s+=1)i+=t[s]+" "+n+", ";o[r]=i.slice(0,-2)}return o}function u(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function l(e,t){if(e.length)for(var n=0,o=e.length;n<o;n+=1)t(e[n]);else t(e)}var d,f=new Map,p=function(t){var n={};return n[t]="",["webkit","Moz","o"].forEach(function(e){n[e+t.charAt(0).toUpperCase()+t.slice(1)]=""}),n},h=!!("ontouchstart"in window),y=!!window.PointerEvent,m=!!window.MSPointerEvent,v={start:"mousedown",move:"mousemove",end:"mouseup"},g={};function _(){}y?d={start:"pointerdown",move:"pointermove",end:"pointerup, pointercancel"}:m?d={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:h?(d={start:"touchstart",move:"touchmove",end:"touchend, touchcancel"},g=v):d=v,_.prototype.on=function(e,t){var n,o=e.split(/[ ,]+/g);this._handlers_=this._handlers_||{};for(var r=0;r<o.length;r+=1)n=o[r],this._handlers_[n]=this._handlers_[n]||[],this._handlers_[n].push(t);return this},_.prototype.off=function(e,t){return this._handlers_=this._handlers_||{},void 0===e?this._handlers_={}:void 0===t?this._handlers_[e]=null:this._handlers_[e]&&0<=this._handlers_[e].indexOf(t)&&this._handlers_[e].splice(this._handlers_[e].indexOf(t),1),this},_.prototype.trigger=function(e,t){var n,o=this,r=e.split(/[ ,]+/g);o._handlers_=o._handlers_||{};for(var i=0;i<r.length;i+=1)n=r[i],o._handlers_[n]&&o._handlers_[n].length&&o._handlers_[n].forEach(function(e){e.call(o,{type:n,target:o},t)})},_.prototype.config=function(e){this.options=this.defaults||{},e&&(this.options=function(e,t){var n={};for(var o in e)e.hasOwnProperty(o)&&t.hasOwnProperty(o)?n[o]=t[o]:e.hasOwnProperty(o)&&(n[o]=e[o]);return n}(this.options,e))},_.prototype.bindEvt=function(e,t){var n=this;return n._domHandlers_=n._domHandlers_||{},n._domHandlers_[t]=function(){"function"==typeof n["on"+t]?n["on"+t].apply(n,arguments):console.warn('[WARNING] : Missing "on'+t+'" handler.')},i(e,d[t],n._domHandlers_[t]),g[t]&&i(e,g[t],n._domHandlers_[t]),n},_.prototype.unbindEvt=function(e,t){return this._domHandlers_=this._domHandlers_||{},o(e,d[t],this._domHandlers_[t]),g[t]&&o(e,g[t],this._domHandlers_[t]),delete this._domHandlers_[t],this};var b=_;function w(e,t){return this.identifier=t.identifier,this.position=t.position,this.frontPosition=t.frontPosition,this.collection=e,this.defaults={size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,mode:"dynamic",zone:document.body,lockX:!1,lockY:!1,shape:"circle"},this.config(t),"dynamic"===this.options.mode&&(this.options.restOpacity=0),this.id=w.id,w.id+=1,this.buildEl().stylize(),this.instance={el:this.ui.el,on:this.on.bind(this),off:this.off.bind(this),show:this.show.bind(this),hide:this.hide.bind(this),add:this.addToDom.bind(this),remove:this.removeFromDom.bind(this),destroy:this.destroy.bind(this),setPosition:this.setPosition.bind(this),resetDirection:this.resetDirection.bind(this),computeDirection:this.computeDirection.bind(this),trigger:this.trigger.bind(this),position:this.position,frontPosition:this.frontPosition,ui:this.ui,identifier:this.identifier,id:this.id,options:this.options},this.instance}w.prototype=new b,(w.constructor=w).id=0,w.prototype.buildEl=function(e){return this.ui={},this.options.dataOnly||(this.ui.el=document.createElement("div"),this.ui.back=document.createElement("div"),this.ui.front=document.createElement("div"),this.ui.el.className="nipple collection_"+this.collection.id,this.ui.back.className="back",this.ui.front.className="front",this.ui.el.setAttribute("id","nipple_"+this.collection.id+"_"+this.id),this.ui.el.appendChild(this.ui.back),this.ui.el.appendChild(this.ui.front)),this},w.prototype.stylize=function(){if(this.options.dataOnly)return this;var e=this.options.fadeTime+"ms",t=function(){var e=p("borderRadius");for(var t in e)e.hasOwnProperty(t)&&(e[t]="50%");return e}(),n=c("transition","opacity",e),o={};return o.el={position:"absolute",opacity:this.options.restOpacity,display:"block",zIndex:999},o.back={position:"absolute",display:"block",width:this.options.size+"px",height:this.options.size+"px",marginLeft:-this.options.size/2+"px",marginTop:-this.options.size/2+"px",background:this.options.color,opacity:".5"},o.front={width:this.options.size/2+"px",height:this.options.size/2+"px",position:"absolute",display:"block",marginLeft:-this.options.size/4+"px",marginTop:-this.options.size/4+"px",background:this.options.color,opacity:".5"},u(o.el,n),"circle"===this.options.shape&&u(o.back,t),u(o.front,t),this.applyStyles(o),this},w.prototype.applyStyles=function(e){for(var t in this.ui)if(this.ui.hasOwnProperty(t))for(var n in e[t])this.ui[t].style[n]=e[t][n];return this},w.prototype.addToDom=function(){return this.options.dataOnly||document.body.contains(this.ui.el)||this.options.zone.appendChild(this.ui.el),this},w.prototype.removeFromDom=function(){return this.options.dataOnly||!document.body.contains(this.ui.el)||this.options.zone.removeChild(this.ui.el),this},w.prototype.destroy=function(){clearTimeout(this.removeTimeout),clearTimeout(this.showTimeout),clearTimeout(this.restTimeout),this.trigger("destroyed",this.instance),this.removeFromDom(),this.off()},w.prototype.show=function(e){var t=this;return t.options.dataOnly||(clearTimeout(t.removeTimeout),clearTimeout(t.showTimeout),clearTimeout(t.restTimeout),t.addToDom(),t.restCallback(),setTimeout(function(){t.ui.el.style.opacity=1},0),t.showTimeout=setTimeout(function(){t.trigger("shown",t.instance),"function"==typeof e&&e.call(this)},t.options.fadeTime)),t},w.prototype.hide=function(t){var n=this;return n.options.dataOnly||(n.ui.el.style.opacity=n.options.restOpacity,clearTimeout(n.removeTimeout),clearTimeout(n.showTimeout),clearTimeout(n.restTimeout),n.removeTimeout=setTimeout(function(){var e="dynamic"===n.options.mode?"none":"block";n.ui.el.style.display=e,"function"==typeof t&&t.call(n),n.trigger("hidden",n.instance)},n.options.fadeTime),n.options.restJoystick&&n.setPosition(t,{x:0,y:0})),n},w.prototype.setPosition=function(e,t){var n=this;n.frontPosition={x:t.x,y:t.y};var o=n.options.fadeTime+"ms",r={};r.front=c("transition",["top","left"],o);var i={front:{}};i.front={left:n.frontPosition.x+"px",top:n.frontPosition.y+"px"},n.applyStyles(r),n.applyStyles(i),n.restTimeout=setTimeout(function(){"function"==typeof e&&e.call(n),n.restCallback()},n.options.fadeTime)},w.prototype.restCallback=function(){var e={};e.front=c("transition","none",""),this.applyStyles(e),this.trigger("rested",this.instance)},w.prototype.resetDirection=function(){this.direction={x:!1,y:!1,angle:!1}},w.prototype.computeDirection=function(e){var t,n,o,r=e.angle.radian,i=Math.PI/4,s=Math.PI/2;if(i<r&&r<3*i&&!e.lockX?t="up":-i<r&&r<=i&&!e.lockY?t="left":3*-i<r&&r<=-i&&!e.lockX?t="down":e.lockY||(t="right"),e.lockY||(n=-s<r&&r<s?"left":"right"),e.lockX||(o=0<r?"up":"down"),e.force>this.options.threshold){var a,c={};for(a in this.direction)this.direction.hasOwnProperty(a)&&(c[a]=this.direction[a]);var u={};for(a in this.direction={x:n,y:o,angle:t},e.direction=this.direction,c)c[a]===this.direction[a]&&(u[a]=!0);if(u.x&&u.y&&u.angle)return e;u.x&&u.y||this.trigger("plain",e),u.x||this.trigger("plain:"+n,e),u.y||this.trigger("plain:"+o,e),u.angle||this.trigger("dir dir:"+t,e)}else this.resetDirection();return e};var x=w;function j(e,t){return this.nipples=[],this.idles=[],this.actives=[],this.ids=[],this.pressureIntervals={},this.manager=e,this.id=j.id,j.id+=1,this.defaults={zone:document.body,multitouch:!1,maxNumberOfNipples:10,mode:"dynamic",position:{top:0,left:0},catchDistance:200,size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,lockX:!1,lockY:!1,shape:"circle",dynamicPage:!1,follow:!1},this.config(t),"static"!==this.options.mode&&"semi"!==this.options.mode||(this.options.multitouch=!1),this.options.multitouch||(this.options.maxNumberOfNipples=1),this.updateBox(),this.prepareNipples(),this.bindings(),this.begin(),this.nipples}j.prototype=new b,(j.constructor=j).id=0,j.prototype.prepareNipples=function(){var o=this.nipples;o.on=this.on.bind(this),o.off=this.off.bind(this),o.options=this.options,o.destroy=this.destroy.bind(this),o.ids=this.ids,o.id=this.id,o.processOnMove=this.processOnMove.bind(this),o.processOnEnd=this.processOnEnd.bind(this),o.get=function(e){if(void 0===e)return o[0];for(var t=0,n=o.length;t<n;t+=1)if(o[t].identifier===e)return o[t];return!1}},j.prototype.bindings=function(){this.bindEvt(this.options.zone,"start"),this.options.zone.style.touchAction="none",this.options.zone.style.msTouchAction="none"},j.prototype.begin=function(){var e=this.options;if("static"===e.mode){var t=this.createNipple(e.position,this.manager.getIdentifier());t.add(),this.idles.push(t)}},j.prototype.createNipple=function(e,t){var n=this.manager.scroll,o={},r=this.options;if(e.x&&e.y)o={x:e.x-(n.x+this.box.left),y:e.y-(n.y+this.box.top)};else if(e.top||e.right||e.bottom||e.left){var i=document.createElement("DIV");i.style.display="hidden",i.style.top=e.top,i.style.right=e.right,i.style.bottom=e.bottom,i.style.left=e.left,i.style.position="absolute",r.zone.appendChild(i);var s=i.getBoundingClientRect();r.zone.removeChild(i),o=e,e={x:s.left+n.x,y:s.top+n.y}}var a=new x(this,{color:r.color,size:r.size,threshold:r.threshold,fadeTime:r.fadeTime,dataOnly:r.dataOnly,restJoystick:r.restJoystick,restOpacity:r.restOpacity,mode:r.mode,identifier:t,position:e,zone:r.zone,frontPosition:{x:0,y:0},shape:r.shape});return r.dataOnly||(T(a.ui.el,o),T(a.ui.front,a.frontPosition)),this.nipples.push(a),this.trigger("added "+a.identifier+":added",a),this.manager.trigger("added "+a.identifier+":added",a),this.bindNipple(a),a},j.prototype.updateBox=function(){this.box=this.options.zone.getBoundingClientRect()},j.prototype.bindNipple=function(e){function t(e,t){n=e.type+" "+t.id+":"+e.type,o.trigger(n,t)}var n,o=this;e.on("destroyed",o.onDestroyed.bind(o)),e.on("shown hidden rested dir plain",t),e.on("dir:up dir:right dir:down dir:left",t),e.on("plain:up plain:right plain:down plain:left",t)},j.prototype.pressureFn=function(t,n,e){var o=this,r=0;clearInterval(o.pressureIntervals[e]),o.pressureIntervals[e]=setInterval(function(){var e=t.force||t.pressure||t.webkitForce||0;e!==r&&(n.trigger("pressure",e),o.trigger("pressure "+n.identifier+":pressure",e),r=e)}.bind(o),100)},j.prototype.onstart=function(n){var o=this,t=o.options,r=n;return n=s(n),o.updateBox(),l(n,function(e){o.actives.length<t.maxNumberOfNipples?o.processOnStart(e):r.type.match(/^touch/)&&(Object.keys(o.manager.ids).forEach(function(t){if(Object.values(r.touches).findIndex(function(e){return e.identifier===t})<0){var e=[n[0]];e.identifier=t,o.processOnEnd(e)}}),o.actives.length<t.maxNumberOfNipples&&o.processOnStart(e))}),o.manager.bindDocument(),!1},j.prototype.processOnStart=function(t){var e,n=this,o=n.options,r=n.manager.getIdentifier(t),i=t.force||t.pressure||t.webkitForce||0,s={x:t.pageX,y:t.pageY},a=n.getOrCreate(r,s);a.identifier!==r&&n.manager.removeIdentifier(a.identifier),a.identifier=r;function c(e){e.trigger("start",e),n.trigger("start "+e.id+":start",e),e.show(),0<i&&n.pressureFn(t,e,e.identifier),n.processOnMove(t)}if(0<=(e=n.idles.indexOf(a))&&n.idles.splice(e,1),n.actives.push(a),n.ids.push(a.identifier),"semi"!==o.mode)c(a);else{if(!(S(s,a.position)<=o.catchDistance))return a.destroy(),void n.processOnStart(t);c(a)}return a},j.prototype.getOrCreate=function(e,t){var n,o=this.options;return/(semi|static)/.test(o.mode)?(n=this.idles[0])?(this.idles.splice(0,1),n):"semi"===o.mode?this.createNipple(t,e):(console.warn("Coudln't find the needed nipple."),!1):n=this.createNipple(t,e)},j.prototype.processOnMove=function(e){var t,n,o,r,i=this.options,s=this.manager.getIdentifier(e),a=this.nipples.get(s),c=this.manager.scroll;if(r=e,isNaN(r.buttons)?0!==r.pressure:0!==r.buttons){if(!a)return console.error("Found zombie joystick with ID "+s),void this.manager.removeIdentifier(s);if(i.dynamicPage){var u=a.el.getBoundingClientRect();a.position={x:c.x+u.left,y:c.y+u.top}}a.identifier=s;var l=a.options.size/2,d={x:e.pageX,y:e.pageY};i.lockX&&(d.y=a.position.y),i.lockY&&(d.x=a.position.x);var f,p,h,y,m,v,g,_,b,w=S(d,a.position),x=(p=(f=a.position).x-d.x,h=f.y-d.y,Math.atan2(h,p)*(180/Math.PI)),j=P(x),D=w/l,k={distance:w,position:d};if("circle"===a.options.shape?(y=Math.min(w,l),v=a.position,g=y,b={x:0,y:0},_=P(_=x),b.x=v.x-g*Math.cos(_),b.y=v.y-g*Math.sin(_),m=b):(t=d,n=a.position,o=l,m={x:Math.min(Math.max(t.x,n.x-o),n.x+o),y:Math.min(Math.max(t.y,n.y-o),n.y+o)},y=S(m,a.position)),i.follow){if(l<w){var E=d.x-m.x,B=d.y-m.y;a.position.x+=E,a.position.y+=B,a.el.style.top=a.position.y-(this.box.top+c.y)+"px",a.el.style.left=a.position.x-(this.box.left+c.x)+"px",w=S(d,a.position)}}else d=m,w=y;var K=d.x-a.position.x,C=d.y-a.position.y;a.frontPosition={x:K,y:C},i.dataOnly||T(a.ui.front,a.frontPosition);var O={identifier:a.identifier,position:d,force:D,pressure:e.force||e.pressure||e.webkitForce||0,distance:w,angle:{radian:j,degree:x},vector:{x:K/l,y:-C/l},raw:k,instance:a,lockX:i.lockX,lockY:i.lockY};(O=a.computeDirection(O)).angle={radian:P(180-x),degree:180-x},a.trigger("move",O),this.trigger("move "+a.id+":move",O)}else this.processOnEnd(e)},j.prototype.processOnEnd=function(e){var t=this,n=t.options,o=t.manager.getIdentifier(e),r=t.nipples.get(o),i=t.manager.removeIdentifier(r.identifier);r&&(n.dataOnly||r.hide(function(){"dynamic"===n.mode&&(r.trigger("removed",r),t.trigger("removed "+r.id+":removed",r),t.manager.trigger("removed "+r.id+":removed",r),r.destroy())}),clearInterval(t.pressureIntervals[r.identifier]),r.resetDirection(),r.trigger("end",r),t.trigger("end "+r.id+":end",r),0<=t.ids.indexOf(r.identifier)&&t.ids.splice(t.ids.indexOf(r.identifier),1),0<=t.actives.indexOf(r)&&t.actives.splice(t.actives.indexOf(r),1),/(semi|static)/.test(n.mode)?t.idles.push(r):0<=t.nipples.indexOf(r)&&t.nipples.splice(t.nipples.indexOf(r),1),t.manager.unbindDocument(),/(semi|static)/.test(n.mode)&&(t.manager.ids[i.id]=i.identifier))},j.prototype.onDestroyed=function(e,t){0<=this.nipples.indexOf(t)&&this.nipples.splice(this.nipples.indexOf(t),1),0<=this.actives.indexOf(t)&&this.actives.splice(this.actives.indexOf(t),1),0<=this.idles.indexOf(t)&&this.idles.splice(this.idles.indexOf(t),1),0<=this.ids.indexOf(t.identifier)&&this.ids.splice(this.ids.indexOf(t.identifier),1),this.manager.removeIdentifier(t.identifier),this.manager.unbindDocument()},j.prototype.destroy=function(){for(var e in this.unbindEvt(this.options.zone,"start"),this.nipples.forEach(function(e){e.destroy()}),this.pressureIntervals)this.pressureIntervals.hasOwnProperty(e)&&clearInterval(this.pressureIntervals[e]);this.trigger("destroyed",this.nipples),this.manager.unbindDocument(),this.off()};var D=j;function k(e){var n=this;n.ids={},n.index=0,n.collections=[],n.scroll=a(),n.config(e),n.prepareCollections();function t(){var t;n.collections.forEach(function(e){e.forEach(function(e){t=e.el.getBoundingClientRect(),e.position={x:n.scroll.x+t.left,y:n.scroll.y+t.top}})})}i(window,"resize",function(){r(t)});function o(){n.scroll=a()}return i(window,"scroll",function(){r(o)}),n.collections}k.prototype=new b,(k.constructor=k).prototype.prepareCollections=function(){var e=this;e.collections.create=e.create.bind(e),e.collections.on=e.on.bind(e),e.collections.off=e.off.bind(e),e.collections.destroy=e.destroy.bind(e),e.collections.get=function(t){var n;return e.collections.every(function(e){return!(n=e.get(t))}),n}},k.prototype.create=function(e){return this.createCollection(e)},k.prototype.createCollection=function(e){var t=new D(this,e);return this.bindCollection(t),this.collections.push(t),t},k.prototype.bindCollection=function(e){function t(e,t){n=e.type+" "+t.id+":"+e.type,o.trigger(n,t)}var n,o=this;e.on("destroyed",o.onDestroyed.bind(o)),e.on("shown hidden rested dir plain",t),e.on("dir:up dir:right dir:down dir:left",t),e.on("plain:up plain:right plain:down plain:left",t)},k.prototype.bindDocument=function(){this.binded||(this.bindEvt(document,"move").bindEvt(document,"end"),this.binded=!0)},k.prototype.unbindDocument=function(e){Object.keys(this.ids).length&&!0!==e||(this.unbindEvt(document,"move").unbindEvt(document,"end"),this.binded=!1)},k.prototype.getIdentifier=function(e){var t;return e?void 0===(t=void 0===e.identifier?e.pointerId:e.identifier)&&(t=this.latest||0):t=this.index,void 0===this.ids[t]&&(this.ids[t]=this.index,this.index+=1),this.latest=t,this.ids[t]},k.prototype.removeIdentifier=function(e){var t={};for(var n in this.ids)if(this.ids[n]===e){t.id=n,t.identifier=this.ids[n],delete this.ids[n];break}return t},k.prototype.onmove=function(e){return this.onAny("move",e),!1},k.prototype.onend=function(e){return this.onAny("end",e),!1},k.prototype.oncancel=function(e){return this.onAny("end",e),!1},k.prototype.onAny=function(e,t){var n,o=this,r="processOn"+e.charAt(0).toUpperCase()+e.slice(1);return t=s(t),l(t,function(e){n=o.getIdentifier(e),l(o.collections,function(e,t,n){0<=n.ids.indexOf(t)&&(n[r](e),e._found_=!0)}.bind(null,e,n)),e._found_||o.removeIdentifier(n)}),!1},k.prototype.destroy=function(){this.unbindDocument(!0),this.ids={},this.index=0,this.collections.forEach(function(e){e.destroy()}),this.off()},k.prototype.onDestroyed=function(e,t){if(this.collections.indexOf(t)<0)return!1;this.collections.splice(this.collections.indexOf(t),1)};var E=new k;t.default={create:function(e){return E.create(e)},factory:E}}],r.c=o,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0).default;function r(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var n,o},"object"==typeof n&&"object"==typeof t?t.exports=r():"function"==typeof define&&define.amd?define("nipplejs",[],r):"object"==typeof n?n.nipplejs=r():o.nipplejs=r()},{}],138:[function(e,t,m){"use strict";Object.defineProperty(m,"__esModule",{value:!0});var n,r=function(){return(r=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},i=(o.prototype.on=function(e,t){var n=this.listeners[e]||[];this.listeners[e]=n.concat([t])},o.prototype.triggerEvent=function(e,t){var n=this;(this.listeners[e]||[]).forEach(function(e){return e({target:n,event:t})})},o);function o(e){this.options=e,this.listeners={}}(n=m.NotyfArrayEvent||(m.NotyfArrayEvent={}))[n.Add=0]="Add",n[n.Remove=1]="Remove";var s,a=(c.prototype.push=function(e){this.notifications.push(e),this.updateFn(e,m.NotyfArrayEvent.Add,this.notifications)},c.prototype.splice=function(e,t){var n=this.notifications.splice(e,t)[0];return this.updateFn(n,m.NotyfArrayEvent.Remove,this.notifications),n},c.prototype.indexOf=function(e){return this.notifications.indexOf(e)},c.prototype.onUpdate=function(e){this.updateFn=e},c);function c(){this.notifications=[]}(s=m.NotyfEvent||(m.NotyfEvent={})).Dismiss="dismiss";var u={types:[{type:"success",className:"notyf__toast--success",backgroundColor:"#3dc763",icon:{className:"notyf__icon--success",tagName:"i"}},{type:"error",className:"notyf__toast--error",backgroundColor:"#ed3d3d",icon:{className:"notyf__icon--error",tagName:"i"}}],duration:2e3,ripple:!0,position:{x:"right",y:"bottom"},dismissible:!(s.Click="click")},l=(d.prototype.on=function(e,t){var n;this.events=r(r({},this.events),((n={})[e]=t,n))},d.prototype.update=function(e,t){t===m.NotyfArrayEvent.Add?this.addNotification(e):t===m.NotyfArrayEvent.Remove&&this.removeNotification(e)},d.prototype.removeNotification=function(e){var t,n,o=this,r=this._popRenderedNotification(e);r&&((t=r.node).classList.add("notyf__toast--disappear"),t.addEventListener(this.animationEndEventName,n=function(e){e.target===t&&(t.removeEventListener(o.animationEndEventName,n),o.container.removeChild(t))}))},d.prototype.addNotification=function(e){var t=this._renderNotification(e);this.notifications.push({notification:e,node:t}),this._announce(e.options.message||"Notification")},d.prototype._renderNotification=function(e){var t,n=this._buildNotificationCard(e),o=e.options.className;return o&&(t=n.classList).add.apply(t,o.split(" ")),this.container.appendChild(n),n},d.prototype._popRenderedNotification=function(e){for(var t=-1,n=0;n<this.notifications.length&&t<0;n++)this.notifications[n].notification===e&&(t=n);if(-1!==t)return this.notifications.splice(t,1)[0]},d.prototype.getXPosition=function(e){var t;return(null===(t=null==e?void 0:e.position)||void 0===t?void 0:t.x)||"right"},d.prototype.getYPosition=function(e){var t;return(null===(t=null==e?void 0:e.position)||void 0===t?void 0:t.y)||"bottom"},d.prototype.adjustContainerAlignment=function(e){var t=this.X_POSITION_FLEX_MAP[this.getXPosition(e)],n=this.Y_POSITION_FLEX_MAP[this.getYPosition(e)],o=this.container.style;o.setProperty("justify-content",n),o.setProperty("align-items",t)},d.prototype._buildNotificationCard=function(o){var e,r=this,t=o.options,n=t.icon;this.adjustContainerAlignment(t);var i=this._createHTLMElement({tagName:"div",className:"notyf__toast"}),s=this._createHTLMElement({tagName:"div",className:"notyf__ripple"}),a=this._createHTLMElement({tagName:"div",className:"notyf__wrapper"}),c=this._createHTLMElement({tagName:"div",className:"notyf__message"});c.innerHTML=t.message||"";var u=t.background||t.backgroundColor;if(n&&"object"==typeof n){var l=this._createHTLMElement({tagName:"div",className:"notyf__icon"}),d=this._createHTLMElement({tagName:n.tagName||"i",className:n.className,text:n.text}),f=null!==(e=n.color)&&void 0!==e?e:u;f&&(d.style.color=f),l.appendChild(d),a.appendChild(l)}if(a.appendChild(c),i.appendChild(a),u&&(t.ripple?(s.style.background=u,i.appendChild(s)):i.style.background=u),t.dismissible){var p=this._createHTLMElement({tagName:"div",className:"notyf__dismiss"}),h=this._createHTLMElement({tagName:"button",className:"notyf__dismiss-btn"});p.appendChild(h),a.appendChild(p),i.classList.add("notyf__toast--dismissible"),h.addEventListener("click",function(e){var t,n;null!==(n=(t=r.events)[m.NotyfEvent.Dismiss])&&void 0!==n&&n.call(t,{target:o,event:e}),e.stopPropagation()})}i.addEventListener("click",function(e){var t,n;return null===(n=(t=r.events)[m.NotyfEvent.Click])||void 0===n?void 0:n.call(t,{target:o,event:e})});var y="top"===this.getYPosition(t)?"upper":"lower";return i.classList.add("notyf__toast--"+y),i},d.prototype._createHTLMElement=function(e){var t=e.tagName,n=e.className,o=e.text,r=document.createElement(t);return n&&(r.className=n),r.textContent=o||null,r},d.prototype._createA11yContainer=function(){var e=this._createHTLMElement({tagName:"div",className:"notyf-announcer"});e.setAttribute("aria-atomic","true"),e.setAttribute("aria-live","polite"),e.style.border="0",e.style.clip="rect(0 0 0 0)",e.style.height="1px",e.style.margin="-1px",e.style.overflow="hidden",e.style.padding="0",e.style.position="absolute",e.style.width="1px",e.style.outline="0",document.body.appendChild(e),this.a11yContainer=e},d.prototype._announce=function(e){var t=this;this.a11yContainer.textContent="",setTimeout(function(){t.a11yContainer.textContent=e},100)},d.prototype._getAnimationEndEventName=function(){var e,t=document.createElement("_fake"),n={MozTransition:"animationend",OTransition:"oAnimationEnd",WebkitTransition:"webkitAnimationEnd",transition:"animationend"};for(e in n)if(void 0!==t.style[e])return n[e];return"animationend"},d);function d(){this.notifications=[],this.events={},this.X_POSITION_FLEX_MAP={left:"flex-start",center:"center",right:"flex-end"},this.Y_POSITION_FLEX_MAP={top:"flex-start",center:"center",bottom:"flex-end"};var e=document.createDocumentFragment(),t=this._createHTLMElement({tagName:"div",className:"notyf"});e.appendChild(t),document.body.appendChild(e),this.container=t,this.animationEndEventName=this._getAnimationEndEventName(),this._createA11yContainer()}var f=(p.prototype.error=function(e){var t=this.normalizeOptions("error",e);return this.open(t)},p.prototype.success=function(e){var t=this.normalizeOptions("success",e);return this.open(t)},p.prototype.open=function(t){var e=this.options.types.find(function(e){return e.type===t.type})||{},n=r(r({},e),t);this.assignProps(["ripple","position","dismissible"],n);var o=new i(n);return this._pushNotification(o),o},p.prototype.dismissAll=function(){for(;this.notifications.splice(0,1););},p.prototype.assignProps=function(e,t){var n=this;e.forEach(function(e){t[e]=null==t[e]?n.options[e]:t[e]})},p.prototype._pushNotification=function(e){var t=this;this.notifications.push(e);var n=void 0!==e.options.duration?e.options.duration:this.options.duration;n&&setTimeout(function(){return t._removeNotification(e)},n)},p.prototype._removeNotification=function(e){var t=this.notifications.indexOf(e);-1!==t&&this.notifications.splice(t,1)},p.prototype.normalizeOptions=function(e,t){var n={type:e};return"string"==typeof t?n.message=t:"object"==typeof t&&(n=r(r({},n),t)),n},p.prototype.registerTypes=function(e){var t=(e&&e.types||[]).slice();return u.types.map(function(n){var o=-1;t.forEach(function(e,t){e.type===n.type&&(o=t)});var e=-1!==o?t.splice(o,1)[0]:{};return r(r({},n),e)}).concat(t)},p);function p(e){var o=this;this.dismiss=this._removeNotification,this.notifications=new a,this.view=new l;var t=this.registerTypes(e);this.options=r(r({},u),e),this.options.types=t,this.notifications.onUpdate(function(e,t){return o.view.update(e,t)}),this.view.on(m.NotyfEvent.Dismiss,function(e){var t=e.target,n=e.event;o._removeNotification(t),t.triggerEvent(m.NotyfEvent.Dismiss,n)}),this.view.on(m.NotyfEvent.Click,function(e){var t=e.target,n=e.event;return t.triggerEvent(m.NotyfEvent.Click,n)})}m.DEFAULT_OPTIONS=u,m.Notyf=f,m.NotyfArray=a,m.NotyfNotification=i,m.NotyfView=l},{}],139:[function(e,t,n){var o=function(s){"use strict";var c,e=Object.prototype,l=e.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",o=t.toStringTag||"@@toStringTag";function a(e,t,n,o){var i,s,a,c,r=t&&t.prototype instanceof v?t:v,u=Object.create(r.prototype),l=new B(o||[]);return u._invoke=(i=e,s=n,a=l,c=f,function(e,t){if(c===h)throw new Error("Generator is already running");if(c===y){if("throw"===e)throw t;return C()}for(a.method=e,a.arg=t;;){var n=a.delegate;if(n){var o=D(n,a);if(o){if(o===m)continue;return o}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(c===f)throw c=y,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);c=h;var r=d(i,s,a);if("normal"===r.type){if(c=a.done?y:p,r.arg===m)continue;return{value:r.arg,done:a.done}}"throw"===r.type&&(c=y,a.method="throw",a.arg=r.arg)}}),u}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}s.wrap=a;var f="suspendedStart",p="suspendedYield",h="executing",y="completed",m={};function v(){}function i(){}function u(){}var g={};g[r]=function(){return this};var _=Object.getPrototypeOf,b=_&&_(_(K([])));b&&b!==e&&l.call(b,r)&&(g=b);var w=u.prototype=v.prototype=Object.create(g);function x(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function j(c,u){var t;this._invoke=function(n,o){function e(){return new u(function(e,t){!function t(e,n,o,r){var i=d(c[e],c,n);if("throw"!==i.type){var s=i.arg,a=s.value;return a&&"object"==typeof a&&l.call(a,"__await")?u.resolve(a.__await).then(function(e){t("next",e,o,r)},function(e){t("throw",e,o,r)}):u.resolve(a).then(function(e){s.value=e,o(s)},function(e){return t("throw",e,o,r)})}r(i.arg)}(n,o,e,t)})}return t=t?t.then(e,e):e()}}function D(e,t){var n=e.iterator[t.method];if(n===c){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=c,D(e,t),"throw"===t.method))return m;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,m;var r=o.arg;return r?r.done?(t[e.resultName]=r.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=c),t.delegate=null,m):r:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,m)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function B(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function K(t){if(t){var e=t[r];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(l.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=c,e.done=!0,e};return o.next=o}}return{next:C}}function C(){return{value:c,done:!0}}return i.prototype=w.constructor=u,u.constructor=i,u[o]=i.displayName="GeneratorFunction",s.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===i||"GeneratorFunction"===(t.displayName||t.name))},s.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,o in e||(e[o]="GeneratorFunction")),e.prototype=Object.create(w),e},s.awrap=function(e){return{__await:e}},x(j.prototype),j.prototype[n]=function(){return this},s.AsyncIterator=j,s.async=function(e,t,n,o,r){void 0===r&&(r=Promise);var i=new j(a(e,t,n,o),r);return s.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},x(w),w[o]="Generator",w[r]=function(){return this},w.toString=function(){return"[object Generator]"},s.keys=function(n){var o=[];for(var e in n)o.push(e);return o.reverse(),function e(){for(;o.length;){var t=o.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},s.values=K,B.prototype={constructor:B,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&l.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=c)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var o=this;function e(e,t){return i.type="throw",i.arg=n,o.next=e,t&&(o.method="next",o.arg=c),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t],i=r.completion;if("root"===r.tryLoc)return e("end");if(r.tryLoc<=this.prev){var s=l.call(r,"catchLoc"),a=l.call(r,"finallyLoc");if(s&&a){if(this.prev<r.catchLoc)return e(r.catchLoc,!0);if(this.prev<r.finallyLoc)return e(r.finallyLoc)}else if(s){if(this.prev<r.catchLoc)return e(r.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return e(r.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&l.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var r=o;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var r=o.arg;E(n)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:K(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=c),m}},s}("object"==typeof t?t.exports:{});try{regeneratorRuntime=o}catch(e){Function("r","regeneratorRuntime = r")(o)}},{}],140:[function(e,t,n){var o,r;o=this,r=function(){return o={},r.m=n=[function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t);var r,i,s,u,l=(u=[{key:"bindMethods",value:function(e,t){var n,o=function(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e){if(e){if("string"==typeof e)return c(e,void 0);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?c(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,r=function(){};return{s:r,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return s=e.done,e},e:function(e){a=!0,i=e},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw i}}}}(Object.getOwnPropertyNames(e.prototype));try{for(o.s();!(n=o.n()).done;){var r=n.value;"constructor"===r||"bindMethods"===r||(t[r]=t[r].bind(t))}}catch(e){o.e(e)}finally{o.f()}}}],o((s=d).prototype,[{key:"getButtonClass",value:function(e){var t=e.includes("{")&&e.includes("}")&&"{//}"!==e?"functionBtn":"standardBtn",n=e.replace("{","").replace("}",""),o="";return"standardBtn"!=t&&(o=" hg-button-".concat(n)),"hg-".concat(t).concat(o)}},{key:"getDefaultDiplay",value:function(){return{"{bksp}":"backspace","{backspace}":"backspace","{enter}":"< enter","{shift}":"shift","{shiftleft}":"shift","{shiftright}":"shift","{alt}":"alt","{s}":"shift","{tab}":"tab","{lock}":"caps","{capslock}":"caps","{accept}":"Submit","{space}":" ","{//}":" ","{esc}":"esc","{escape}":"esc","{f1}":"f1","{f2}":"f2","{f3}":"f3","{f4}":"f4","{f5}":"f5","{f6}":"f6","{f7}":"f7","{f8}":"f8","{f9}":"f9","{f10}":"f10","{f11}":"f11","{f12}":"f12","{numpaddivide}":"/","{numlock}":"lock","{arrowup}":"↑","{arrowleft}":"←","{arrowdown}":"↓","{arrowright}":"→","{prtscr}":"print","{scrolllock}":"scroll","{pause}":"pause","{insert}":"ins","{home}":"home","{pageup}":"up","{delete}":"del","{end}":"end","{pagedown}":"down","{numpadmultiply}":"*","{numpadsubtract}":"-","{numpadadd}":"+","{numpadenter}":"enter","{period}":".","{numpaddecimal}":".","{numpad0}":"0","{numpad1}":"1","{numpad2}":"2","{numpad3}":"3","{numpad4}":"4","{numpad5}":"5","{numpad6}":"6","{numpad7}":"7","{numpad8}":"8","{numpad9}":"9"}}},{key:"getButtonDisplayName",value:function(e,t,n){return(t=n?Object.assign({},this.getDefaultDiplay(),t):t||this.getDefaultDiplay())[e]||e}},{key:"getUpdatedInput",value:function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:n,r=4<arguments.length&&void 0!==arguments[4]&&arguments[4],i=this.getOptions(),s=[n,o,r],a=t;return("{bksp}"===e||"{backspace}"===e)&&0<a.length?a=this.removeAt.apply(this,[a].concat(s)):"{space}"===e?a=this.addStringAt.apply(this,[a," "].concat(s)):"{tab}"!==e||"boolean"==typeof i.tabCharOnTab&&!1===i.tabCharOnTab?"{enter}"!==e&&"{numpadenter}"!==e||!i.newLineOnEnter?e.includes("numpad")&&Number.isInteger(Number(e[e.length-2]))?a=this.addStringAt.apply(this,[a,e[e.length-2]].concat(s)):"{numpaddivide}"===e?a=this.addStringAt.apply(this,[a,"/"].concat(s)):"{numpadmultiply}"===e?a=this.addStringAt.apply(this,[a,"*"].concat(s)):"{numpadsubtract}"===e?a=this.addStringAt.apply(this,[a,"-"].concat(s)):"{numpadadd}"===e?a=this.addStringAt.apply(this,[a,"+"].concat(s)):"{numpaddecimal}"===e?a=this.addStringAt.apply(this,[a,"."].concat(s)):"{"!==e&&"}"!==e&&(e.includes("{")||e.includes("}"))||(a=this.addStringAt.apply(this,[a,e].concat(s))):a=this.addStringAt.apply(this,[a,"\n"].concat(s)):a=this.addStringAt.apply(this,[a,"\t"].concat(s)),a}},{key:"updateCaretPos",value:function(e,t){var n=this.updateCaretPosAction(e,t);this.dispatch(function(e){e.setCaretPosition(n)})}},{key:"updateCaretPosAction",value:function(e,t){var n=this.getOptions(),o=this.getCaretPosition();return t?0<o&&(o-=e):o+=e,n.debug&&console.log("Caret at:",o,"(".concat(this.keyboardDOMClass,")")),o}},{key:"addStringAt",value:function(e,t){var n,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:e.length,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:e.length,i=4<arguments.length&&void 0!==arguments[4]&&arguments[4];return o||0===o?(n=[e.slice(0,o),t,e.slice(r)].join(""),this.isMaxLengthReached()||i&&this.updateCaretPos(t.length)):n=e+t,n}},{key:"removeAt",value:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:e.length,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:e.length,r=3<arguments.length&&void 0!==arguments[3]&&arguments[3];if(0===n&&0===o)return e;if(n===o){var i=/([\uD800-\uDBFF][\uDC00-\uDFFF])/g;n&&0<=n?e.substring(n-2,n).match(i)?(t=e.substr(0,n-2)+e.substr(n),r&&this.updateCaretPos(2,!0)):(t=e.substr(0,n-1)+e.substr(n),r&&this.updateCaretPos(1,!0)):e.slice(-2).match(i)?(t=e.slice(0,-2),r&&this.updateCaretPos(2,!0)):(t=e.slice(0,-1),r&&this.updateCaretPos(1,!0))}else t=e.slice(0,n)+e.slice(o),r&&this.dispatch(function(e){e.setCaretPosition(n)});return t}},{key:"handleMaxLength",value:function(e,t){var n=this.getOptions(),o=n.maxLength,r=e[n.inputName],i=t.length-1>=o;if(t.length<=r.length)return!1;if(Number.isInteger(o))return n.debug&&console.log("maxLength (num) reached:",i),this.maxLengthReached=i;if("object"===a(o)){var s=t.length-1>=o[n.inputName];return n.debug&&console.log("maxLength (obj) reached:",s),this.maxLengthReached=s}}},{key:"isMaxLengthReached",value:function(){return Boolean(this.maxLengthReached)}},{key:"isTouchDevice",value:function(){return"ontouchstart"in window||navigator.maxTouchPoints}},{key:"pointerEventsSupported",value:function(){return window.PointerEvent}},{key:"camelCase",value:function(e){return!!e&&e.toLowerCase().trim().split(/[.\-_\s]/g).reduce(function(e,t){return t.length?e+t[0].toUpperCase()+t.slice(1):e})}}]),o(s,u),d);function d(e){var t=e.getOptions,n=e.getCaretPosition,o=e.getCaretPositionEnd,r=e.dispatch;!function(e){if(!(e instanceof d))throw new TypeError("Cannot call a class as a function")}(this),this.getOptions=t,this.getCaretPosition=n,this.getCaretPositionEnd=o,this.dispatch=r,d.bindMethods(d,this)}i=function(){},"noop"in(r=l)?Object.defineProperty(r,"noop",{value:i,enumerable:!0,configurable:!0,writable:!0}):r.noop=i;var f=l;function p(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var h=(p(y.prototype,[{key:"handleHighlightKeyDown",value:function(e){var n=this.getOptions(),o=this.getSimpleKeyboardLayoutKey(e);this.dispatch(function(e){var t=e.getButtonElement(o)||e.getButtonElement("{".concat(o,"}"));t&&(t.style.backgroundColor=n.physicalKeyboardHighlightBgColor||"#dadce4",t.style.color=n.physicalKeyboardHighlightTextColor||"black",n.physicalKeyboardHighlightPress&&(t.onpointerdown||t.onmousedown||t.ontouchstart||f.noop)())})}},{key:"handleHighlightKeyUp",value:function(e){var n=this.getOptions(),o=this.getSimpleKeyboardLayoutKey(e);this.dispatch(function(e){var t=e.getButtonElement(o)||e.getButtonElement("{".concat(o,"}"));t&&t.removeAttribute&&(t.removeAttribute("style"),n.physicalKeyboardHighlightPress&&(t.onpointerup||t.onmouseup||t.ontouchend||f.noop)())})}},{key:"getSimpleKeyboardLayoutKey",value:function(e){var t;return((t=e.code.includes("Numpad")||e.code.includes("Shift")||e.code.includes("Space")||e.code.includes("Backspace")||e.code.includes("Control")||e.code.includes("Alt")||e.code.includes("Meta")?e.code:e.key)!==t.toUpperCase()||"F"===e.code[0]&&Number.isInteger(Number(e.code[1]))&&e.code.length<=3)&&(t=t.toLowerCase()),t}}]),y);function y(e){var t=e.dispatch,n=e.getOptions;!function(e){if(!(e instanceof y))throw new TypeError("Cannot call a class as a function")}(this),this.dispatch=t,this.getOptions=n,f.bindMethods(y,this)}function _(e){return function(e){if(Array.isArray(e))return m(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e){if(e){if("string"==typeof e)return m(e,void 0);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?m(e,void 0):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function v(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=(v(w.prototype,[{key:"setCaretPosition",value:function(e,t){this.caretPosition=e,this.caretPositionEnd=t||e}},{key:"handleButtonClicked",value:function(e){var t=this.options.debug;if("{//}"===e)return!1;"function"==typeof this.options.onKeyPress&&this.options.onKeyPress(e),this.input[this.options.inputName]||(this.input[this.options.inputName]="");var n=this.utilities.getUpdatedInput(e,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd);if(this.input[this.options.inputName]!==n&&(!this.options.inputPattern||this.options.inputPattern&&this.inputPatternIsValid(n))){if(this.options.maxLength&&this.utilities.handleMaxLength(this.input,n))return!1;this.input[this.options.inputName]=this.utilities.getUpdatedInput(e,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd,!0),t&&console.log("Input changed:",this.getAllInputs()),this.options.debug&&console.log("Caret at: ",this.getCaretPosition(),this.getCaretPositionEnd(),"(".concat(this.keyboardDOMClass,")")),this.options.syncInstanceInputs&&this.syncInstanceInputs(),"function"==typeof this.options.onChange&&this.options.onChange(this.getInput(this.options.inputName,!0)),"function"==typeof this.options.onChangeAll&&this.options.onChangeAll(this.getAllInputs())}t&&console.log("Key pressed:",e)}},{key:"handleButtonMouseDown",value:function(e,t){var n=this;this.options.preventMouseDownDefault&&t.preventDefault(),this.options.stopMouseDownPropagation&&t.stopPropagation(),t&&t.target.classList.add(this.activeButtonClass),this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdTimeout&&clearTimeout(this.holdTimeout),this.isMouseHold=!0,this.options.disableButtonHold||(this.holdTimeout=setTimeout(function(){(!n.isMouseHold||(e.includes("{")||e.includes("}"))&&"{delete}"!==e&&"{backspace}"!==e&&"{bksp}"!==e&&"{space}"!==e&&"{tab}"!==e)&&"{arrowright}"!==e&&"{arrowleft}"!==e&&"{arrowup}"!==e&&"{arrowdown}"!==e||(n.options.debug&&console.log("Button held:",e),n.handleButtonHold(e,t)),clearTimeout(n.holdTimeout)},500))}},{key:"handleButtonMouseUp",value:function(){var t=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;n&&(this.options.preventMouseUpDefault&&n.preventDefault(),this.options.stopMouseUpPropagation&&n.stopPropagation()),this.recurseButtons(function(e){e.classList.remove(t.activeButtonClass)}),this.isMouseHold=!1,this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),e&&"function"==typeof this.options.onKeyReleased&&this.options.onKeyReleased(e)}},{key:"handleKeyboardContainerMouseDown",value:function(e){this.options.preventMouseDownDefault&&e.preventDefault()}},{key:"handleButtonHold",value:function(e){var t=this;this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdInteractionTimeout=setTimeout(function(){t.isMouseHold?(t.handleButtonClicked(e),t.handleButtonHold(e)):clearTimeout(t.holdInteractionTimeout)},100)}},{key:"syncInstanceInputs",value:function(){var t=this;this.dispatch(function(e){e.replaceInput(t.input),e.setCaretPosition(t.caretPosition,t.caretPositionEnd)})}},{key:"clearInput",value:function(e){e=e||this.options.inputName,this.input[e]="",this.setCaretPosition(0),this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"getInput",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];return e=e||this.options.inputName,this.options.syncInstanceInputs&&!t&&this.syncInstanceInputs(),this.options.rtl?"‫"+this.input[e].replace("‫","").replace("‬","")+"‬":this.input[e]}},{key:"getAllInputs",value:function(){var t=this,n={};return Object.keys(this.input).forEach(function(e){n[e]=t.getInput(e,!0)}),n}},{key:"setInput",value:function(e,t){t=t||this.options.inputName,this.input[t]=e,this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"replaceInput",value:function(e){this.input=e}},{key:"setOptions",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=this.changedOptions(e);this.options=Object.assign(this.options,e),t.length&&(this.options.debug&&console.log("changedOptions",t),this.onSetOptions(e),this.render())}},{key:"changedOptions",value:function(t){var n=this;return Object.keys(t).filter(function(e){return JSON.stringify(t[e])!==JSON.stringify(n.options[e])})}},{key:"onSetOptions",value:function(e){e.inputName&&(this.options.debug&&console.log("inputName changed. caretPosition reset."),this.setCaretPosition(null))}},{key:"clear",value:function(){this.keyboardDOM.innerHTML="",this.keyboardDOM.className=this.keyboardDOMClass,this.buttonElements={}}},{key:"dispatch",value:function(t){if(!window.SimpleKeyboardInstances)throw console.warn("SimpleKeyboardInstances is not defined. Dispatch cannot be called."),new Error("INSTANCES_VAR_ERROR");return Object.keys(window.SimpleKeyboardInstances).forEach(function(e){t(window.SimpleKeyboardInstances[e],e)})}},{key:"addButtonTheme",value:function(e,t){var i=this;if(!t||!e)return!1;e.split(" ").forEach(function(r){t.split(" ").forEach(function(n){i.options.buttonTheme||(i.options.buttonTheme=[]);var o=!1;i.options.buttonTheme.map(function(e){if(e.class.split(" ").includes(n)){o=!0;var t=e.buttons.split(" ");t.includes(r)||(o=!0,t.push(r),e.buttons=t.join(" "))}return e}),o||i.options.buttonTheme.push({class:n,buttons:e})})}),this.render()}},{key:"removeButtonTheme",value:function(e,r){var i=this;if(!e&&!r)return this.options.buttonTheme=[],this.render(),!1;e&&Array.isArray(this.options.buttonTheme)&&this.options.buttonTheme.length&&(e.split(" ").forEach(function(o){i.options.buttonTheme.map(function(e,t){if(r&&r.includes(e.class)||!r){var n=e.buttons.split(" ").filter(function(e){return e!==o});n.length?e.buttons=n.join(" "):(i.options.buttonTheme.splice(t,1),e=null)}return e})}),this.render())}},{key:"getButtonElement",value:function(e){var t,n=this.buttonElements[e];return n&&(t=1<n.length?n:n[0]),t}},{key:"inputPatternIsValid",value:function(e){var t,n=this.options.inputPattern;if((t=n instanceof RegExp?n:n[this.options.inputName])&&e){var o=t.test(e);return this.options.debug&&console.log('inputPattern ("'.concat(t,'"): ').concat(o?"passed":"did not pass!")),o}return!0}},{key:"setEventListeners",value:function(){!this.isFirstKeyboardInstance&&this.allKeyboardInstances||(this.options.debug&&console.log("Caret handling started (".concat(this.keyboardDOMClass,")")),document.addEventListener("keyup",this.handleKeyUp),document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("mouseup",this.handleMouseUp),document.addEventListener("touchend",this.handleTouchEnd))}},{key:"handleKeyUp",value:function(e){this.caretEventHandler(e),this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyUp(e)}},{key:"handleKeyDown",value:function(e){this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyDown(e)}},{key:"handleMouseUp",value:function(e){this.caretEventHandler(e)}},{key:"handleTouchEnd",value:function(e){this.caretEventHandler(e)}},{key:"caretEventHandler",value:function(n){var o;n.target.tagName&&(o=n.target.tagName.toLowerCase()),this.dispatch(function(e){var t=n.target===e.keyboardDOM||n.target&&e.keyboardDOM.contains(n.target);e.isMouseHold&&(e.isMouseHold=!1),"textarea"!==o&&"input"!==o||e.options.disableCaretPositioning?!e.options.disableCaretPositioning&&t||e.setCaretPosition(null):(e.setCaretPosition(n.target.selectionStart,n.target.selectionEnd),e.options.debug&&console.log("Caret at: ",e.getCaretPosition(),e.getCaretPositionEnd(),n&&n.target.tagName.toLowerCase(),"(".concat(e.keyboardDOMClass,")")))})}},{key:"recurseButtons",value:function(t){var n=this;if(!t)return!1;Object.keys(this.buttonElements).forEach(function(e){return n.buttonElements[e].forEach(t)})}},{key:"destroy",value:function(){this.options.debug&&console.log("Destroying simple-keyboard instance: ".concat(this.currentInstanceName)),document.removeEventListener("keyup",this.handleKeyUp),document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("mouseup",this.handleMouseUp),document.removeEventListener("touchend",this.handleTouchEnd),document.onpointerup=null,document.ontouchend=null,document.ontouchcancel=null,document.onmouseup=null;var e=function(e){e.onpointerdown=null,e.onpointerup=null,e.onpointercancel=null,e.ontouchstart=null,e.ontouchend=null,e.ontouchcancel=null,e.onclick=null,e.onmousedown=null,e.onmouseup=null,e.remove(),e=null};this.recurseButtons(e),e=this.recurseButtons=null,this.keyboardDOM.onpointerdown=null,this.keyboardDOM.ontouchstart=null,this.keyboardDOM.onmousedown=null,this.clear(),window.SimpleKeyboardInstances[this.currentInstanceName]=null,delete window.SimpleKeyboardInstances[this.currentInstanceName],this.initialized=!1}},{key:"getButtonThemeClasses",value:function(n){var e=this.options.buttonTheme,o=[];return Array.isArray(e)&&e.forEach(function(e){if(e.class&&"string"==typeof e.class&&e.buttons&&"string"==typeof e.buttons){var t=e.class.split(" ");e.buttons.split(" ").includes(n)&&(o=[].concat(_(o),_(t)))}else console.warn('Incorrect "buttonTheme". Please check the documentation.',e)}),o}},{key:"setDOMButtonAttributes",value:function(t,n){var e=this.options.buttonAttributes;Array.isArray(e)&&e.forEach(function(e){e.attribute&&"string"==typeof e.attribute&&e.value&&"string"==typeof e.value&&e.buttons&&"string"==typeof e.buttons?e.buttons.split(" ").includes(t)&&n(e.attribute,e.value):console.warn('Incorrect "buttonAttributes". Please check the documentation.',e)})}},{key:"onTouchDeviceDetected",value:function(){this.processAutoTouchEvents(),this.disableContextualWindow()}},{key:"disableContextualWindow",value:function(){window.oncontextmenu=function(e){if(e.target.classList.contains("hg-button"))return e.preventDefault(),e.stopPropagation(),!1}}},{key:"processAutoTouchEvents",value:function(){this.options.autoUseTouchEvents&&(this.options.useTouchEvents=!0,this.options.debug&&console.log("autoUseTouchEvents: Touch device detected, useTouchEvents enabled."))}},{key:"onInit",value:function(){this.options.debug&&console.log("".concat(this.keyboardDOMClass," Initialized")),this.setEventListeners(),"function"==typeof this.options.onInit&&this.options.onInit()}},{key:"beforeFirstRender",value:function(){this.utilities.isTouchDevice()&&this.onTouchDeviceDetected(),"function"==typeof this.options.beforeFirstRender&&this.options.beforeFirstRender(),this.isFirstKeyboardInstance&&this.utilities.pointerEventsSupported()&&!this.options.useTouchEvents&&!this.options.useMouseEvents&&this.options.debug&&console.log("Using PointerEvents as it is supported by this browser"),this.options.useTouchEvents&&this.options.debug&&console.log("useTouchEvents has been enabled. Only touch events will be used.")}},{key:"beforeRender",value:function(){"function"==typeof this.options.beforeRender&&this.options.beforeRender()}},{key:"onRender",value:function(){"function"==typeof this.options.onRender&&this.options.onRender()}},{key:"onModulesLoaded",value:function(){"function"==typeof this.options.onModulesLoaded&&this.options.onModulesLoaded(this)}},{key:"loadModules",value:function(){var t=this;Array.isArray(this.options.modules)&&(this.options.modules.forEach(function(e){(new e).init(t)}),this.keyboardPluginClasses="modules-loaded",this.render(),this.onModulesLoaded())}},{key:"getModuleProp",value:function(e,t){return!!this.modules[e]&&this.modules[e][t]}},{key:"getModulesList",value:function(){return Object.keys(this.modules)}},{key:"parseRowDOMContainers",value:function(c,u,e,l){var d=this,f=Array.from(c.children),p=0;return f.length&&e.forEach(function(e,t){var n=l[t];if(!(n&&e<n))return!1;var o=e-p,r=n-p,i=document.createElement("div");i.className+="hg-button-container";var s="".concat(d.options.layoutName,"-r").concat(u,"c").concat(t);i.setAttribute("data-skUID",s);var a=f.splice(o,r-o+1);p=r-o,a.forEach(function(e){return i.appendChild(e)}),f.splice(o,0,i),c.innerHTML="",f.forEach(function(e){return c.appendChild(e)}),d.options.debug&&console.log("rowDOMContainer",a,o,r,p+1)}),c}},{key:"render",value:function(){var y=this;this.clear(),this.initialized||this.beforeFirstRender(),this.beforeRender();var e="hg-layout-".concat(this.options.layoutName),t=this.options.layout||{default:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","{lock} a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}",".com @ {space}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'{lock} A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}",".com @ {space}"]},m=this.options.useTouchEvents||!1,n=m?"hg-touch-events":"",v=this.options.useMouseEvents||!1,g=this.options.disableRowButtonContainers;this.keyboardDOM.className=this.getKeyboardClassString(this.options.theme,e,this.keyboardPluginClasses,n),t[this.options.layoutName].forEach(function(e,d){var t=e.split(" "),f=document.createElement("div");f.className+="hg-row";var p=[],h=[];t.forEach(function(t,e){var n,o=!g&&"string"==typeof t&&1<t.length&&0===t.indexOf("["),r=!g&&"string"==typeof t&&1<t.length&&t.indexOf("]")===t.length-1;o&&(p.push(e),t=t.replace(/\[/g,"")),r&&(h.push(e),t=t.replace(/\]/g,""));var i=y.utilities.getButtonClass(t),s=y.utilities.getButtonDisplayName(t,y.options.display,y.options.mergeDisplay),a=y.options.useButtonTag?"button":"div",c=document.createElement(a);c.className+="hg-button ".concat(i),(n=c.classList).add.apply(n,_(y.getButtonThemeClasses(t))),y.setDOMButtonAttributes(t,function(e,t){c.setAttribute(e,t)}),y.activeButtonClass="hg-activeButton",!y.utilities.pointerEventsSupported()||m||v?m?(c.ontouchstart=function(e){y.handleButtonClicked(t),y.handleButtonMouseDown(t,e)},c.ontouchend=function(e){y.handleButtonMouseUp(t,e)},c.ontouchcancel=function(e){y.handleButtonMouseUp(t,e)}):(c.onclick=function(){y.isMouseHold=!1,y.handleButtonClicked(t)},c.onmousedown=function(e){y.handleButtonMouseDown(t,e)},c.onmouseup=function(e){y.handleButtonMouseUp(t,e)}):(c.onpointerdown=function(e){y.handleButtonClicked(t),y.handleButtonMouseDown(t,e)},c.onpointerup=function(e){y.handleButtonMouseUp(t,e)},c.onpointercancel=function(e){y.handleButtonMouseUp(t,e)}),c.setAttribute("data-skBtn",t);var u="".concat(y.options.layoutName,"-r").concat(d,"b").concat(e);c.setAttribute("data-skBtnUID",u);var l=document.createElement("span");l.innerHTML=s,c.appendChild(l),y.buttonElements[t]||(y.buttonElements[t]=[]),y.buttonElements[t].push(c),f.appendChild(c)}),f=y.parseRowDOMContainers(f,d,p,h),y.keyboardDOM.appendChild(f)}),this.onRender(),this.initialized||(this.initialized=!0,!this.utilities.pointerEventsSupported()||m||v?m?(document.ontouchend=function(){return y.handleButtonMouseUp()},document.ontouchcancel=function(){return y.handleButtonMouseUp()},this.keyboardDOM.ontouchstart=function(e){return y.handleKeyboardContainerMouseDown(e)}):m||(document.onmouseup=function(){return y.handleButtonMouseUp()},this.keyboardDOM.onmousedown=function(e){return y.handleKeyboardContainerMouseDown(e)}):(document.onpointerup=function(){return y.handleButtonMouseUp()},this.keyboardDOM.onpointerdown=function(e){return y.handleKeyboardContainerMouseDown(e)}),this.onInit())}}]),w);function w(){var o=this;(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,w),g(this,"handleParams",function(e){var t,n,o;if("string"==typeof e[0])t=e[0].split(".").join(""),n=document.querySelector(".".concat(t)),o=e[1];else if(e[0]instanceof HTMLDivElement){if(!e[0].className)throw console.warn("Any DOM element passed as parameter must have a class."),new Error("KEYBOARD_DOM_CLASS_ERROR");t=e[0].className.split(" ")[0],n=e[0],o=e[1]}else t="simple-keyboard",n=document.querySelector(".".concat(t)),o=e[0];return{keyboardDOMClass:t,keyboardDOM:n,options:o}}),g(this,"getOptions",function(){return o.options}),g(this,"getCaretPosition",function(){return o.caretPosition}),g(this,"getCaretPositionEnd",function(){return o.caretPositionEnd}),g(this,"registerModule",function(e,t){o.modules[e]||(o.modules[e]={}),t(o.modules[e])}),g(this,"getKeyboardClassString",function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return[o.keyboardDOMClass].concat(t).filter(function(e){return!!e}).join(" ")});for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=this.handleParams(t),i=r.keyboardDOMClass,s=r.keyboardDOM,a=r.options,c=void 0===a?{}:a;if(this.utilities=new f({getOptions:this.getOptions,getCaretPosition:this.getCaretPosition,getCaretPositionEnd:this.getCaretPositionEnd,dispatch:this.dispatch}),this.caretPosition=null,this.caretPositionEnd=null,this.keyboardDOM=s,this.options=c,this.options.layoutName=this.options.layoutName||"default",this.options.theme=this.options.theme||"hg-theme-default",this.options.inputName=this.options.inputName||"default",this.options.preventMouseDownDefault=this.options.preventMouseDownDefault||!1,this.keyboardPluginClasses="",f.bindMethods(w,this),this.input={},this.input[this.options.inputName]="",this.keyboardDOMClass=i,this.buttonElements={},window.SimpleKeyboardInstances||(window.SimpleKeyboardInstances={}),this.currentInstanceName=this.utilities.camelCase(this.keyboardDOMClass),(window.SimpleKeyboardInstances[this.currentInstanceName]=this).allKeyboardInstances=window.SimpleKeyboardInstances,this.keyboardInstanceNames=Object.keys(window.SimpleKeyboardInstances),this.isFirstKeyboardInstance=this.keyboardInstanceNames[0]===this.currentInstanceName,this.physicalKeyboard=new h({dispatch:this.dispatch,getOptions:this.getOptions}),!this.keyboardDOM)throw console.warn('".'.concat(i,'" was not found in the DOM.')),new Error("KEYBOARD_DOM_ERROR");this.render(),this.modules={},this.loadModules()}t.default=b}],r.c=o,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=0);function r(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var n,o},"object"==typeof n&&"object"==typeof t?t.exports=r():"function"==typeof define&&define.amd?define("SimpleKeyboard",[],r):"object"==typeof n?n.SimpleKeyboard=r():o.SimpleKeyboard=r()},{}],141:[function(e,t,n){"use strict";e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.Build={short:"0.71.9",version:"0.71.9 (4091846451a67696c4894331d08145d2)",buildSeed:1635504127426}},{"core-js/modules/es6.object.define-property":111}],142:[function(e,t,n){"use strict";function O(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/es6.array.is-array"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.date.to-string"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.keys"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var g=e("../dom/keys"),S=e("../dom/pointer"),o=function(){for(var e={},t=0,n=Object.keys(g.namedKeyCodes);t<n.length;t++){var o=n[t];e[g.namedKeyCodes[o]]=o.substr(4,2)}return e}();function _(e,t,n){var o=Math.round(.6*n),r=Math.round(.5*n),i=Math.max(1,Math.round(n/20)),s=T[e.toLowerCase()],a=void 0===s?e:"",c=P("emulator-button-touch-zone"),u=P("emulator-button"),l=P("emulator-button-text",void 0===s?void 0===a||0===a.length?"□":a.substr(0,1).toUpperCase():"");void 0!==s&&(u.style.backgroundImage='url("'+s+'")'),u.style.width=o+"px",u.style.height=o+"px",l.style.fontSize=r+"px",c.widthPx=n-2*i,c.heightPx=n-2*i,c.style.width=c.widthPx+"px",c.style.height=c.heightPx+"px",c.style.borderWidth=i+"px",c.appendChild(u),c.appendChild(l);function d(e){void 0!==t.onDown&&t.onDown(),void 0!==t.onClick&&t.onClick(),e.stopPropagation(),e.preventDefault()}function f(e){void 0!==t.onUp&&t.onUp(),e.stopPropagation(),e.preventDefault()}function p(e){e.stopPropagation(),e.preventDefault()}var h,y={capture:!0},m=O(S.pointer.starters);try{for(m.s();!(h=m.n()).done;){var v=h.value;c.addEventListener(v,d,y)}}catch(e){m.e(e)}finally{m.f()}var g,_=O(S.pointer.enders);try{for(_.s();!(g=_.n()).done;){var b=g.value;c.addEventListener(b,f,y)}}catch(e){_.e(e)}finally{_.f()}var w,x=O(S.pointer.changers);try{for(x.s();!(w=x.n()).done;){var j=w.value;c.addEventListener(j,p,y)}}catch(e){x.e(e)}finally{x.f()}var D,k=O(S.pointer.leavers);try{for(k.s();!(D=k.n()).done;){var E=D.value;c.addEventListener(E,p,y)}}catch(e){k.e(e)}finally{k.f()}var B,K=O(S.pointer.prevents);try{for(K.s();!(B=K.n()).done;){var C=B.value;c.addEventListener(C,p,y)}}catch(e){K.e(e)}finally{K.f()}return c}function P(e,t){var n=document.createElement("div");return n.className=e,void 0!==t&&(n.innerHTML=t),n}function b(e){return"number"==typeof e?o[e]:e}function w(e,t){return"click"===e.action?{onClick:function(){return t.fireKeyPress(e.mapTo)}}:{onDown:function(){return t.fireKeyDown(e.mapTo)},onUp:function(){return t.fireKeyUp(e.mapTo)}}}n.createButton=_,n.deprecatedButton=function(o,e,t,n){var r,i=Math.round(n/4),s=[],a=O(t);try{for(a.s();!(r=a.n()).done;){var c=r.value;if(c.mapTo!==g.KBD_NONE){var u=_((c.symbol||b(c.mapTo)).toUpperCase(),w(c,o),n);u.style.position="absolute";var l=c.style;if(l)for(var d=0,f=Object.keys(l);d<f.length;d++){var p=f[d];u.style[p]=l[p]}if(void 0!==c.position){var h=c.position.left,y=c.position.top,m=c.position.bottom,v=c.position.right;void 0!==h&&(u.style.left=i*h+n*(h-1)+"px"),void 0!==v&&(u.style.right=i*v+n*(v-1)+"px"),void 0!==y&&(u.style.top=i*y+n*(y-1)+"px"),void 0!==m&&(u.style.bottom=i*m+n*(m-1)+"px")}o.mouseOverlay.appendChild(u),s.push(u)}}}catch(e){a.e(e)}finally{a.f()}return function(){var e,t=O(s);try{for(t.s();!(e=t.n()).done;){var n=e.value;n.parentElement===o.mouseOverlay&&o.mouseOverlay.removeChild(n)}}catch(e){t.e(e)}finally{t.f()}}};var r="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns:sketch='http://www.bohemiancoding.com/sketch/ns' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' fill='%23FFF' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Ctitle%3EShape%3C/title%3E%3Cdesc%3ECreated with Sketch.%3C/desc%3E%3Cg id='Page-1' sketch:type='MSPage'%3E%3Cg id='Artboard-1' transform='translate(-3.000000, -1.000000)' sketch:type='MSArtboardGroup'%3E%3Cpath id='Shape' sketch:type='MSShapeGroup' d='M19,12c-0.3,0-0.5,0.1-0.7,0.3L14,16.6V3c0-0.5-0.4-1-1-1s-1,0.5-1,1v13.6 l-4.3-4.3C7.5,12.1,7.3,12,7,12c-0.5,0-1,0.4-1,1c0,0.3,0.1,0.5,0.3,0.7l6,6c0.2,0.2,0.4,0.3,0.7,0.3s0.5-0.1,0.7-0.3l6-6 c0.2-0.2,0.3-0.4,0.3-0.7C20,12.4,19.5,12,19,12L19,12z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",i="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' enable-background='new 0 0 20 20' fill='%23FFF' xml:space='preserve'%3E%3Cg id='left_arrow_1_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18,9H4.41l4.29-4.29C8.89,4.53,9,4.28,9,4c0-0.55-0.45-1-1-1 C7.72,3,7.47,3.11,7.29,3.29l-6,6C1.11,9.47,1,9.72,1,10c0,0.28,0.11,0.53,0.29,0.71l6,6C7.47,16.89,7.72,17,8,17 c0.55,0,1-0.45,1-1c0-0.28-0.11-0.53-0.29-0.71L4.41,11H18c0.55,0,1-0.45,1-1C19,9.45,18.55,9,18,9z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",s="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' fill='%23fff' viewBox='0 0 20 20' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Cg id='right_arrow_1_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18.71,9.29l-6-6C12.53,3.11,12.28,3,12,3c-0.55,0-1,0.45-1,1 c0,0.28,0.11,0.53,0.29,0.71L15.59,9H2c-0.55,0-1,0.45-1,1c0,0.55,0.45,1,1,1h13.59l-4.29,4.29C11.11,15.47,11,15.72,11,16 c0,0.55,0.45,1,1,1c0.28,0,0.53-0.11,0.71-0.29l6-6C18.89,10.53,19,10.28,19,10C19,9.72,18.89,9.47,18.71,9.29z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",c="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' fill='%23fff' viewBox='0 0 20 20' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Cg id='key_enter_1_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18,2c-0.55,0-1,0.45-1,1v5c0,2.21-1.79,4-4,4H4.41l2.29-2.29 C6.89,9.53,7,9.28,7,9c0-0.55-0.45-1-1-1C5.72,8,5.47,8.11,5.29,8.29l-4,4C1.11,12.47,1,12.72,1,13c0,0.28,0.11,0.53,0.29,0.71 l4,4C5.47,17.89,5.72,18,6,18c0.55,0,1-0.45,1-1c0-0.28-0.11-0.53-0.29-0.71L4.41,14H13c3.31,0,6-2.69,6-6V3C19,2.45,18.55,2,18,2 z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",T={fullscreen:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 16 16' enable-background='new 0 0 16 16' xml:space='preserve'%3E%3Cg id='maximize_1_' fill='%23FFFFFF'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M5.99,8.99c-0.28,0-0.53,0.11-0.71,0.29l-3.29,3.29v-1.59c0-0.55-0.45-1-1-1 s-1,0.45-1,1v4c0,0.55,0.45,1,1,1h4c0.55,0,1-0.45,1-1s-0.45-1-1-1H3.41L6.7,10.7c0.18-0.18,0.29-0.43,0.29-0.71 C6.99,9.44,6.54,8.99,5.99,8.99z M14.99-0.01h-4c-0.55,0-1,0.45-1,1s0.45,1,1,1h1.59L9.28,5.29C9.1,5.47,8.99,5.72,8.99,5.99 c0,0.55,0.45,1,1,1c0.28,0,0.53-0.11,0.71-0.29l3.29-3.29v1.59c0,0.55,0.45,1,1,1s1-0.45,1-1v-4C15.99,0.44,15.54-0.01,14.99-0.01 z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",save:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 18.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 16 16' enable-background='new 0 0 16 16' fill='%23FFFFFF' xml:space='preserve'%3E%3Cg id='floppy_disk'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M15.71,2.29l-2-2C13.53,0.11,13.28,0,13,0h-1v6H4V0H1C0.45,0,0,0.45,0,1v14 c0,0.55,0.45,1,1,1h14c0.55,0,1-0.45,1-1V3C16,2.72,15.89,2.47,15.71,2.29z M14,15H2V9c0-0.55,0.45-1,1-1h10c0.55,0,1,0.45,1,1V15 z M11,1H9v4h2V1z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E%0A",options:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' enable-background='new 0 0 20 20' fill='%23FFF' xml:space='preserve'%3E%3Cg id='cog_2_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M19,8h-2.31c-0.14-0.46-0.33-0.89-0.56-1.3l1.7-1.7c0.39-0.39,0.39-1.02,0-1.41 l-1.41-1.41c-0.39-0.39-1.02-0.39-1.41,0l-1.7,1.7c-0.41-0.22-0.84-0.41-1.3-0.55V1c0-0.55-0.45-1-1-1H9C8.45,0,8,0.45,8,1v2.33 C7.52,3.47,7.06,3.67,6.63,3.91L5,2.28c-0.37-0.37-0.98-0.37-1.36,0L2.28,3.64C1.91,4.02,1.91,4.63,2.28,5l1.62,1.62 C3.66,7.06,3.46,7.51,3.31,8H1C0.45,8,0,8.45,0,9v2c0,0.55,0.45,1,1,1h2.31c0.14,0.46,0.33,0.89,0.56,1.3L2.17,15 c-0.39,0.39-0.39,1.02,0,1.41l1.41,1.41c0.39,0.39,1.02,0.39,1.41,0l1.7-1.7c0.41,0.22,0.84,0.41,1.3,0.55V19c0,0.55,0.45,1,1,1h2 c0.55,0,1-0.45,1-1v-2.33c0.48-0.14,0.94-0.35,1.37-0.59L15,17.72c0.37,0.37,0.98,0.37,1.36,0l1.36-1.36 c0.37-0.37,0.37-0.98,0-1.36l-1.62-1.62c0.24-0.43,0.45-0.89,0.6-1.38H19c0.55,0,1-0.45,1-1V9C20,8.45,19.55,8,19,8z M10,14 c-2.21,0-4-1.79-4-4c0-2.21,1.79-4,4-4s4,1.79,4,4C14,12.21,12.21,14,10,14z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",keyboard:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 16 16' enable-background='new 0 0 16 16' xml:space='preserve'%3E%3Cg id='manually_entered_data_2_'%3E%3Cg%3E%3Cpath fill='%23FFFFFF' fill-rule='evenodd' clip-rule='evenodd' d='M1,8h3.76l2-2H1C0.45,6,0,6.45,0,7C0,7.55,0.45,8,1,8z M15.49,3.99 C15.8,3.67,16,3.23,16,2.75C16,1.78,15.22,1,14.25,1c-0.48,0-0.92,0.2-1.24,0.51l-1.44,1.44l2.47,2.47L15.49,3.99z M1,4h7.76l2-2 H1C0.45,2,0,2.45,0,3C0,3.55,0.45,4,1,4z M1,10c-0.55,0-1,0.45-1,1c0,0.48,0.35,0.86,0.8,0.96L2.76,10H1z M10.95,3.57l-6.69,6.69 l2.47,2.47l6.69-6.69L10.95,3.57z M15.2,6.04L13.24,8H15c0.55,0,1-0.45,1-1C16,6.52,15.65,6.14,15.2,6.04z M2,15l3.86-1.39 l-2.46-2.44L2,15z M15,10h-3.76l-2,2H15c0.55,0,1-0.45,1-1C16,10.45,15.55,10,15,10z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",up:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns:sketch='http://www.bohemiancoding.com/sketch/ns' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' fill='%23FFF' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Ctitle%3EShape%3C/title%3E%3Cdesc%3ECreated with Sketch.%3C/desc%3E%3Cg id='Page-1' sketch:type='MSPage'%3E%3Cg id='Artboard-1' transform='translate(-3.000000, -1.000000)' sketch:type='MSArtboardGroup'%3E%3Cpath id='Shape' sketch:type='MSShapeGroup' d='M19.7,8.3l-6-6C13.5,2.1,13.3,2,13,2s-0.5,0.1-0.7,0.3l-6,6C6.1,8.5,6,8.7,6,9 c0,0.6,0.5,1,1,1c0.3,0,0.5-0.1,0.7-0.3L12,5.4V19c0,0.5,0.4,1,1,1s1-0.5,1-1V5.4l4.3,4.3C18.5,9.9,18.7,10,19,10c0.5,0,1-0.4,1-1 C20,8.7,19.9,8.5,19.7,8.3L19.7,8.3z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",down:r,do:r,dw:r,dwn:r,left:i,le:i,lft:i,right:s,ri:s,rght:s,rgh:s,enter:c,en:c,enr:c,ent:c,entr:c}},{"../dom/keys":153,"../dom/pointer":156,"core-js/modules/es6.array.from":101,"core-js/modules/es6.array.is-array":103,"core-js/modules/es6.array.iterator":104,"core-js/modules/es6.date.to-string":106,"core-js/modules/es6.function.name":108,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.keys":112,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.regexp.to-string":118,"core-js/modules/es6.string.iterator":119,"core-js/modules/es6.symbol":120,"core-js/modules/es7.symbol.async-iterator":124,"core-js/modules/web.dom.iterable":125}],143:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.getGrid=function(e){switch(e){case"square":return new(function(){function e(){o(this,e),this.aspect=.625}return i(e,[{key:"getConfiguration",value:function(e,t){for(var n=this.getCols(),o=this.getRows(),r=Math.floor(n/2),i=Math.floor(o/2),s=5*e/100/2,a=s,c=(e-2*s)/n,u=(t-2*a)/o,l=Math.min(c,u),d=[],f=0;f<o;++f){for(var p=[],h=0;h<n;++h)p.push({centerX:h<r?s+l*(h+.5):e-s-l*(n-h-1+.5),centerY:f<i?a+l*(f+.5):t-a-l*(o-f-1+.5)});d.push(p)}return{gridType:"square",cells:d,columnWidth:l,rowHeight:l,columnsPadding:s,rowsPadding:a,width:e,height:t}}},{key:"getCols",value:function(){return 10}},{key:"getRows",value:function(){return Math.floor(this.getCols()*this.aspect)+1}}]),e}());case"honeycomb":return new(function(){function e(){o(this,e),this.aspect=.625}return i(e,[{key:"getConfiguration",value:function(e,t){for(var n=this.getCols(),o=this.getRows(),r=Math.floor(n/2),i=Math.floor(o/2),s=5*e/100/2,a=s,c=(e-2*s)/n,u=(t-2*a)/o,l=Math.min(c,u),d=[],f=0;f<o;++f){for(var p=[],h=f%2==0?n:n-1,y=f%2==0?0:l/2,m=0;m<h;++m)p.push({centerX:m<r?y+s+l*(m+.5):y+e-s-l*(n-m-1+.5),centerY:f<i?a+l*(f+.5):t-a-l*(o-f-1+.5)});d.push(p)}return{gridType:"honeycomb",cells:d,columnWidth:l,rowHeight:l,columnsPadding:s,rowsPadding:a,width:e,height:t}}},{key:"getCols",value:function(){return 10}},{key:"getRows",value:function(){return Math.floor(this.getCols()*this.aspect)+1}}]),e}())}throw new Error("Unknown grid type "+e)}},{"core-js/modules/es6.object.define-property":111}],144:[function(e,t,n){"use strict";function i(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.date.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.array.is-array"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.keyboard=function(e,t,n){var o=n||{};function r(e){return void 0!==o[e]?o[e]:e}return e.setOnKeyDown(function(e){t.sendKeyEvent(r(e),!0)}),e.setOnKeyUp(function(e){t.sendKeyEvent(r(e),!1)}),e.setOnKeyPress(function(e){t.simulateKeyPress(r(e))}),e.setOnKeysPress(function(e){t.simulateKeyPress.apply(t,i(e))}),function(){e.setOnKeyDown(function(e){}),e.setOnKeyUp(function(e){}),e.setOnKeyPress(function(e){}),e.setOnKeysPress(function(e){})}}},{"core-js/modules/es6.array.from":101,"core-js/modules/es6.array.is-array":103,"core-js/modules/es6.date.to-string":106,"core-js/modules/es6.function.name":108,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.regexp.to-string":118,"core-js/modules/es6.string.iterator":119,"core-js/modules/es6.symbol":120,"core-js/modules/es7.symbol.async-iterator":124,"core-js/modules/web.dom.iterable":125}],145:[function(e,t,n){"use strict";e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.extractLayersConfig=function(e){return void 0!==e.layersConfig?e.layersConfig:void 0!==e.layers?e.layers:null}},{"core-js/modules/es6.object.define-property":111}],146:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function O(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.is-array"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.date.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.array.index-of"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var v=e("./grid"),g=e("./button"),_=e("./keyboard"),b=e("./mouse"),w=e("./options"),S=e("../dom/pointer"),P=e("nipplejs");n.initLayersControl=function(e,t,n,o,r){var d,f,p,h,i,s,y,a=t.layers[0];if(void 0!==r){var c,u=O(t.layers);try{for(u.s();!(c=u.n()).done;){var l=c.value;if(l.title===r){a=l;break}}}catch(e){u.e(e)}finally{u.f()}}return d=a,f=e,p=n,h=o,i=_.keyboard(f,p),s=b.mouse(f,p),y=[],f.addOnResize(m),m(f.width,f.height),function(){f.removeOnResize(m),i(),s();var e,t=O(y);try{for(t.s();!(e=t.n()).done;)(0,e.value)()}catch(e){t.e(e)}finally{t.f()}};function m(e,t){var n,o=O(y);try{for(o.s();!(n=o.n()).done;){(0,n.value)()}}catch(e){o.e(e)}finally{o.f()}y.splice(0,y.length);var r,i=v.getGrid(d.grid).getConfiguration(e,t),s=new x,a=O(d.controls);try{for(a.s();!(r=a.n()).done;){var c=r.value,u=j[c.type];if(void 0!==u){var l=u(c,f,p,i,s,h);y.push(l)}else console.error("Factory for control '"+c.type+"' is not defined")}}catch(e){a.e(e)}finally{a.f()}}};var x=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sensors={}}var t,n,o;return t=e,(n=[{key:"activate",value:function(e,t){var n=this.sensors[t+"_"+e];void 0!==n&&n.activate()}},{key:"deactivate",value:function(e,t){var n=this.sensors[t+"_"+e];void 0!==n&&n.deactivate()}},{key:"register",value:function(e,t,n){this.sensors[t+"_"+e]=n}}])&&r(t.prototype,n),o&&r(t,o),e}(),j={Key:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p={onDown:function(){return n.sendKeyEvent(e.mapTo,!0)},onUp:function(){return n.sendKeyEvent(e.mapTo,!1)}},h=g.createButton(e.symbol,p,a);return h.style.position="absolute",h.style.left=d-h.widthPx/2+"px",h.style.top=f-h.heightPx/2+"px",r.register(c,u,{activate:p.onDown,deactivate:p.onUp}),t.mouseOverlay.appendChild(h),function(){return t.mouseOverlay.removeChild(h)}},Options:function(e,t,n,o,r,i){var s;if(0===(null===(s=t.options.optionControls)||void 0===s?void 0:s.length))return function(){};if(void 0!==t.options.optionControls&&1===t.options.optionControls.length&&"keyboard"===t.options.optionControls[0])return D(e,t,0,o);var a=o.cells,c=o.columnWidth,u=o.rowHeight,l=e.row,d=e.column,f=a[l][d],p=f.centerX,h=f.centerY-u/2,y=p-c/2,m=o.width-y-c;return w.options(t,["default"],function(){},c,h,m)},Keyboard:D,Switch:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p=g.createButton(e.symbol,{onUp:function(){return i.setLayersConfig(i.getLayersConfig(),e.layerName)}},a);return p.style.position="absolute",p.style.left=d-p.widthPx/2+"px",p.style.top=f-p.heightPx/2+"px",t.mouseOverlay.appendChild(p),function(){t.mouseOverlay.removeChild(p)}},ScreenMove:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p=.5,h=.5;0<=e.direction.indexOf("up")&&(h=0);0<=e.direction.indexOf("down")&&(h=1);0<=e.direction.indexOf("left")&&(p=0);0<=e.direction.indexOf("right")&&(p=1);var y={onDown:function(){n.sendMouseMotion(p,h)},onUp:function(){n.sendMouseMotion(.5,.5)}},m=g.createButton(e.symbol,y,a);return m.style.position="absolute",m.style.left=d-m.widthPx/2+"px",m.style.top=f-m.heightPx/2+"px",r.register(c,u,{activate:y.onDown,deactivate:y.onUp}),t.mouseOverlay.appendChild(m),function(){t.mouseOverlay.removeChild(m)}},PointerButton:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=e.click,d=s[c][u],f=d.centerX,p=d.centerY,h={onDown:function(){l?n.sendMouseButton(e.button,!0):t.pointerButton=e.button},onUp:function(){l?n.sendMouseButton(e.button,!1):t.pointerButton=0}},y=g.createButton(e.symbol,h,a);return y.style.position="absolute",y.style.left=f-y.widthPx/2+"px",y.style.top=p-y.heightPx/2+"px",r.register(c,u,{activate:h.onDown,deactivate:h.onUp}),t.mouseOverlay.appendChild(y),function(){t.mouseOverlay.removeChild(y)}},PointerMove:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=e.x,d=e.y,f=s[c][u],p=f.centerX,h=f.centerY,y={onDown:function(){n.sendMouseMotion(l,d)},onUp:function(){n.sendMouseMotion(l,d)}},m=g.createButton(e.symbol,y,a);return m.style.position="absolute",m.style.left=p-m.widthPx/2+"px",m.style.top=h-m.heightPx/2+"px",r.register(c,u,{activate:y.onDown,deactivate:y.onUp}),t.mouseOverlay.appendChild(m),function(){t.mouseOverlay.removeChild(m)}},PointerReset:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p={onDown:function(){n.sendMouseSync()}},h=g.createButton(e.symbol,p,a);return h.style.position="absolute",h.style.left=d-h.widthPx/2+"px",h.style.top=f-h.heightPx/2+"px",r.register(c,u,{activate:p.onDown,deactivate:function(){}}),t.mouseOverlay.appendChild(h),function(){t.mouseOverlay.removeChild(h)}},PointerToggle:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p={onDown:function(){t.pointerDisabled=!t.pointerDisabled,t.pointerDisabled?h.classList.contains("emulator-button-highlight")||h.classList.add("emulator-button-highlight"):h.classList.remove("emulator-button-highlight")}},h=g.createButton(e.symbol,p,a);return h.style.position="absolute",h.style.left=d-h.widthPx/2+"px",h.style.top=f-h.heightPx/2+"px",r.register(c,u,{activate:p.onDown,deactivate:function(){}}),t.mouseOverlay.appendChild(h),function(){t.mouseOverlay.removeChild(h)}},NippleActivator:function(e,o,t,n,s,r){var i=n.cells,a=n.columnWidth,c=n.rowHeight,u=n.width,l=n.height,d=e.row,f=e.column,p=i[d][f],h=p.centerX,y=p.centerY,m=document.createElement("div"),v=Math.max(0,h-1.5*a),g=Math.max(0,y-1.5*c),_=Math.max(0,u-h-1.5*a),b=Math.max(0,l-y-1.5*c);m.style.position="absolute",m.style.zIndex="999",m.style.left=v+"px",m.style.top=g+"px",m.style.right=_+"px",m.style.bottom=b+"px",o.mouseOverlay.appendChild(m);var w=P.create({zone:m,multitouch:!1,maxNumberOfNipples:1,mode:"static",follow:!1,dynamicPage:!0,size:1.5*Math.max(a,c),position:{left:(u-_-v)/2+"px",top:(l-b-g)/2+"px"}}),x=-1,j=-1;w.on("move",function(e,t){if(t.distance<10)return s.deactivate(j,x),void(j=x=-1);var n=-1,o=-1,r=22.5,i=t.angle.degree;o=r<i&&i<=67.5?(n=f+1,d-1):67.5<i&&i<=112.5?(n=f,d-1):112.5<i&&i<=157.5?(n=f-1,d-1):157.5<i&&i<=202.5?(n=f-1,d):202.5<i&&i<=247.5?(n=f-1,d+1):247.5<i&&i<=292.5?(n=f,d+1):292.5<i&&i<=337.5?(n=f+1,d+1):(n=f+1,d),x===n&&j===o||(s.deactivate(j,x),s.activate(o,n),x=n,j=o)});var D=!1;w.on("start",function(){D=!0}),w.on("end",function(){D=!1,s.deactivate(j,x),x=j=-1});var k={capture:!0};function E(e){D&&(D=!1,w.processOnEnd(e),e.stopPropagation())}var B,K=O(S.pointer.enders);try{for(K.s();!(B=K.n()).done;){var C=B.value;o.mouseOverlay.addEventListener(C,E,k)}}catch(e){K.e(e)}finally{K.f()}return function(){w.destroy(),o.mouseOverlay.removeChild(m);var e,t=O(S.pointer.enders);try{for(t.s();!(e=t.n()).done;){var n=e.value;o.mouseOverlay.removeEventListener(n,E,k)}}catch(e){t.e(e)}finally{t.f()}}}};function D(e,t,n,o,r,i){function s(e){e?h.children[0].classList.add("emulator-control-close-icon"):h.children[0].classList.remove("emulator-control-close-icon")}var a=o.cells,c=o.columnWidth,u=e.row,l=e.column,d=a[u][l],f=d.centerX,p=d.centerY,h=g.createButton("keyboard",{onUp:function(){return t.toggleKeyboard()}},c);return t.setOnKeyboardVisibility(s),h.style.position="absolute",h.style.left=f-h.widthPx/2+"px",h.style.top=p-h.heightPx/2+"px",t.mouseOverlay.appendChild(h),function(){t.mouseOverlay.removeChild(h),t.removeOnKeyboardVisibility(s)}}},{"../dom/pointer":156,"./button":142,"./grid":143,"./keyboard":144,"./mouse":148,"./options":151,"core-js/modules/es6.array.from":101,"core-js/modules/es6.array.index-of":102,"core-js/modules/es6.array.is-array":103,"core-js/modules/es6.date.to-string":106,"core-js/modules/es6.function.name":108,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.regexp.to-string":118,"core-js/modules/es6.string.iterator":119,"core-js/modules/es6.symbol":120,"core-js/modules/es7.symbol.async-iterator":124,"core-js/modules/web.dom.iterable":125,nipplejs:137}],147:[function(e,t,n){"use strict";e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.keys"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var c=e("./button"),u=e("./mouse"),l=e("./nipple"),d=e("./options"),f=e("./keyboard");n.initLegacyLayersControl=function(n,o,r){function e(e){s.keyboard(),s.mouse(),s.gestures(),s.buttons(),s.keyboard=function(){},s.mouse=function(){},s.gestures=function(){},s.buttons=function(){};var t=o[e];void 0!==t&&(s.keyboard=f.keyboard(n,r,t.mapper),void 0!==t.gestures&&0<t.gestures.length?s.gestures=l.nipple(n,r,t.gestures):s.mouse=u.mouse(n,r),void 0!==t.buttons&&t.buttons.length&&(s.buttons=c.deprecatedButton(n,r,t.buttons,54)))}var t,i=Object.keys(o),s={keyboard:function(){},mouse:function(){},gestures:function(){},buttons:function(){}},a=0===(null===(t=n.options.optionControls)||void 0===t?void 0:t.length)?function(){}:d.options(n,i,e,54,13.5,0);return e("default"),function(){s.gestures(),s.buttons(),s.mouse(),s.keyboard(),a()}}},{"./button":142,"./keyboard":144,"./mouse":148,"./nipple":149,"./options":151,"core-js/modules/es6.array.iterator":104,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.keys":112,"core-js/modules/es6.object.to-string":113,"core-js/modules/web.dom.iterable":125}],148:[function(e,t,n){"use strict";function C(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.is-array"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.date.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var O=e("../dom/pointer");n.mouse=function(p,h){var r=!1;O.pointer.canLock&&h.config().then(function(e){var t,n,o;return r=!0===(null===(t=e.output)||void 0===t||null===(n=t.options)||void 0===n||null===(o=n.autolock)||void 0===o?void 0:o.value)}).catch(console.error);var y=.01;function i(e,t){var n=h.width(),o=h.height(),r=p.width,i=p.height,s=n/o,a=r,c=r/s;i<c&&(a=(c=i)*s);var u=(i-c)/2,l=(r-a)/2,d=Math.max(0,Math.min(1,(e-l)/a)),f=Math.max(0,Math.min(1,(t-u)/c));return d<=y&&(d=0),1-y<=d&&(d=1),f<=y&&(f=0),1-y<=f&&(f=1),{x:d,y:f}}function s(){return document.pointerLockElement!==m}var m=p.mouseOverlay;function v(e){if(e.target===m)if(p.pointerDisabled)e.stopPropagation();else{var t=O.getPointerState(e,m);n=t.button||p.pointerButton,function(e,t,n){if(r&&s()&&(m.requestPointerLock||m.mozRequestPointerLock||m.webkitRequestPointerLock).call(m),s()){var o=i(e,t);h.sendMouseMotion(o.x,o.y)}h.sendMouseButton(n,!0)}(t.x,t.y,n),e.stopPropagation()}}function g(e){if(e.target===m)if(p.pointerDisabled)e.stopPropagation();else{var t=O.getPointerState(e,m);!function(e,t,n,o){if(s()){var r=i(e,t);h.sendMouseMotion(r.x,r.y)}else h.sendMouseRelativeMotion(n,o)}(t.x,t.y,t.mX,t.mY),e.stopPropagation()}}function _(e){if(p.pointerDisabled)e.stopPropagation();else{var t=O.getPointerState(e,m);!function(e,t,n){if(s()){var o=i(e,t);h.sendMouseMotion(o.x,o.y)}h.sendMouseButton(n,!1)}(t.x,t.y,n),e.stopPropagation()}}function b(e){if(e.target===m)if(p.pointerDisabled)e.stopPropagation();else{var t,n,o,r=O.getPointerState(e,m);t=r.x,n=r.y,o=i(t,n),h.sendMouseMotion(o.x,o.y),e.stopPropagation()}}function w(e){e.stopPropagation()}var e,n=0,x={capture:!1},t=C(O.pointer.starters);try{for(t.s();!(e=t.n()).done;){var o=e.value;m.addEventListener(o,v,x)}}catch(e){t.e(e)}finally{t.f()}var a,c=C(O.pointer.changers);try{for(c.s();!(a=c.n()).done;){var u=a.value;m.addEventListener(u,g,x)}}catch(e){c.e(e)}finally{c.f()}var l,d=C(O.pointer.enders);try{for(d.s();!(l=d.n()).done;){var f=l.value;m.addEventListener(f,_,x)}}catch(e){d.e(e)}finally{d.f()}var j,D=C(O.pointer.prevents);try{for(D.s();!(j=D.n()).done;){var k=j.value;m.addEventListener(k,w,x)}}catch(e){D.e(e)}finally{D.f()}var E,B=C(O.pointer.leavers);try{for(B.s();!(E=B.n()).done;){var K=E.value;m.addEventListener(K,b,x)}}catch(e){B.e(e)}finally{B.f()}return function(){var e,t=C(O.pointer.starters);try{for(t.s();!(e=t.n()).done;){var n=e.value;m.removeEventListener(n,v,x)}}catch(e){t.e(e)}finally{t.f()}var o,r=C(O.pointer.changers);try{for(r.s();!(o=r.n()).done;){var i=o.value;m.removeEventListener(i,g,x)}}catch(e){r.e(e)}finally{r.f()}var s,a=C(O.pointer.enders);try{for(a.s();!(s=a.n()).done;){var c=s.value;m.removeEventListener(c,_,x)}}catch(e){a.e(e)}finally{a.f()}var u,l=C(O.pointer.prevents);try{for(l.s();!(u=l.n()).done;){var d=u.value;m.removeEventListener(d,w,x)}}catch(e){l.e(e)}finally{l.f()}var f,p=C(O.pointer.leavers);try{for(p.s();!(f=p.n()).done;){var h=f.value;m.removeEventListener(h,b,x)}}catch(e){p.e(e)}finally{p.f()}}}},{"../dom/pointer":156,"core-js/modules/es6.array.from":101,"core-js/modules/es6.array.is-array":103,"core-js/modules/es6.date.to-string":106,"core-js/modules/es6.function.name":108,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.regexp.to-string":118,"core-js/modules/es6.string.iterator":119,"core-js/modules/es6.symbol":120,"core-js/modules/es7.symbol.async-iterator":124,"core-js/modules/web.dom.iterable":125}],149:[function(e,t,n){"use strict";function p(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.is-array"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.date.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.date.now"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var h=e("nipplejs"),y=e("../dom/keys");n.nipple=function(n,e,t){function o(){-1!==s&&(n.fireKeyUp(s),s=-1)}var r,i=h.create({zone:n.mouseOverlay,multitouch:!0,maxNumberOfNipples:2}),s=-1,a={},c={},u={},l=p(t);try{var d=function(){var t=r.value;"end:release"===t.event?a[t.joystickId]=!0:t.mapTo!==y.KBD_NONE&&("tap"===t.event?c[t.joystickId]=t.mapTo:i.on(t.event,function(){var e;u[t.joystickId]=Date.now(),o(),e=t.mapTo,n.fireKeyDown(e),s=e}))};for(l.s();!(r=l.n()).done;)d()}catch(e){l.e(e)}finally{l.f()}var f={};return i.on("start",function(){var e=i.ids.length-1;f[e]=Date.now()}),i.on("end",function(){var e=i.ids.length-1,t=Date.now()-f[e];!0===a[e]&&o(),c[e]&&t<500&&u[e]<f[e]&&n.fireKeyPress(c[e])}),function(){return i.destroy()}}},{"../dom/keys":153,"core-js/modules/es6.array.from":101,"core-js/modules/es6.array.is-array":103,"core-js/modules/es6.date.now":105,"core-js/modules/es6.date.to-string":106,"core-js/modules/es6.function.name":108,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.regexp.to-string":118,"core-js/modules/es6.string.iterator":119,"core-js/modules/es6.symbol":120,"core-js/modules/es7.symbol.async-iterator":124,"core-js/modules/web.dom.iterable":125,nipplejs:137}],150:[function(e,t,n){"use strict";e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var i=e("./keyboard"),s=e("./mouse"),a=e("./options");n.initNullLayersControl=function(e,t){var n=i.keyboard(e,t),o=s.mouse(e,t),r=a.options(e,["default"],function(){},54,13.5,0);return function(){n(),o(),r()}}},{"./keyboard":144,"./mouse":148,"./options":151,"core-js/modules/es6.object.define-property":111}],151:[function(e,t,n){"use strict";function w(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.is-array"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.date.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var x=e("./button"),j=e("../dom/helpers");n.options=function(e,t,n,o,r,i){function s(){var e,t=l?"flex":"none",n=w(f);try{for(n.s();!(e=n.n()).done;){var o=e.value;o!=p&&(o.style.display=t)}}catch(e){n.e(e)}finally{n.f()}}function a(){!(l=!l)&&d&&e.toggleKeyboard(),s()}function c(e){(d=e)?y.classList.add("emulator-control-close-icon"):y.classList.remove("emulator-control-close-icon")}var u=Math.round(o/4),l=!1,d=!1,f=[function(e,n){if(e.length<=1)return document.createElement("div");var t=document.createElement("select");t.classList.add("emulator-control-select");var o,r=w(e);try{for(r.s();!(o=r.n()).done;){var i=o.value,s=document.createElement("option");s.value=i,s.innerHTML=i,t.appendChild(s)}}catch(e){r.e(e)}finally{r.f()}return t.onchange=function(e){var t=e.target.value;n(t)},j.stopPropagation(t,!1),t}(t,n),x.createButton("keyboard",{onClick:function(){e.toggleKeyboard(),l&&!d&&(l=!1,s())}},o),x.createButton("save",{onClick:function(){e.save(),l&&a()}},o),x.createButton("fullscreen",{onClick:function(){e.toggleFullscreen(),l&&a()}},o),x.createButton("options",{onClick:a},o)],p=f[f.length-1],h=f[f.length-2].children[0],y=f[f.length-4].children[0];e.setOnKeyboardVisibility(c),c(e.keyboardVisible),e.setOnFullscreen(function(e){e?h.classList.contains("emulator-control-exit-fullscreen-icon")||h.classList.add("emulator-control-exit-fullscreen-icon"):h.classList.remove("emulator-control-exit-fullscreen-icon")}),e.fullscreen&&h.classList.add("emulator-control-exit-fullscreen-icon");for(var m=j.createDiv("emulator-options"),v=d?"flex":"none",g=0,_=f;g<_.length;g++){var b=_[g];b!==p&&b.classList.add("emulator-button-control"),b.style.marginRight=u+"px",b.style.marginBottom=u+"px",b!==p&&(b.style.display=v),m.appendChild(b)}return m.style.position="absolute",m.style.right=i+"px",m.style.top=r+"px",e.mouseOverlay.appendChild(m),function(){e.mouseOverlay.removeChild(m),e.setOnFullscreen(function(){}),e.removeOnKeyboardVisibility(c)}}},{"../dom/helpers":152,"./button":142,"core-js/modules/es6.array.from":101,"core-js/modules/es6.array.is-array":103,"core-js/modules/es6.date.to-string":106,"core-js/modules/es6.function.name":108,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.regexp.to-string":118,"core-js/modules/es6.string.iterator":119,"core-js/modules/es6.symbol":120,"core-js/modules/es7.symbol.async-iterator":124,"core-js/modules/web.dom.iterable":125}],152:[function(e,t,n){"use strict";function h(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.is-array"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.date.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var y=e("./pointer");n.createDiv=function(e,t){var n=document.createElement("div");return n.className=e,void 0!==t&&(n.innerHTML=t),n},n.stopPropagation=function(e){function t(e){e.stopPropagation()}function n(e){e.stopPropagation(),r&&e.preventDefault()}var o,r=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],i={capture:!1},s=h(y.pointer.starters);try{for(s.s();!(o=s.n()).done;){var a=o.value;e.addEventListener(a,t,i)}}catch(e){s.e(e)}finally{s.f()}var c,u=h(y.pointer.enders);try{for(u.s();!(c=u.n()).done;){var l=c.value;e.addEventListener(l,t,i)}}catch(e){u.e(e)}finally{u.f()}var d,f=h(y.pointer.prevents);try{for(f.s();!(d=f.n()).done;){var p=d.value;e.addEventListener(p,n,i)}}catch(e){f.e(e)}finally{f.f()}}},{"./pointer":156,"core-js/modules/es6.array.from":101,"core-js/modules/es6.array.is-array":103,"core-js/modules/es6.date.to-string":106,"core-js/modules/es6.function.name":108,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.regexp.to-string":118,"core-js/modules/es6.string.iterator":119,"core-js/modules/es6.symbol":120,"core-js/modules/es7.symbol.async-iterator":124,"core-js/modules/web.dom.iterable":125}],153:[function(e,t,n){"use strict";e("core-js/modules/es6.number.constructor"),e("core-js/modules/es6.number.parse-int"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.keys"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.KBD_NONE=0,n.KBD_0=48,n.KBD_1=49,n.KBD_2=50,n.KBD_3=51,n.KBD_4=52,n.KBD_5=53,n.KBD_6=54,n.KBD_7=55,n.KBD_8=56,n.KBD_9=57,n.KBD_a=65,n.KBD_b=66,n.KBD_c=67,n.KBD_d=68,n.KBD_e=69,n.KBD_f=70,n.KBD_g=71,n.KBD_h=72,n.KBD_i=73,n.KBD_j=74,n.KBD_k=75,n.KBD_l=76,n.KBD_m=77,n.KBD_n=78,n.KBD_o=79,n.KBD_p=80,n.KBD_q=81,n.KBD_r=82,n.KBD_s=83,n.KBD_t=84,n.KBD_u=85,n.KBD_v=86,n.KBD_w=87,n.KBD_x=88,n.KBD_y=89,n.KBD_z=90,n.KBD_f1=290,n.KBD_f2=291,n.KBD_f3=292,n.KBD_f4=293,n.KBD_f5=294,n.KBD_f6=295,n.KBD_f7=296,n.KBD_f8=297,n.KBD_f9=298,n.KBD_f10=299,n.KBD_f11=300,n.KBD_f12=301,n.KBD_kp0=320,n.KBD_kp1=321,n.KBD_kp2=322,n.KBD_kp3=323,n.KBD_kp4=324,n.KBD_kp5=325,n.KBD_kp6=326,n.KBD_kp7=327,n.KBD_kp8=328,n.KBD_kp9=329,n.KBD_kpperiod=330,n.KBD_kpdivide=331,n.KBD_kpmultiply=332,n.KBD_kpminus=333,n.KBD_kpplus=334,n.KBD_kpenter=335,n.KBD_esc=256,n.KBD_tab=258,n.KBD_backspace=259,n.KBD_enter=257,n.KBD_space=32,n.KBD_leftalt=342,n.KBD_rightalt=346,n.KBD_leftctrl=341,n.KBD_rightctrl=345,n.KBD_leftshift=340,n.KBD_rightshift=344,n.KBD_capslock=280,n.KBD_scrolllock=281,n.KBD_numlock=282,n.KBD_grave=96,n.KBD_minus=45,n.KBD_equals=61,n.KBD_backslash=92,n.KBD_leftbracket=91,n.KBD_rightbracket=93,n.KBD_semicolon=59,n.KBD_quote=39,n.KBD_period=46,n.KBD_comma=44,n.KBD_slash=47,n.KBD_printscreen=283,n.KBD_pause=284,n.KBD_insert=260,n.KBD_home=268,n.KBD_pageup=266,n.KBD_delete=261,n.KBD_end=269,n.KBD_pagedown=267,n.KBD_left=263,n.KBD_up=265,n.KBD_down=264,n.KBD_right=262,n.KBD_extra_lt_gt=348,n.domToKeyCodes={8:n.KBD_backspace,9:n.KBD_tab,13:n.KBD_enter,16:n.KBD_leftshift,17:n.KBD_leftctrl,18:n.KBD_leftalt,19:n.KBD_pause,27:n.KBD_esc,32:n.KBD_space,33:n.KBD_pageup,34:n.KBD_pagedown,35:n.KBD_end,36:n.KBD_home,37:n.KBD_left,38:n.KBD_up,39:n.KBD_right,40:n.KBD_down,45:n.KBD_insert,46:n.KBD_delete,48:n.KBD_0,49:n.KBD_1,50:n.KBD_2,51:n.KBD_3,52:n.KBD_4,53:n.KBD_5,54:n.KBD_6,55:n.KBD_7,56:n.KBD_8,57:n.KBD_9,59:n.KBD_semicolon,64:n.KBD_equals,65:n.KBD_a,66:n.KBD_b,67:n.KBD_c,68:n.KBD_d,69:n.KBD_e,70:n.KBD_f,71:n.KBD_g,72:n.KBD_h,73:n.KBD_i,74:n.KBD_j,75:n.KBD_k,76:n.KBD_l,77:n.KBD_m,78:n.KBD_n,79:n.KBD_o,80:n.KBD_p,81:n.KBD_q,82:n.KBD_r,83:n.KBD_s,84:n.KBD_t,85:n.KBD_u,86:n.KBD_v,87:n.KBD_w,88:n.KBD_x,89:n.KBD_y,90:n.KBD_z,91:n.KBD_leftbracket,93:n.KBD_rightbracket,96:n.KBD_kp0,97:n.KBD_kp1,98:n.KBD_kp2,99:n.KBD_kp3,100:n.KBD_kp4,101:n.KBD_kp5,102:n.KBD_kp6,103:n.KBD_kp7,104:n.KBD_kp8,105:n.KBD_kp9,111:n.KBD_kpdivide,112:n.KBD_f1,113:n.KBD_f2,114:n.KBD_f3,115:n.KBD_f4,116:n.KBD_f5,117:n.KBD_f6,118:n.KBD_f7,119:n.KBD_f8,120:n.KBD_f9,121:n.KBD_f10,122:n.KBD_f11,123:n.KBD_f12,144:n.KBD_numlock,145:n.KBD_scrolllock,173:n.KBD_minus,186:n.KBD_semicolon,187:n.KBD_equals,188:n.KBD_comma,189:n.KBD_minus,190:n.KBD_period,191:n.KBD_slash,219:n.KBD_leftbracket,220:n.KBD_backslash,221:n.KBD_rightbracket},n.namedKeyCodes={KBD_NONE:n.KBD_NONE,KBD_0:n.KBD_0,KBD_1:n.KBD_1,KBD_2:n.KBD_2,KBD_3:n.KBD_3,KBD_4:n.KBD_4,KBD_5:n.KBD_5,KBD_6:n.KBD_6,KBD_7:n.KBD_7,KBD_8:n.KBD_8,KBD_9:n.KBD_9,KBD_a:n.KBD_a,KBD_b:n.KBD_b,KBD_c:n.KBD_c,KBD_d:n.KBD_d,KBD_e:n.KBD_e,KBD_f:n.KBD_f,KBD_g:n.KBD_g,KBD_h:n.KBD_h,KBD_i:n.KBD_i,KBD_j:n.KBD_j,KBD_k:n.KBD_k,KBD_l:n.KBD_l,KBD_m:n.KBD_m,KBD_n:n.KBD_n,KBD_o:n.KBD_o,KBD_p:n.KBD_p,KBD_q:n.KBD_q,KBD_r:n.KBD_r,KBD_s:n.KBD_s,KBD_t:n.KBD_t,KBD_u:n.KBD_u,KBD_v:n.KBD_v,KBD_w:n.KBD_w,KBD_x:n.KBD_x,KBD_y:n.KBD_y,KBD_z:n.KBD_z,KBD_f1:n.KBD_f1,KBD_f2:n.KBD_f2,KBD_f3:n.KBD_f3,KBD_f4:n.KBD_f4,KBD_f5:n.KBD_f5,KBD_f6:n.KBD_f6,KBD_f7:n.KBD_f7,KBD_f8:n.KBD_f8,KBD_f9:n.KBD_f9,KBD_f10:n.KBD_f10,KBD_f11:n.KBD_f11,KBD_f12:n.KBD_f12,KBD_kp0:n.KBD_kp0,KBD_kp1:n.KBD_kp1,KBD_kp2:n.KBD_kp2,KBD_kp3:n.KBD_kp3,KBD_kp4:n.KBD_kp4,KBD_kp5:n.KBD_kp5,KBD_kp6:n.KBD_kp6,KBD_kp7:n.KBD_kp7,KBD_kp8:n.KBD_kp8,KBD_kp9:n.KBD_kp9,KBD_kpperiod:n.KBD_kpperiod,KBD_kpdivide:n.KBD_kpdivide,KBD_kpmultiply:n.KBD_kpmultiply,KBD_kpminus:n.KBD_kpminus,KBD_kpplus:n.KBD_kpplus,KBD_kpenter:n.KBD_kpenter,KBD_esc:n.KBD_esc,KBD_tab:n.KBD_tab,KBD_backspace:n.KBD_backspace,KBD_enter:n.KBD_enter,KBD_space:n.KBD_space,KBD_leftalt:n.KBD_leftalt,KBD_rightalt:n.KBD_rightalt,KBD_leftctrl:n.KBD_leftctrl,KBD_rightctrl:n.KBD_rightctrl,KBD_leftshift:n.KBD_leftshift,KBD_rightshift:n.KBD_rightshift,KBD_capslock:n.KBD_capslock,KBD_scrolllock:n.KBD_scrolllock,KBD_numlock:n.KBD_numlock,KBD_grave:n.KBD_grave,KBD_minus:n.KBD_minus,KBD_equals:n.KBD_equals,KBD_backslash:n.KBD_backslash,KBD_leftbracket:n.KBD_leftbracket,KBD_rightbracket:n.KBD_rightbracket,KBD_semicolon:n.KBD_semicolon,KBD_quote:n.KBD_quote,KBD_period:n.KBD_period,KBD_comma:n.KBD_comma,KBD_slash:n.KBD_slash,KBD_printscreen:n.KBD_printscreen,KBD_pause:n.KBD_pause,KBD_insert:n.KBD_insert,KBD_home:n.KBD_home,KBD_pageup:n.KBD_pageup,KBD_delete:n.KBD_delete,KBD_end:n.KBD_end,KBD_pagedown:n.KBD_pagedown,KBD_left:n.KBD_left,KBD_up:n.KBD_up,KBD_down:n.KBD_down,KBD_right:n.KBD_right,KBD_extra_lt_gt:n.KBD_extra_lt_gt},n.keyCodesToDom={};for(var o=0,r=Object.keys(n.domToKeyCodes);o<r.length;o++){var i=r[o],s=Number.parseInt(i,10);n.keyCodesToDom[n.domToKeyCodes[s]]=s}n.domToKeyCode=function(e){return n.domToKeyCodes[e]||0}},{"core-js/modules/es6.array.iterator":104,"core-js/modules/es6.number.constructor":109,"core-js/modules/es6.number.parse-int":110,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.keys":112,"core-js/modules/es6.object.to-string":113,"core-js/modules/web.dom.iterable":125}],154:[function(e,t,n){"use strict";function c(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.is-array"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.date.to-string"),e("core-js/modules/es6.array.filter"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.define-property");var o=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var i=e("notyf"),u=o(e("simple-keyboard")),l=e("./helpers"),d=e("./keys"),s=e("element-resize-detector")({});n.layers=function(e,t){return new f(e,t||{})};var f=function(){function t(o,e){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.fullscreen=!1,this.keyboardVisible=!1,this.pointerLock=!1,this.pointerDisabled=!1,this.pointerButton=0,this.notyf=new i.Notyf,this.toggleKeyboard=function(){return!1},this.onFullscreenChanged=[],this.onKeyboardChanged=[],this.options=e,this.root=o,this.root.classList.add("emulator-root"),this.fullscreenElement=e.fullscreenElement||this.root,this.canvas=document.createElement("canvas"),this.canvas.className="emulator-canvas",this.video=document.createElement("video"),this.video.setAttribute("autoplay",""),this.video.setAttribute("playsinline",""),this.video.className="emulator-video",this.loading=l.createDiv("emulator-loading","\n<div class='emulator-loading-inner'>\n<pre class='emulator-loading-pre-1'>\n        _                __\n       (_)____      ____/ /___  _____ _________  ____ ___\n      / / ___/_____/ __  / __ \\/ ___// ___/ __ \\/ __ `__ \\\n     / (__  )_____/ /_/ / /_/ (__  )/ /__/ /_/ / / / / / /\n  __/ /____/      \\__,_/\\____/____(_)___/\\____/_/ /_/ /_/\n /___/\n</pre>\n<pre class='emulator-loading-pre-2'>\n</pre>\n<div class='emulator-loader'>\n</div>\n</div>\n"),this.loaderText=this.loading.querySelector(".emulator-loading-pre-2"),this.mouseOverlay=l.createDiv("emulator-mouse-overlay",""),this.clickToStart=l.createDiv("emulator-click-to-start-overlay",'\n<div class="emulator-click-to-start-text">Press to start</div>\n<div class="emulator-click-to-start-icon"></div>\n'),this.clickToStart.onclick=function(){r.clickToStart.style.display="none",r.video.play()},this.root.appendChild(this.canvas),this.root.appendChild(this.video),this.root.appendChild(this.mouseOverlay),this.root.appendChild(this.clickToStart),this.root.appendChild(this.loading),this.width=o.offsetWidth,this.height=o.offsetHeight,this.onResize=[],this.onKeyDown=function(){},this.onKeyUp=function(){},this.onKeyPress=function(){},this.onKeysPress=function(){},this.onSave=function(){return Promise.reject(new Error("Not implemented"))},this.onSaveStarted=function(){},this.onSaveEnded=function(){},s.listenTo(this.root,function(e){if(e===o){r.width=e.offsetWidth,r.height=e.offsetHeight;var t,n=c(r.onResize);try{for(n.s();!(t=n.n()).done;){(0,t.value)(r.width,r.height)}}catch(e){n.e(e)}finally{n.f()}}}),this.initKeyEvents(),this.initKeyboard(),this.preventContextMenu(),this.fullscreenElement.onfullscreenchange=function(){if(document.fullscreenElement!==r.fullscreenElement){r.fullscreen=!1;var e,t=c(r.onFullscreenChanged);try{for(t.s();!(e=t.n()).done;){(0,e.value)(r.fullscreen)}}catch(e){t.e(e)}finally{t.f()}}}}var e,n,o;return e=t,(n=[{key:"initKeyEvents",value:function(){var n=this;window.addEventListener("keydown",function(e){var t=d.domToKeyCode(e.keyCode);n.onKeyDown(t)}),window.addEventListener("keyup",function(e){var t=d.domToKeyCode(e.keyCode);n.onKeyUp(t)})}},{key:"preventContextMenu",value:function(){this.root.addEventListener("contextmenu",function(e){return e.stopPropagation(),e.preventDefault(),!1})}},{key:"addOnResize",value:function(e){this.onResize.push(e)}},{key:"removeOnResize",value:function(t){this.onResize=this.onResize.filter(function(e){return e!==t})}},{key:"setOnKeyDown",value:function(e){this.onKeyDown=e}},{key:"fireKeyDown",value:function(e){this.onKeyDown(e)}},{key:"setOnKeyUp",value:function(e){this.onKeyUp=e}},{key:"fireKeyUp",value:function(e){this.onKeyUp(e)}},{key:"setOnKeyPress",value:function(e){this.onKeyPress=e}},{key:"fireKeyPress",value:function(e){this.onKeyPress(e)}},{key:"setOnKeysPress",value:function(e){this.onKeysPress=e}},{key:"fireKeysPress",value:function(e){this.onKeysPress(e)}},{key:"toggleFullscreen",value:function(){if(this.fullscreen){this.fullscreen=!1,this.fullscreenElement.classList.contains("emulator-fullscreen-workaround")?this.fullscreenElement.classList.remove("emulator-fullscreen-workaround"):document.exitFullscreen?document.exitFullscreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.msExitFullscreen&&document.msExitFullscreen();var e,t=c(this.onFullscreenChanged);try{for(t.s();!(e=t.n()).done;){(0,e.value)(!1)}}catch(e){t.e(e)}finally{t.f()}}else{this.fullscreen=!0;var n=this.fullscreenElement;n.requestFullscreen?n.requestFullscreen():n.webkitRequestFullscreen?n.webkitRequestFullscreen():n.mozRequestFullScreen?n.mozRequestFullScreen():n.msRequestFullscreen?n.msRequestFullscreen():n.webkitEnterFullscreen?n.webkitEnterFullscreen():this.fullscreenElement.classList.add("emulator-fullscreen-workaround");var o,r=c(this.onFullscreenChanged);try{for(r.s();!(o=r.n()).done;){(0,o.value)(!0)}}catch(e){r.e(e)}finally{r.f()}}}},{key:"setOnFullscreen",value:function(e){this.onFullscreenChanged.push(e)}},{key:"removeOnFullscreen",value:function(t){this.onFullscreenChanged=this.onFullscreenChanged.filter(function(e){return e!==t})}},{key:"setOnKeyboardVisibility",value:function(e){this.onKeyboardChanged.push(e)}},{key:"removeOnKeyboardVisibility",value:function(t){this.onKeyboardChanged=this.onKeyboardChanged.filter(function(e){return e!==t})}},{key:"save",value:function(){var t=this;return this.onSaveStarted(),this.onSave().then(function(){t.notyf.success("Saved"),t.onSaveEnded()}).catch(function(e){t.notyf.error(e.message),t.onSaveEnded()})}},{key:"setOnSave",value:function(e){this.onSave=e}},{key:"getOnSave",value:function(){return this.onSave}},{key:"setOnSaveStarted",value:function(e){this.onSaveStarted=e}},{key:"setOnSaveEnded",value:function(e){this.onSaveEnded=e}},{key:"hideLoadingLayer",value:function(){this.loading.style.visibility="hidden"}},{key:"showLoadingLayer",value:function(){this.loading.style.visibility="visible"}},{key:"setLoadingMessage",value:function(e){this.loaderText.innerHTML=e}},{key:"switchToVideo",value:function(){this.video.style.display="block",this.canvas.style.display="none"}},{key:"showClickToStart",value:function(){this.clickToStart.style.display="flex"}},{key:"initKeyboard",value:function(){var o=this,r=!1,n=[{"{esc}":"ESC","{bksp}":"Backspace","{enter}":"⏎","{space}":"Space"},{"{esc}":"ESC","{bksp}":"Backspace","{enter}":"⏎","{space}":"Space",q:"й",w:"ц",e:"у",r:"к",t:"е",y:"н",u:"г",i:"ш",o:"щ",p:"з","{":"х","}":"ъ",a:"ф",s:"ы",d:"в",f:"а",g:"п",h:"р",j:"о",k:"л",l:"д",";":"ж","'":"э",z:"я",x:"ч",c:"с",v:"м",b:"и",n:"т",m:"ь",",":"б",".":"ю"}],i=0,s=this.options.keyboardDiv||l.createDiv("");s.classList.add("emulator-keyboard"),s.style.display="none",l.stopPropagation(s);var a=new u.default(s,{layout:{en:["{esc} ` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","q w e r t y u i o p { } \\","a s d f g h j k l ; ' [ {enter}","⎘ z x c v b n m , . / ] {space}"]},layoutName:"en",display:n[i],onKeyPress:function(e){if("⎘"===e)return i=(i+1)%n.length,void a.setOptions({display:n[i]});var t=function(e){{if(1<e.length)return"{enter}"===e?[d.KBD_enter]:"{shift}"===e?[d.KBD_leftshift]:"{bksp}"===e?[d.KBD_backspace]:"{lock}"===e?[d.KBD_capslock]:"{tab}"===e?[d.KBD_tab]:"{space}"===e?[d.KBD_space]:"{esc}"===e?[d.KBD_esc]:"ctrl"===e?[d.KBD_leftctrl]:"{alt}"===e?[d.KBD_leftalt]:(console.warn("Unknown button",e),[]);if(","===e)return[d.KBD_comma];if("."===e)return[d.KBD_period];if("'"===e)return[d.KBD_quote];if(":"===e)return[d.KBD_semicolon];if("{"===e)return[d.KBD_leftshift,d.KBD_leftbracket];if("}"===e)return[d.KBD_leftshift,d.KBD_rightbracket]}var t=d.domToKeyCode(e.toUpperCase().charCodeAt(0));return 0!==t?[t]:[]}(e);1===t.length?o.fireKeyPress(t[0]):0<t.length&&o.fireKeysPress(t)},preventMouseDownDefault:!0,preventMouseUpDefault:!0,stopMouseDownPropagation:!0,stopMouseUpPropagation:!0,autoUseTouchEvents:!0,useMouseEvents:!0});this.toggleKeyboard=function(){var e=(r=!r)?"block":"none";s.style.display=e;var t,n=c(o.onKeyboardChanged);try{for(n.s();!(t=n.n()).done;){(0,t.value)(r)}}catch(e){n.e(e)}finally{n.f()}return o.keyboardVisible=r},this.options.keyboardDiv||this.mouseOverlay.appendChild(s)}}])&&r(e.prototype,n),o&&r(e,o),t}();n.Layers=f},{"./helpers":152,"./keys":153,"core-js/modules/es6.array.filter":100,"core-js/modules/es6.array.from":101,"core-js/modules/es6.array.is-array":103,"core-js/modules/es6.date.to-string":106,"core-js/modules/es6.function.name":108,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.promise":114,"core-js/modules/es6.regexp.to-string":118,"core-js/modules/es6.string.iterator":119,"core-js/modules/es6.symbol":120,"core-js/modules/es7.symbol.async-iterator":124,"core-js/modules/web.dom.iterable":125,"element-resize-detector":130,notyf:138,"simple-keyboard":140}],155:[function(e,t,n){"use strict";e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.lifecycle=function(e){var t="",n="";function o(){document[t]?e.pause():e.resume()}void 0!==document.hidden?(t="hidden",n="visibilitychange"):void 0!==document.mozHidden?(t="mozHidden",n="mozvisibilitychange"):void 0!==document.msHidden?(t="msHidden",n="msvisibilitychange"):void 0!==document.webkitHidden&&(t="webkitHidden",n="webkitvisibilitychange"),document.addEventListener(n,o),e.events().onExit(function(){document.removeEventListener(n,o)})}},{"core-js/modules/es6.object.define-property":111}],156:[function(e,t,n){"use strict";function o(e,t){if(e.type.match(/^touch/)){var n=e,o=t.getBoundingClientRect();return{x:n.targetTouches[0].clientX-o.x,y:n.targetTouches[0].clientY-o.y,mX:0,mY:0}}if(e.type.match(/^pointer/)){return{x:e.offsetX,y:e.offsetY,mX:e.movementX,mY:e.movementY}}return{x:e.offsetX,y:e.offsetY,mX:e.movementX,mY:e.movementY,button:0===e.button?0:1}}e("core-js/modules/es6.regexp.match"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.pointer=function(){var e=/iPhone|iPad|iPod|Android/i.test(navigator.userAgent),t=e&&!!("ontouchstart"in window),n=e&&!!window.PointerEvent,o=e&&!!window.MSPointerEvent,r=!0,i=[],s=[],a=[],c=[],u=[];n?(i.push("pointerdown"),a.push("pointerup","pointercancel"),s.push("pointermove"),u.push("touchstart","touchmove","touchend")):o?(i.push("MSPointerDown"),s.push("MSPointerMove"),a.push("MSPointerUp")):t?(r=!1,i.push("touchstart","mousedown"),s.push("touchmove"),a.push("touchend","touchcancel","mouseup")):(i.push("mousedown"),s.push("mousemove"),a.push("mouseup"),c.push("mouseleave"));return{mobile:e,canLock:r,starters:i,changers:s,enders:a,prevents:u,leavers:c}}(),n.getPointerState=o,n.pointers={bind:n.pointer,getPointerState:o}},{"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.regexp.match":117}],157:[function(e,t,n){"use strict";e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});function o(){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.dom={layers:r.layers,lifecycle:i.lifecycle,pointers:_.pointers},this.network={resolveBundle:s.resolveBundle},this.graphics={webGl:c.webGl,_2d:a._2d,video:u.video},this.sound={audioNode:y.audioNode},this.persist={save:v.save,load:v.load},this.controls={getGrid:g.getGrid,namedKeyCodes:h.namedKeyCodes,domToKeyCodes:h.domToKeyCodes,domToKeyCode:h.domToKeyCode,keyCodesToDom:h.keyCodesToDom,keyboard:l.keyboard,mouse:d.mouse,nipple:f.nipple,options:p.options},this.notifications={notyf:m.notyf},this.dos=function(e,t){return new b.DosInstance(e,n,t||{})}}var r=e("./dom/layers"),i=e("./dom/lifecycle"),s=e("./network/xhr"),a=e("./graphics/_2d"),c=e("./graphics/webgl"),u=e("./graphics/video"),l=e("./controls/keyboard"),d=e("./controls/mouse"),f=e("./controls/nipple"),p=e("./controls/options"),h=e("./dom/keys"),y=e("./sound/audio-node"),m=e("./notification/notyf"),v=e("./persist/save-load"),g=e("./controls/grid"),_=e("./dom/pointer"),b=e("./js-dos"),w=new(n.EmulatorsUi=o);window.emulatorsUi=w,window.Dos=w.dos},{"./controls/grid":143,"./controls/keyboard":144,"./controls/mouse":148,"./controls/nipple":149,"./controls/options":151,"./dom/keys":153,"./dom/layers":154,"./dom/lifecycle":155,"./dom/pointer":156,"./graphics/_2d":158,"./graphics/video":159,"./graphics/webgl":160,"./js-dos":161,"./network/xhr":162,"./notification/notyf":163,"./persist/save-load":164,"./sound/audio-node":165,"core-js/modules/es6.object.define-property":111}],158:[function(e,t,n){"use strict";e("core-js/modules/es6.typed.uint8-clamped-array"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n._2d=function(e,t){var o=e.canvas,r=o.getContext("2d");if(null===r)throw new Error("Unable to create 2d context on given canvas");function n(){var e=c/u,t=s,n=s/e;a<n&&(t=(n=a)*e),o.style.position="relative",o.style.top=(a-n)/2+"px",o.style.left=(s-t)/2+"px",o.style.width=t+"px",o.style.height=n+"px"}function i(e,t){s=e,a=t,n()}var s=e.width,a=e.height,c=0,u=0;function l(e,t){c=e,u=t,o.width=c,o.height=u,d=new Uint8ClampedArray(e*t*4),n()}e.addOnResize(i);var d=new Uint8ClampedArray(0);t.events().onFrameSize(l),t.events().onFrame(function(e){for(var t=0,n=0;n<d.length;)d[n++]=e[t++],d[n++]=e[t++],d[n++]=e[t++],d[n++]=255;r.putImageData(new ImageData(d,c,u),0,0)}),l(t.width(),t.height()),t.events().onExit(function(){e.removeOnResize(i)})}},{"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.typed.uint8-clamped-array":123}],159:[function(e,t,n){"use strict";e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.video=function(n,e){n.switchToVideo(),e.events().onMessage(function(e,t){"onremotestream"===e&&window.Janus.attachMediaStream(n.video,t)})}},{"core-js/modules/es6.object.define-property":111}],160:[function(e,t,n){"use strict";e("core-js/modules/es6.typed.float32-array"),e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});function v(e,t,n){var o=e.createShader(t);if(e.shaderSource(o,n),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS))return o;var r=e.getShaderInfoLog(o);throw e.deleteShader(o),new Error("An error occurred compiling the shaders: "+r)}n.webGl=function(e,t){var o=e.canvas,n=o.getContext("webgl");if(null===n)throw new Error("Unable to create webgl context on given canvas");var r=function(e,t,n){var o=v(e,e.VERTEX_SHADER,t),r=v(e,e.FRAGMENT_SHADER,n),i=e.createProgram();if(e.attachShader(i,o),e.attachShader(i,r),e.linkProgram(i),e.getProgramParameter(i,e.LINK_STATUS))return i;throw new Error("Unable to initialize the shader program: "+e.getProgramInfoLog(i))}(n,"\nattribute vec4 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nvarying highp vec2 vTextureCoord;\n\nvoid main(void) {\n  gl_Position = aVertexPosition;\n  vTextureCoord = aTextureCoord;\n}\n","\nvarying highp vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\n\nvoid main(void) {\n  highp vec4 color = texture2D(uSampler, vTextureCoord);\n  gl_FragColor = vec4(color.r, color.g, color.b, 1.0);\n}\n"),i=n.getAttribLocation(r,"aVertexPosition"),s=n.getAttribLocation(r,"aTextureCoord"),a=n.getUniformLocation(r,"uSampler");!function(e,t,n){var o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o);e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,-1,0,1,1,0,-1,1,0]),e.STATIC_DRAW),e.vertexAttribPointer(t,3,e.FLOAT,!1,0,0),e.enableVertexAttribArray(t);var r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r);e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,1,1,1,1,0,0,1,1,0,0,0]),e.STATIC_DRAW),e.vertexAttribPointer(n,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(n)}(n,i,s);var c=n.createTexture();n.bindTexture(n.TEXTURE_2D,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.LINEAR);var u=new Uint8Array([0,0,0]);function l(){var e=h/y,t=f,n=f/e;p<n&&(t=(n=p)*e),o.style.position="relative",o.style.top=(p-n)/2+"px",o.style.left=(f-t)/2+"px",o.style.width=t+"px",o.style.height=n+"px"}function d(e,t){f=e,p=t,l()}n.texImage2D(n.TEXTURE_2D,0,n.RGB,1,1,0,n.RGB,n.UNSIGNED_BYTE,u),n.useProgram(r),n.activeTexture(n.TEXTURE0),n.uniform1i(a,0);var f=e.width,p=e.height,h=0,y=0;function m(e,t){h=e,y=t,o.width=h,o.height=y,n.viewport(0,0,h,y),l()}e.addOnResize(d),t.events().onFrameSize(m),t.events().onFrame(function(e){n.texImage2D(n.TEXTURE_2D,0,n.RGB,h,y,0,n.RGB,n.UNSIGNED_BYTE,e),n.drawArrays(n.TRIANGLES,0,6)}),m(t.width(),t.height()),t.events().onExit(function(){e.removeOnResize(d)})}},{"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.typed.float32-array":121,"core-js/modules/es6.typed.uint8-array":122}],161:[function(e,t,n){"use strict";function c(e,t,n,o,r,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(o,r)}function u(a){return function(){var e=this,s=arguments;return new Promise(function(t,n){var o=a.apply(e,s);function r(e){c(o,t,n,r,i,"next",e)}function i(e){c(o,t,n,r,i,"throw",e)}r(void 0)})}}function l(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.function.bind"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var d=e("./build"),f=e("./controls/layers-config"),p=e("./controls/legacy-layers-control"),h=e("./controls/null-layers-control"),y=e("./controls/layers-control"),m=e("./dom/pointer"),o=function(){function o(e,t,n){if(!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.layersConfig=null,this.unbindControls=function(){},this.storedLayersConfig=null,o.initialRun&&(emulators.cacheSeed+=" ui ("+d.Build.short+")",o.initialRun=!1),this.options=n,this.emulatorsUi=t,this.emulatorFunction=n.emulatorFunction||"dosboxWorker",this.clickToStart=n.clickToStart||!1,this.layers=this.emulatorsUi.dom.layers(e,n.layersOptions),this.layers.showLoadingLayer(),this.createTransportLayer=n.createTransportLayer,this.mobileControls=m.pointers.bind.mobile,this.onMobileControlsChanged=function(){},"backend"===this.emulatorFunction&&void 0===this.createTransportLayer)throw new Error("Emulator function set to 'backend' but 'createTransportLayer' is not a function")}var e,t,n,r,i,s,a;return e=o,(t=[{key:"run",value:(a=u(regeneratorRuntime.mark(function e(t,n,o){var r,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.stop();case 2:return this.layers.setLoadingMessage("Starting..."),r=null!=o&&0<o.length?o:t+".changes",e.prev=4,e.next=7,this.runBundle(t,n,r);case 7:i=e.sent,e.next=16;break;case 10:throw e.prev=10,e.t0=e.catch(4),this.layers.setLoadingMessage("Unexpected error occured..."),this.layers.notyf.error({message:"Can't start emulator look browser logs for more info"}),console.error(e.t0),e.t0;case 16:if(s=this.emulatorsUi,"janus"!==this.emulatorFunction){e.next=21;break}s.graphics.video(this.layers,i),e.next=33;break;case 21:if(s.persist.save(r,this.layers,i,emulators),e.prev=22,!0===this.options.noWebGL)throw new Error("WebGL is disabled by options");e.next=25;break;case 25:s.graphics.webGl(this.layers,i),e.next=32;break;case 28:e.prev=28,e.t1=e.catch(22),console.error("Unable to create webgl canvas, fallback to 2d rendering"),s.graphics._2d(this.layers,i);case 32:s.sound.audioNode(i);case 33:return s.dom.lifecycle(i),e.next=36,i.config();case 36:return a=e.sent,e.next=39,this.setLayersConfig(f.extractLayersConfig(a));case 39:return this.mobileControls||this.disableMobileControls(),this.layers.setLoadingMessage("Ready"),this.layers.hideLoadingLayer(),this.clickToStart&&this.layers.showClickToStart(),e.abrupt("return",i);case 44:case"end":return e.stop()}},e,this,[[4,10],[22,28]])})),function(e,t,n){return a.apply(this,arguments)})},{key:"stop",value:(s=u(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.layers.showLoadingLayer(),void 0===this.ciPromise)return e.abrupt("return");e.next=3;break;case 3:return e.next=5,this.ciPromise;case 5:return t=e.sent,delete this.ciPromise,e.next=9,t.exit();case 9:return e.abrupt("return");case 10:case"end":return e.stop()}},e,this)})),function(){return s.apply(this,arguments)})},{key:"setLayersConfig",value:(i=u(regeneratorRuntime.mark(function e(t,n){var o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===this.ciPromise)return e.abrupt("return");e.next=2;break;case 2:return e.next=4,this.ciPromise;case 4:o=e.sent,this.layersConfig=t,this.unbindControls(),null===t?this.unbindControls=h.initNullLayersControl(this.layers,o):void 0===t.version?this.unbindControls=p.initLegacyLayersControl(this.layers,t,o):this.unbindControls=y.initLayersControl(this.layers,t,o,this,n);case 8:case"end":return e.stop()}},e,this)})),function(e,t){return i.apply(this,arguments)})},{key:"getLayersConfig",value:function(){return this.layersConfig}},{key:"enableMobileControls",value:function(){this.mobileControls=!0,this.setLayersConfig(this.storedLayersConfig),this.storedLayersConfig=null,this.onMobileControlsChanged(!0)}},{key:"disableMobileControls",value:function(){this.mobileControls=!1,this.storedLayersConfig=this.layersConfig,this.setLayersConfig(null),this.onMobileControlsChanged(!1)}},{key:"setOnMobileControlsChanged",value:function(e){this.onMobileControlsChanged=e}},{key:"runBundle",value:(r=u(regeneratorRuntime.mark(function e(t,n,o){var r,i,s,a,c,u=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=this.emulatorsUi,"janus"!==this.emulatorFunction){e.next=6;break}this.layers.setLoadingMessage("Connecting..."),this.ciPromise=emulators.janus(t),e.next=30;break;case 6:if(this.layers.setLoadingMessage("Downloading bundle ..."),i=r.network.resolveBundle(t,{onprogress:function(e){return u.layers.setLoadingMessage("Downloading bundle "+e+"%")}}),e.prev=8,null!=n&&0<n.length)return e.next=12,r.network.resolveBundle(n,{httpCache:!1});e.next=15;break;case 12:s=e.sent,e.next=18;break;case 15:return e.next=17,r.persist.load(o,emulators);case 17:s=e.sent;case 18:return e.next=20,i;case 20:a=e.sent,"backend"===this.emulatorFunction?this.ciPromise=emulators.backend([a,s],this.createTransportLayer()):this.ciPromise=emulators[this.emulatorFunction]([a,s]),e.next=30;break;case 24:return e.prev=24,e.t0=e.catch(8),e.next=28,i;case 28:c=e.sent,"backend"===this.emulatorFunction?this.ciPromise=emulators.backend([c],this.createTransportLayer()):this.ciPromise=emulators[this.emulatorFunction]([c]);case 30:return e.abrupt("return",this.ciPromise);case 31:case"end":return e.stop()}},e,this,[[8,24]])})),function(e,t,n){return r.apply(this,arguments)})}])&&l(e.prototype,t),n&&l(e,n),o}();(n.DosInstance=o).initialRun=!0},{"./build":141,"./controls/layers-config":145,"./controls/layers-control":146,"./controls/legacy-layers-control":147,"./controls/null-layers-control":150,"./dom/pointer":156,"core-js/modules/es6.function.bind":107,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.promise":114,"regenerator-runtime/runtime":139}],162:[function(e,t,n){"use strict";function c(e,t,n,o,r,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(o,r)}function o(){var a;return a=regeneratorRuntime.mark(function e(o,t){var n,r,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=(null==t?void 0:t.cache)||null,r=null==t?void 0:t.onprogress,i=!(!1===(null==t?void 0:t.httpCache)),e.prev=3,null===n)throw new Error("no-cache");e.next=6;break;case 6:if(e.t0=n,e.t0){e.next=11;break}return e.next=10,emulators.cache();case 10:e.t0=e.sent;case 11:return s=e.t0,e.next=14,s.get(o);case 14:return a=e.sent,void 0!==r&&r(100),e.abrupt("return",new Uint8Array(a));case 19:return e.prev=19,e.t1=e.catch(3),e.abrupt("return",new Promise(function(e,t){var n=new XMLHttpRequest;n.open("GET",o,!0),n.overrideMimeType("text/plain; charset=x-user-defined"),n.addEventListener("error",function(){t(new Error("Network error, can't download "+o))}),n.addEventListener("abort",function(){t(new Error("Request canceled for url "+o))},!1),n.responseType="arraybuffer",n.onreadystatechange=function(){4===n.readyState&&(200===n.status?(void 0!==r&&r(100),e(new Uint8Array(n.response))):t(new Error("Network error, can't download "+o)))},void 0!==r&&(n.onprogress=function(e){if(e.total&&0<e.total){var t=Math.round(1e4*e.loaded/e.total)/100;r(t)}}),!1===i&&(n.setRequestHeader("Cache-Control","no-cache, no-store, max-age=0"),n.setRequestHeader("Expires","Tue, 01 Jan 1980 1:00:00 GMT"),n.setRequestHeader("Pragma","no-cache")),n.send()}));case 22:case"end":return e.stop()}},e,null,[[3,19]])}),(o=function(){var e=this,s=arguments;return new Promise(function(t,n){var o=a.apply(e,s);function r(e){c(o,t,n,r,i,"next",e)}function i(e){c(o,t,n,r,i,"throw",e)}r(void 0)})}).apply(this,arguments)}e("core-js/modules/es6.typed.uint8-array"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.resolveBundle=function(e,t){return o.apply(this,arguments)}},{"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.promise":114,"core-js/modules/es6.typed.uint8-array":122,"regenerator-runtime/runtime":139}],163:[function(e,t,n){"use strict";e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0}),n.notyf=function(e,t){var r=e.notyf;t.events().onMessage(function(e){if("error"===e){for(var t=arguments.length,n=new Array(1<t?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];r.error({message:JSON.stringify(n)})}})}},{"core-js/modules/es6.object.define-property":111}],164:[function(e,t,n){"use strict";function c(e,t,n,o,r,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(o,r)}function s(a){return function(){var e=this,s=arguments;return new Promise(function(t,n){var o=a.apply(e,s);function r(e){c(o,t,n,r,i,"next",e)}function i(e){c(o,t,n,r,i,"throw",e)}r(void 0)})}}e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var a="emulators-ui-saves";function o(){return(o=s(regeneratorRuntime.mark(function e(t,n){var o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.cache(a);case 2:return o=e.sent,e.abrupt("return",o.get(t).then(function(e){return new Uint8Array(e)}));case 4:case"end":return e.stop()}},e)}))).apply(this,arguments)}n.save=function(o,e,r,i){e.setOnSave(s(regeneratorRuntime.mark(function e(){var t,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.cache(a);case 2:return t=e.sent,e.next=5,r.persist();case 5:return n=e.sent,e.abrupt("return",t.put(o,n.buffer));case 7:case"end":return e.stop()}},e)})))},n.load=function(e,t){return o.apply(this,arguments)}},{"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.promise":114,"core-js/modules/es6.typed.uint8-array":122,"regenerator-runtime/runtime":139}],165:[function(e,t,n){"use strict";function r(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.is-array"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.date.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.array.fill"),e("core-js/modules/es6.object.define-property"),Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.samplesQueue=[]}var t,n,o;return t=e,(n=[{key:"push",value:function(e){this.samplesQueue.push(e)}},{key:"length",value:function(){var e,t=0,n=r(this.samplesQueue);try{for(n.s();!(e=n.n()).done;){t+=e.value.length}}catch(e){n.e(e)}finally{n.f()}return t}},{key:"writeTo",value:function(e,t){for(var n=0;0<this.samplesQueue.length;){var o=this.samplesQueue[0],r=Math.min(t-n,o.length);if(r===o.length?(e.set(o,n),this.samplesQueue.shift()):(e.set(o.slice(0,r),n),this.samplesQueue[0]=o.slice(r)),(n+=r)===t)break}n<t&&e.fill(0,n)}}])&&i(t.prototype,n),o&&i(t,o),e}();n.audioNode=function(e){var t=e.soundFrequency();if(0!==t){var n=null;if("undefined"!=typeof AudioContext?n=new AudioContext({sampleRate:t,latencyHint:"interactive"}):void 0!==window.webkitAudioContext&&(n=new window.webkitAudioContext({sampleRate:t,latencyHint:"interactive"})),null!=n){var s=new c;e.events().onSoundPush(function(e){s.length()<6144&&s.push(e)});var o=n.createScriptProcessor(2048,0,1),a=!1;o.onaudioprocess=function(e){var t=e.outputBuffer.length,n=e.outputBuffer.numberOfChannels,o=s.length();if(a=a||2048<=o)for(var r=0;r<n;r++){var i=e.outputBuffer.getChannelData(r);s.writeTo(i,t)}},o.connect(n.destination);var r=function(){null!==n&&"suspended"===n.state&&n.resume()};document.addEventListener("click",r,{once:!0}),document.addEventListener("touchstart",r,{once:!0}),document.addEventListener("keydown",r,{once:!0}),e.events().onExit(function(){null!==n&&(o.disconnect(),n.close()),document.removeEventListener("click",r),document.removeEventListener("touchstart",r),document.removeEventListener("keydown",r)})}}else console.warn("Can't create audio node with sampleRate === 0, ingnoring")}},{"core-js/modules/es6.array.fill":99,"core-js/modules/es6.array.from":101,"core-js/modules/es6.array.is-array":103,"core-js/modules/es6.date.to-string":106,"core-js/modules/es6.function.name":108,"core-js/modules/es6.object.define-property":111,"core-js/modules/es6.object.to-string":113,"core-js/modules/es6.regexp.to-string":118,"core-js/modules/es6.string.iterator":119,"core-js/modules/es6.symbol":120,"core-js/modules/es7.symbol.async-iterator":124,"core-js/modules/web.dom.iterable":125}]},{},[157]);


!function i(s,a,u){function c(t,e){if(!a[t]){if(!s[t]){var r="function"==typeof require&&require;if(!e&&r)return r(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var o=a[t]={exports:{}};s[t][0].call(o.exports,function(e){return c(s[t][1][e]||e)},o,o.exports,i,s,a,u)}return a[t].exports}for(var l="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],2:[function(e,t,r){var n=e("./_wks")("unscopables"),o=Array.prototype;null==o[n]&&e("./_hide")(o,n,{}),t.exports=function(e){o[n][e]=!0}},{"./_hide":31,"./_wks":99}],3:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);t.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},{"./_string-at":80}],4:[function(e,t,r){t.exports=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e}},{}],5:[function(e,t,r){var n=e("./_is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":39}],6:[function(e,t,r){"use strict";var l=e("./_to-object"),f=e("./_to-absolute-index"),d=e("./_to-length");t.exports=[].copyWithin||function(e,t,r){var n=l(this),o=d(n.length),i=f(e,o),s=f(t,o),a=2<arguments.length?r:void 0,u=Math.min((void 0===a?o:f(a,o))-s,o-i),c=1;for(s<i&&i<s+u&&(c=-1,s+=u-1,i+=u-1);0<u--;)s in n?n[i]=n[s]:delete n[i],i+=c,s+=c;return n}},{"./_to-absolute-index":85,"./_to-length":89,"./_to-object":90}],7:[function(e,t,r){"use strict";var c=e("./_to-object"),l=e("./_to-absolute-index"),f=e("./_to-length");t.exports=function(e,t,r){for(var n=c(this),o=f(n.length),i=arguments.length,s=l(1<i?t:void 0,o),a=2<i?r:void 0,u=void 0===a?o:l(a,o);s<u;)n[s++]=e;return n}},{"./_to-absolute-index":85,"./_to-length":89,"./_to-object":90}],8:[function(e,t,r){var u=e("./_to-iobject"),c=e("./_to-length"),l=e("./_to-absolute-index");t.exports=function(a){return function(e,t,r){var n,o=u(e),i=c(o.length),s=l(r,i);if(a&&t!=t){for(;s<i;)if((n=o[s++])!=n)return!0}else for(;s<i;s++)if((a||s in o)&&o[s]===t)return a||s||0;return!a&&-1}}},{"./_to-absolute-index":85,"./_to-iobject":88,"./_to-length":89}],9:[function(e,t,r){var _=e("./_ctx"),b=e("./_iobject"),w=e("./_to-object"),j=e("./_to-length"),n=e("./_array-species-create");t.exports=function(f,e){var d=1==f,p=2==f,h=3==f,m=4==f,v=6==f,y=5==f||v,g=e||n;return function(e,t,r){for(var n,o,i=w(e),s=b(i),a=_(t,r,3),u=j(s.length),c=0,l=d?g(e,u):p?g(e,0):void 0;c<u;c++)if((y||c in s)&&(o=a(n=s[c],c,i),f))if(d)l[c]=o;else if(o)switch(f){case 3:return!0;case 5:return n;case 6:return c;case 2:l.push(n)}else if(m)return!1;return v?-1:h||m?m:l}}},{"./_array-species-create":11,"./_ctx":16,"./_iobject":36,"./_to-length":89,"./_to-object":90}],10:[function(e,t,r){var n=e("./_is-object"),o=e("./_is-array"),i=e("./_wks")("species");t.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),n(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},{"./_is-array":38,"./_is-object":39,"./_wks":99}],11:[function(e,t,r){var n=e("./_array-species-constructor");t.exports=function(e,t){return new(n(e))(t)}},{"./_array-species-constructor":10}],12:[function(e,t,r){var o=e("./_cof"),i=e("./_wks")("toStringTag"),s="Arguments"==o(function(){return arguments}());t.exports=function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),i))?r:s?o(t):"Object"==(n=o(t))&&"function"==typeof t.callee?"Arguments":n}},{"./_cof":13,"./_wks":99}],13:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],14:[function(e,t,r){var n=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},{}],15:[function(e,t,r){"use strict";var n=e("./_object-dp"),o=e("./_property-desc");t.exports=function(e,t,r){t in e?n.f(e,t,o(0,r)):e[t]=r}},{"./_object-dp":54,"./_property-desc":69}],16:[function(e,t,r){var i=e("./_a-function");t.exports=function(n,o,e){if(i(n),void 0===o)return n;switch(e){case 1:return function(e){return n.call(o,e)};case 2:return function(e,t){return n.call(o,e,t)};case 3:return function(e,t,r){return n.call(o,e,t,r)}}return function(){return n.apply(o,arguments)}}},{"./_a-function":1}],17:[function(e,t,r){t.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},{}],18:[function(e,t,r){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":24}],19:[function(e,t,r){var n=e("./_is-object"),o=e("./_global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./_global":29,"./_is-object":39}],20:[function(e,t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],21:[function(e,t,r){var a=e("./_object-keys"),u=e("./_object-gops"),c=e("./_object-pie");t.exports=function(e){var t=a(e),r=u.f;if(r)for(var n,o=r(e),i=c.f,s=0;o.length>s;)i.call(e,n=o[s++])&&t.push(n);return t}},{"./_object-gops":59,"./_object-keys":62,"./_object-pie":63}],22:[function(e,t,r){var m=e("./_global"),v=e("./_core"),y=e("./_hide"),g=e("./_redefine"),_=e("./_ctx"),b="prototype",w=function(e,t,r){var n,o,i,s,a=e&w.F,u=e&w.G,c=e&w.S,l=e&w.P,f=e&w.B,d=u?m:c?m[t]||(m[t]={}):(m[t]||{})[b],p=u?v:v[t]||(v[t]={}),h=p[b]||(p[b]={});for(n in u&&(r=t),r)i=((o=!a&&d&&void 0!==d[n])?d:r)[n],s=f&&o?_(i,m):l&&"function"==typeof i?_(Function.call,i):i,d&&g(d,n,i,e&w.U),p[n]!=i&&y(p,n,s),l&&h[n]!=i&&(h[n]=i)};m.core=v,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128,t.exports=w},{"./_core":14,"./_ctx":16,"./_global":29,"./_hide":31,"./_redefine":71}],23:[function(e,t,r){var n=e("./_wks")("match");t.exports=function(t){var r=/./;try{"/./"[t](r)}catch(e){try{return r[n]=!1,!"/./"[t](r)}catch(e){}}return!0}},{"./_wks":99}],24:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(e){return!0}}},{}],25:[function(e,t,r){"use strict";e("./es6.regexp.exec");var l=e("./_redefine"),f=e("./_hide"),d=e("./_fails"),p=e("./_defined"),h=e("./_wks"),m=e("./_regexp-exec"),v=h("species"),y=!d(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),g=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(r,e,t){var n=h(r),i=!d(function(){var e={};return e[n]=function(){return 7},7!=""[r](e)}),o=i?!d(function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},"split"===r&&(t.constructor={},t.constructor[v]=function(){return t}),t[n](""),!e}):void 0;if(!i||!o||"replace"===r&&!y||"split"===r&&!g){var s=/./[n],a=t(p,n,""[r],function(e,t,r,n,o){return t.exec===m?i&&!o?{done:!0,value:s.call(t,r,n)}:{done:!0,value:e.call(r,t,n)}:{done:!1}}),u=a[0],c=a[1];l(String.prototype,r,u),f(RegExp.prototype,n,2==e?function(e,t){return c.call(e,this,t)}:function(e){return c.call(e,this)})}}},{"./_defined":17,"./_fails":24,"./_hide":31,"./_redefine":71,"./_regexp-exec":73,"./_wks":99,"./es6.regexp.exec":115}],26:[function(e,t,r){"use strict";var n=e("./_an-object");t.exports=function(){var e=n(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},{"./_an-object":5}],27:[function(e,t,r){var d=e("./_ctx"),p=e("./_iter-call"),h=e("./_is-array-iter"),m=e("./_an-object"),v=e("./_to-length"),y=e("./core.get-iterator-method"),g={},_={};(r=t.exports=function(e,t,r,n,o){var i,s,a,u,c=o?function(){return e}:y(e),l=d(r,n,t?2:1),f=0;if("function"!=typeof c)throw TypeError(e+" is not iterable!");if(h(c)){for(i=v(e.length);f<i;f++)if((u=t?l(m(s=e[f])[0],s[1]):l(e[f]))===g||u===_)return u}else for(a=c.call(e);!(s=a.next()).done;)if((u=p(a,l,s.value,t))===g||u===_)return u}).BREAK=g,r.RETURN=_},{"./_an-object":5,"./_ctx":16,"./_is-array-iter":37,"./_iter-call":41,"./_to-length":89,"./core.get-iterator-method":100}],28:[function(e,t,r){t.exports=e("./_shared")("native-function-to-string",Function.toString)},{"./_shared":78}],29:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],30:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],31:[function(e,t,r){var n=e("./_object-dp"),o=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./_descriptors":18,"./_object-dp":54,"./_property-desc":69}],32:[function(e,t,r){var n=e("./_global").document;t.exports=n&&n.documentElement},{"./_global":29}],33:[function(e,t,r){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":18,"./_dom-create":19,"./_fails":24}],34:[function(e,t,r){var i=e("./_is-object"),s=e("./_set-proto").set;t.exports=function(e,t,r){var n,o=t.constructor;return o!==r&&"function"==typeof o&&(n=o.prototype)!==r.prototype&&i(n)&&s&&s(e,n),e}},{"./_is-object":39,"./_set-proto":74}],35:[function(e,t,r){t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)}},{}],36:[function(e,t,r){var n=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./_cof":13}],37:[function(e,t,r){var n=e("./_iterators"),o=e("./_wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},{"./_iterators":46,"./_wks":99}],38:[function(e,t,r){var n=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==n(e)}},{"./_cof":13}],39:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],40:[function(e,t,r){var n=e("./_is-object"),o=e("./_cof"),i=e("./_wks")("match");t.exports=function(e){var t;return n(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},{"./_cof":13,"./_is-object":39,"./_wks":99}],41:[function(e,t,r){var i=e("./_an-object");t.exports=function(t,e,r,n){try{return n?e(i(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&i(o.call(t)),e}}},{"./_an-object":5}],42:[function(e,t,r){"use strict";var n=e("./_object-create"),o=e("./_property-desc"),i=e("./_set-to-string-tag"),s={};e("./_hide")(s,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(s,{next:o(1,r)}),i(e,t+" Iterator")}},{"./_hide":31,"./_object-create":53,"./_property-desc":69,"./_set-to-string-tag":76,"./_wks":99}],43:[function(e,t,r){"use strict";function _(){return this}var b=e("./_library"),w=e("./_export"),j=e("./_redefine"),x=e("./_hide"),k=e("./_iterators"),S=e("./_iter-create"),P=e("./_set-to-string-tag"),M=e("./_object-gpo"),E=e("./_wks")("iterator"),O=!([].keys&&"next"in[].keys()),I="values";t.exports=function(e,t,r,n,o,i,s){S(r,t,n);function a(e){if(!O&&e in h)return h[e];switch(e){case"keys":case I:return function(){return new r(this,e)}}return function(){return new r(this,e)}}var u,c,l,f=t+" Iterator",d=o==I,p=!1,h=e.prototype,m=h[E]||h["@@iterator"]||o&&h[o],v=m||a(o),y=o?d?a("entries"):v:void 0,g="Array"==t&&h.entries||m;if(g&&(l=M(g.call(new e)))!==Object.prototype&&l.next&&(P(l,f,!0),b||"function"==typeof l[E]||x(l,E,_)),d&&m&&m.name!==I&&(p=!0,v=function(){return m.call(this)}),b&&!s||!O&&!p&&h[E]||x(h,E,v),k[t]=v,k[f]=_,o)if(u={values:d?v:a(I),keys:i?v:a("keys"),entries:y},s)for(c in u)c in h||j(h,c,u[c]);else w(w.P+w.F*(O||p),t,u);return u}},{"./_export":22,"./_hide":31,"./_iter-create":42,"./_iterators":46,"./_library":47,"./_object-gpo":60,"./_redefine":71,"./_set-to-string-tag":76,"./_wks":99}],44:[function(e,t,r){var i=e("./_wks")("iterator"),s=!1;try{var n=[7][i]();n.return=function(){s=!0},Array.from(n,function(){throw 2})}catch(e){}t.exports=function(e,t){if(!t&&!s)return!1;var r=!1;try{var n=[7],o=n[i]();o.next=function(){return{done:r=!0}},n[i]=function(){return o},e(n)}catch(e){}return r}},{"./_wks":99}],45:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],46:[function(e,t,r){t.exports={}},{}],47:[function(e,t,r){t.exports=!1},{}],48:[function(e,t,r){var i=e("./_math-sign"),n=Math.pow,s=n(2,-52),a=n(2,-23),u=n(2,127)*(2-a),c=n(2,-126);t.exports=Math.fround||function(e){var t,r,n=Math.abs(e),o=i(e);return n<c?o*(n/c/a+1/s-1/s)*c*a:u<(r=(t=(1+a/s)*n)-(t-n))||r!=r?o*(1/0):o*r}},{"./_math-sign":49}],49:[function(e,t,r){t.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},{}],50:[function(e,t,r){function n(e){a(e,o,{value:{i:"O"+ ++u,w:{}}})}var o=e("./_uid")("meta"),i=e("./_is-object"),s=e("./_has"),a=e("./_object-dp").f,u=0,c=Object.isExtensible||function(){return!0},l=!e("./_fails")(function(){return c(Object.preventExtensions({}))}),f=t.exports={KEY:o,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!s(e,o)){if(!c(e))return"F";if(!t)return"E";n(e)}return e[o].i},getWeak:function(e,t){if(!s(e,o)){if(!c(e))return!0;if(!t)return!1;n(e)}return e[o].w},onFreeze:function(e){return l&&f.NEED&&c(e)&&!s(e,o)&&n(e),e}}},{"./_fails":24,"./_has":30,"./_is-object":39,"./_object-dp":54,"./_uid":95}],51:[function(e,t,r){var a=e("./_global"),u=e("./_task").set,c=a.MutationObserver||a.WebKitMutationObserver,l=a.process,f=a.Promise,d="process"==e("./_cof")(l);t.exports=function(){function e(){var e,t;for(d&&(e=l.domain)&&e.exit();r;){t=r.fn,r=r.next;try{t()}catch(e){throw r?o():n=void 0,e}}n=void 0,e&&e.enter()}var r,n,o;if(d)o=function(){l.nextTick(e)};else if(!c||a.navigator&&a.navigator.standalone)if(f&&f.resolve){var t=f.resolve(void 0);o=function(){t.then(e)}}else o=function(){u.call(a,e)};else{var i=!0,s=document.createTextNode("");new c(e).observe(s,{characterData:!0}),o=function(){s.data=i=!i}}return function(e){var t={fn:e,next:void 0};n&&(n.next=t),r||(r=t,o()),n=t}}},{"./_cof":13,"./_global":29,"./_task":84}],52:[function(e,t,r){"use strict";var o=e("./_a-function");function n(e){var r,n;this.promise=new e(function(e,t){if(void 0!==r||void 0!==n)throw TypeError("Bad Promise constructor");r=e,n=t}),this.resolve=o(r),this.reject=o(n)}t.exports.f=function(e){return new n(e)}},{"./_a-function":1}],53:[function(n,e,t){function o(){}var i=n("./_an-object"),s=n("./_object-dps"),a=n("./_enum-bug-keys"),u=n("./_shared-key")("IE_PROTO"),c="prototype",l=function(){var e,t=n("./_dom-create")("iframe"),r=a.length;for(t.style.display="none",n("./_html").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l[c][a[r]];return l()};e.exports=Object.create||function(e,t){var r;return null!==e?(o[c]=i(e),r=new o,o[c]=null,r[u]=e):r=l(),void 0===t?r:s(r,t)}},{"./_an-object":5,"./_dom-create":19,"./_enum-bug-keys":20,"./_html":32,"./_object-dps":55,"./_shared-key":77}],54:[function(e,t,r){var n=e("./_an-object"),o=e("./_ie8-dom-define"),i=e("./_to-primitive"),s=Object.defineProperty;r.f=e("./_descriptors")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return s(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},{"./_an-object":5,"./_descriptors":18,"./_ie8-dom-define":33,"./_to-primitive":91}],55:[function(e,t,r){var s=e("./_object-dp"),a=e("./_an-object"),u=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){a(e);for(var r,n=u(t),o=n.length,i=0;i<o;)s.f(e,r=n[i++],t[r]);return e}},{"./_an-object":5,"./_descriptors":18,"./_object-dp":54,"./_object-keys":62}],56:[function(e,t,r){var n=e("./_object-pie"),o=e("./_property-desc"),i=e("./_to-iobject"),s=e("./_to-primitive"),a=e("./_has"),u=e("./_ie8-dom-define"),c=Object.getOwnPropertyDescriptor;r.f=e("./_descriptors")?c:function(e,t){if(e=i(e),t=s(t,!0),u)try{return c(e,t)}catch(e){}if(a(e,t))return o(!n.f.call(e,t),e[t])}},{"./_descriptors":18,"./_has":30,"./_ie8-dom-define":33,"./_object-pie":63,"./_property-desc":69,"./_to-iobject":88,"./_to-primitive":91}],57:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_object-gopn").f,i={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(e){return s&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return s.slice()}}(e):o(n(e))}},{"./_object-gopn":58,"./_to-iobject":88}],58:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys").concat("length","prototype");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},{"./_enum-bug-keys":20,"./_object-keys-internal":61}],59:[function(e,t,r){r.f=Object.getOwnPropertySymbols},{}],60:[function(e,t,r){var n=e("./_has"),o=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?s:null}},{"./_has":30,"./_shared-key":77,"./_to-object":90}],61:[function(e,t,r){var s=e("./_has"),a=e("./_to-iobject"),u=e("./_array-includes")(!1),c=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var r,n=a(e),o=0,i=[];for(r in n)r!=c&&s(n,r)&&i.push(r);for(;t.length>o;)s(n,r=t[o++])&&(~u(i,r)||i.push(r));return i}},{"./_array-includes":8,"./_has":30,"./_shared-key":77,"./_to-iobject":88}],62:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return n(e,o)}},{"./_enum-bug-keys":20,"./_object-keys-internal":61}],63:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],64:[function(e,t,r){var o=e("./_export"),i=e("./_core"),s=e("./_fails");t.exports=function(e,t){var r=(i.Object||{})[e]||Object[e],n={};n[e]=t(r),o(o.S+o.F*s(function(){r(1)}),"Object",n)}},{"./_core":14,"./_export":22,"./_fails":24}],65:[function(e,t,r){var n=e("./_object-gopn"),o=e("./_object-gops"),i=e("./_an-object"),s=e("./_global").Reflect;t.exports=s&&s.ownKeys||function(e){var t=n.f(i(e)),r=o.f;return r?t.concat(r(e)):t}},{"./_an-object":5,"./_global":29,"./_object-gopn":58,"./_object-gops":59}],66:[function(e,t,r){var n=e("./_global").parseInt,o=e("./_string-trim").trim,i=e("./_string-ws"),s=/^[-+]?0[xX]/;t.exports=8!==n(i+"08")||22!==n(i+"0x16")?function(e,t){var r=o(String(e),3);return n(r,t>>>0||(s.test(r)?16:10))}:n},{"./_global":29,"./_string-trim":82,"./_string-ws":83}],67:[function(e,t,r){t.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},{}],68:[function(e,t,r){var n=e("./_an-object"),o=e("./_is-object"),i=e("./_new-promise-capability");t.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=i.f(e);return(0,r.resolve)(t),r.promise}},{"./_an-object":5,"./_is-object":39,"./_new-promise-capability":52}],69:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],70:[function(e,t,r){var o=e("./_redefine");t.exports=function(e,t,r){for(var n in t)o(e,n,t[n],r);return e}},{"./_redefine":71}],71:[function(e,t,r){var i=e("./_global"),s=e("./_hide"),a=e("./_has"),u=e("./_uid")("src"),n=e("./_function-to-string"),o="toString",c=(""+n).split(o);e("./_core").inspectSource=function(e){return n.call(e)},(t.exports=function(e,t,r,n){var o="function"==typeof r;o&&(a(r,"name")||s(r,"name",t)),e[t]!==r&&(o&&(a(r,u)||s(r,u,e[t]?""+e[t]:c.join(String(t)))),e===i?e[t]=r:n?e[t]?e[t]=r:s(e,t,r):(delete e[t],s(e,t,r)))})(Function.prototype,o,function(){return"function"==typeof this&&this[u]||n.call(this)})},{"./_core":14,"./_function-to-string":28,"./_global":29,"./_has":30,"./_hide":31,"./_uid":95}],72:[function(e,t,r){"use strict";var o=e("./_classof"),i=RegExp.prototype.exec;t.exports=function(e,t){var r=e.exec;if("function"==typeof r){var n=r.call(e,t);if("object"!=typeof n)throw new TypeError("RegExp exec method returned something other than an Object or null");return n}if("RegExp"!==o(e))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},{"./_classof":12}],73:[function(e,t,r){"use strict";var n,o,s=e("./_flags"),a=RegExp.prototype.exec,u=String.prototype.replace,i=a,c="lastIndex",l=(n=/a/,o=/b*/g,a.call(n,"a"),a.call(o,"a"),0!==n[c]||0!==o[c]),f=void 0!==/()??/.exec("")[1];(l||f)&&(i=function(e){var t,r,n,o,i=this;return f&&(r=new RegExp("^"+i.source+"$(?!\\s)",s.call(i))),l&&(t=i[c]),n=a.call(i,e),l&&n&&(i[c]=i.global?n.index+n[0].length:t),f&&n&&1<n.length&&u.call(n[0],r,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)}),n}),t.exports=i},{"./_flags":26}],74:[function(t,e,r){function o(e,t){if(i(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")}var n=t("./_is-object"),i=t("./_an-object");e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,r,n){try{(n=t("./_ctx")(Function.call,t("./_object-gopd").f(Object.prototype,"__proto__").set,2))(e,[]),r=!(e instanceof Array)}catch(e){r=!0}return function(e,t){return o(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:o}},{"./_an-object":5,"./_ctx":16,"./_is-object":39,"./_object-gopd":56}],75:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_object-dp"),i=e("./_descriptors"),s=e("./_wks")("species");t.exports=function(e){var t=n[e];i&&t&&!t[s]&&o.f(t,s,{configurable:!0,get:function(){return this}})}},{"./_descriptors":18,"./_global":29,"./_object-dp":54,"./_wks":99}],76:[function(e,t,r){var n=e("./_object-dp").f,o=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./_has":30,"./_object-dp":54,"./_wks":99}],77:[function(e,t,r){var n=e("./_shared")("keys"),o=e("./_uid");t.exports=function(e){return n[e]||(n[e]=o(e))}},{"./_shared":78,"./_uid":95}],78:[function(e,t,r){var n=e("./_core"),o=e("./_global"),i="__core-js_shared__",s=o[i]||(o[i]={});(t.exports=function(e,t){return s[e]||(s[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:e("./_library")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},{"./_core":14,"./_global":29,"./_library":47}],79:[function(e,t,r){var o=e("./_an-object"),i=e("./_a-function"),s=e("./_wks")("species");t.exports=function(e,t){var r,n=o(e).constructor;return void 0===n||null==(r=o(n)[s])?t:i(r)}},{"./_a-function":1,"./_an-object":5,"./_wks":99}],80:[function(e,t,r){var u=e("./_to-integer"),c=e("./_defined");t.exports=function(a){return function(e,t){var r,n,o=String(c(e)),i=u(t),s=o.length;return i<0||s<=i?a?"":void 0:(r=o.charCodeAt(i))<55296||56319<r||i+1===s||(n=o.charCodeAt(i+1))<56320||57343<n?a?o.charAt(i):r:a?o.slice(i,i+2):n-56320+(r-55296<<10)+65536}}},{"./_defined":17,"./_to-integer":87}],81:[function(e,t,r){var n=e("./_is-regexp"),o=e("./_defined");t.exports=function(e,t,r){if(n(t))throw TypeError("String#"+r+" doesn't accept regex!");return String(o(e))}},{"./_defined":17,"./_is-regexp":40}],82:[function(e,t,r){function n(e,t,r){var n={},o=a(function(){return!!u[e]()||"​"!="​"[e]()}),i=n[e]=o?t(f):u[e];r&&(n[r]=i),s(s.P+s.F*o,"String",n)}var s=e("./_export"),o=e("./_defined"),a=e("./_fails"),u=e("./_string-ws"),i="["+u+"]",c=RegExp("^"+i+i+"*"),l=RegExp(i+i+"*$"),f=n.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(c,"")),2&t&&(e=e.replace(l,"")),e};t.exports=n},{"./_defined":17,"./_export":22,"./_fails":24,"./_string-ws":83}],83:[function(e,t,r){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],84:[function(e,t,r){function n(){var e=+this;if(_.hasOwnProperty(e)){var t=_[e];delete _[e],t()}}function o(e){n.call(e.data)}var i,s,a,u=e("./_ctx"),c=e("./_invoke"),l=e("./_html"),f=e("./_dom-create"),d=e("./_global"),p=d.process,h=d.setImmediate,m=d.clearImmediate,v=d.MessageChannel,y=d.Dispatch,g=0,_={},b="onreadystatechange";h&&m||(h=function(e){for(var t=[],r=1;r<arguments.length;)t.push(arguments[r++]);return _[++g]=function(){c("function"==typeof e?e:Function(e),t)},i(g),g},m=function(e){delete _[e]},"process"==e("./_cof")(p)?i=function(e){p.nextTick(u(n,e,1))}:y&&y.now?i=function(e){y.now(u(n,e,1))}:v?(a=(s=new v).port2,s.port1.onmessage=o,i=u(a.postMessage,a,1)):d.addEventListener&&"function"==typeof postMessage&&!d.importScripts?(i=function(e){d.postMessage(e+"","*")},d.addEventListener("message",o,!1)):i=b in f("script")?function(e){l.appendChild(f("script"))[b]=function(){l.removeChild(this),n.call(e)}}:function(e){setTimeout(u(n,e,1),0)}),t.exports={set:h,clear:m}},{"./_cof":13,"./_ctx":16,"./_dom-create":19,"./_global":29,"./_html":32,"./_invoke":35}],85:[function(e,t,r){var n=e("./_to-integer"),o=Math.max,i=Math.min;t.exports=function(e,t){return(e=n(e))<0?o(e+t,0):i(e,t)}},{"./_to-integer":87}],86:[function(e,t,r){var n=e("./_to-integer"),o=e("./_to-length");t.exports=function(e){if(void 0===e)return 0;var t=n(e),r=o(t);if(t!==r)throw RangeError("Wrong length!");return r}},{"./_to-integer":87,"./_to-length":89}],87:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(0<e?o:n)(e)}},{}],88:[function(e,t,r){var n=e("./_iobject"),o=e("./_defined");t.exports=function(e){return n(o(e))}},{"./_defined":17,"./_iobject":36}],89:[function(e,t,r){var n=e("./_to-integer"),o=Math.min;t.exports=function(e){return 0<e?o(n(e),9007199254740991):0}},{"./_to-integer":87}],90:[function(e,t,r){var n=e("./_defined");t.exports=function(e){return Object(n(e))}},{"./_defined":17}],91:[function(e,t,r){var o=e("./_is-object");t.exports=function(e,t){if(!o(e))return e;var r,n;if(t&&"function"==typeof(r=e.toString)&&!o(n=r.call(e)))return n;if("function"==typeof(r=e.valueOf)&&!o(n=r.call(e)))return n;if(!t&&"function"==typeof(r=e.toString)&&!o(n=r.call(e)))return n;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":39}],92:[function(e,t,r){"use strict";if(e("./_descriptors")){var y=e("./_library"),g=e("./_global"),_=e("./_fails"),b=e("./_export"),w=e("./_typed"),n=e("./_typed-buffer"),h=e("./_ctx"),j=e("./_an-instance"),o=e("./_property-desc"),x=e("./_hide"),i=e("./_redefine-all"),s=e("./_to-integer"),k=e("./_to-length"),S=e("./_to-index"),a=e("./_to-absolute-index"),u=e("./_to-primitive"),c=e("./_has"),P=e("./_classof"),M=e("./_is-object"),m=e("./_to-object"),v=e("./_is-array-iter"),E=e("./_object-create"),O=e("./_object-gpo"),I=e("./_object-gopn").f,A=e("./core.get-iterator-method"),l=e("./_uid"),f=e("./_wks"),d=e("./_array-methods"),p=e("./_array-includes"),T=e("./_species-constructor"),C=e("./es6.array.iterator"),R=e("./_iterators"),F=e("./_iter-detect"),D=e("./_set-species"),L=e("./_array-fill"),N=e("./_array-copy-within"),z=e("./_object-dp"),W=e("./_object-gopd"),U=z.f,q=W.f,B=g.RangeError,H=g.TypeError,G=g.Uint8Array,V="ArrayBuffer",K="Shared"+V,Y="BYTES_PER_ELEMENT",$="prototype",J=Array[$],Q=n.ArrayBuffer,X=n.DataView,Z=d(0),ee=d(2),te=d(3),re=d(4),ne=d(5),oe=d(6),ie=p(!0),se=p(!1),ae=C.values,ue=C.keys,ce=C.entries,le=J.lastIndexOf,fe=J.reduce,de=J.reduceRight,pe=J.join,he=J.sort,me=J.slice,ve=J.toString,ye=J.toLocaleString,ge=f("iterator"),_e=f("toStringTag"),be=l("typed_constructor"),we=l("def_constructor"),je=w.CONSTR,xe=w.TYPED,ke=w.VIEW,Se="Wrong length!",Pe=d(1,function(e,t){return Ae(T(e,e[we]),t)}),Me=_(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),Ee=!!G&&!!G[$].set&&_(function(){new G(1).set({})}),Oe=function(e,t){var r=s(e);if(r<0||r%t)throw B("Wrong offset!");return r},Ie=function(e){if(M(e)&&xe in e)return e;throw H(e+" is not a typed array!")},Ae=function(e,t){if(!(M(e)&&be in e))throw H("It is not a typed array constructor!");return new e(t)},Te=function(e,t){return Ce(T(e,e[we]),t)},Ce=function(e,t){for(var r=0,n=t.length,o=Ae(e,n);r<n;)o[r]=t[r++];return o},Re=function(e,t,r){U(e,t,{get:function(){return this._d[r]}})},Fe=function(e,t,r){var n,o,i,s,a,u,c=m(e),l=arguments.length,f=1<l?t:void 0,d=void 0!==f,p=A(c);if(null!=p&&!v(p)){for(u=p.call(c),i=[],n=0;!(a=u.next()).done;n++)i.push(a.value);c=i}for(d&&2<l&&(f=h(f,r,2)),n=0,o=k(c.length),s=Ae(this,o);n<o;n++)s[n]=d?f(c[n],n):c[n];return s},De=function(){for(var e=0,t=arguments.length,r=Ae(this,t);e<t;)r[e]=arguments[e++];return r},Le=!!G&&_(function(){ye.call(new G(1))}),Ne=function(){return ye.apply(Le?me.call(Ie(this)):Ie(this),arguments)},ze={copyWithin:function(e,t,r){return N.call(Ie(this),e,t,2<arguments.length?r:void 0)},every:function(e,t){return re(Ie(this),e,1<arguments.length?t:void 0)},fill:function(e){return L.apply(Ie(this),arguments)},filter:function(e,t){return Te(this,ee(Ie(this),e,1<arguments.length?t:void 0))},find:function(e,t){return ne(Ie(this),e,1<arguments.length?t:void 0)},findIndex:function(e,t){return oe(Ie(this),e,1<arguments.length?t:void 0)},forEach:function(e,t){Z(Ie(this),e,1<arguments.length?t:void 0)},indexOf:function(e,t){return se(Ie(this),e,1<arguments.length?t:void 0)},includes:function(e,t){return ie(Ie(this),e,1<arguments.length?t:void 0)},join:function(e){return pe.apply(Ie(this),arguments)},lastIndexOf:function(e){return le.apply(Ie(this),arguments)},map:function(e,t){return Pe(Ie(this),e,1<arguments.length?t:void 0)},reduce:function(e){return fe.apply(Ie(this),arguments)},reduceRight:function(e){return de.apply(Ie(this),arguments)},reverse:function(){for(var e,t=this,r=Ie(t).length,n=Math.floor(r/2),o=0;o<n;)e=t[o],t[o++]=t[--r],t[r]=e;return t},some:function(e,t){return te(Ie(this),e,1<arguments.length?t:void 0)},sort:function(e){return he.call(Ie(this),e)},subarray:function(e,t){var r=Ie(this),n=r.length,o=a(e,n);return new(T(r,r[we]))(r.buffer,r.byteOffset+o*r.BYTES_PER_ELEMENT,k((void 0===t?n:a(t,n))-o))}},We=function(e,t){return Te(this,me.call(Ie(this),e,t))},Ue=function(e,t){Ie(this);var r=Oe(t,1),n=this.length,o=m(e),i=k(o.length),s=0;if(n<i+r)throw B(Se);for(;s<i;)this[r+s]=o[s++]},qe={entries:function(){return ce.call(Ie(this))},keys:function(){return ue.call(Ie(this))},values:function(){return ae.call(Ie(this))}},Be=function(e,t){return M(e)&&e[xe]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},He=function(e,t){return Be(e,t=u(t,!0))?o(2,e[t]):q(e,t)},Ge=function(e,t,r){return!(Be(e,t=u(t,!0))&&M(r)&&c(r,"value"))||c(r,"get")||c(r,"set")||r.configurable||c(r,"writable")&&!r.writable||c(r,"enumerable")&&!r.enumerable?U(e,t,r):(e[t]=r.value,e)};je||(W.f=He,z.f=Ge),b(b.S+b.F*!je,"Object",{getOwnPropertyDescriptor:He,defineProperty:Ge}),_(function(){ve.call({})})&&(ve=ye=function(){return pe.call(this)});var Ve=i({},ze);i(Ve,qe),x(Ve,ge,qe.values),i(Ve,{slice:We,set:Ue,constructor:function(){},toString:ve,toLocaleString:Ne}),Re(Ve,"buffer","b"),Re(Ve,"byteOffset","o"),Re(Ve,"byteLength","l"),Re(Ve,"length","e"),U(Ve,_e,{get:function(){return this[xe]}}),t.exports=function(e,f,t,i){function d(e,o){U(e,o,{get:function(){return e=o,(t=this._d).v[r](e*f+t.o,Me);var e,t},set:function(e){return t=o,r=e,n=this._d,i&&(r=(r=Math.round(r))<0?0:255<r?255:255&r),void n.v[s](t*f+n.o,r,Me);var t,r,n},enumerable:!0})}var p=e+((i=!!i)?"Clamped":"")+"Array",r="get"+e,s="set"+e,h=g[p],a=h||{},n=h&&O(h),o=!h||!w.ABV,u={},c=h&&h[$];o?(h=t(function(e,t,r,n){j(e,h,p,"_d");var o,i,s,a,u=0,c=0;if(M(t)){if(!(t instanceof Q||(a=P(t))==V||a==K))return xe in t?Ce(h,t):Fe.call(h,t);o=t,c=Oe(r,f);var l=t.byteLength;if(void 0===n){if(l%f)throw B(Se);if((i=l-c)<0)throw B(Se)}else if(l<(i=k(n)*f)+c)throw B(Se);s=i/f}else s=S(t),o=new Q(i=s*f);for(x(e,"_d",{b:o,o:c,l:i,e:s,v:new X(o)});u<s;)d(e,u++)}),c=h[$]=E(Ve),x(c,"constructor",h)):_(function(){h(1)})&&_(function(){new h(-1)})&&F(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=t(function(e,t,r,n){var o;return j(e,h,p),M(t)?t instanceof Q||(o=P(t))==V||o==K?void 0!==n?new a(t,Oe(r,f),n):void 0!==r?new a(t,Oe(r,f)):new a(t):xe in t?Ce(h,t):Fe.call(h,t):new a(S(t))}),Z(n!==Function.prototype?I(a).concat(I(n)):I(a),function(e){e in h||x(h,e,a[e])}),h[$]=c,y||(c.constructor=h));var l=c[ge],m=!!l&&("values"==l.name||null==l.name),v=qe.values;x(h,be,!0),x(c,xe,p),x(c,ke,!0),x(c,we,h),(i?new h(1)[_e]==p:_e in c)||U(c,_e,{get:function(){return p}}),u[p]=h,b(b.G+b.W+b.F*(h!=a),u),b(b.S,p,{BYTES_PER_ELEMENT:f}),b(b.S+b.F*_(function(){a.of.call(h,1)}),p,{from:Fe,of:De}),Y in c||x(c,Y,f),b(b.P,p,ze),D(p),b(b.P+b.F*Ee,p,{set:Ue}),b(b.P+b.F*!m,p,qe),y||c.toString==ve||(c.toString=ve),b(b.P+b.F*_(function(){new h(1).slice()}),p,{slice:We}),b(b.P+b.F*(_(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!_(function(){c.toLocaleString.call([1,2])})),p,{toLocaleString:Ne}),R[p]=m?l:v,y||m||x(c,ge,v)}}else t.exports=function(){}},{"./_an-instance":4,"./_array-copy-within":6,"./_array-fill":7,"./_array-includes":8,"./_array-methods":9,"./_classof":12,"./_ctx":16,"./_descriptors":18,"./_export":22,"./_fails":24,"./_global":29,"./_has":30,"./_hide":31,"./_is-array-iter":37,"./_is-object":39,"./_iter-detect":44,"./_iterators":46,"./_library":47,"./_object-create":53,"./_object-dp":54,"./_object-gopd":56,"./_object-gopn":58,"./_object-gpo":60,"./_property-desc":69,"./_redefine-all":70,"./_set-species":75,"./_species-constructor":79,"./_to-absolute-index":85,"./_to-index":86,"./_to-integer":87,"./_to-length":89,"./_to-object":90,"./_to-primitive":91,"./_typed":94,"./_typed-buffer":93,"./_uid":95,"./_wks":99,"./core.get-iterator-method":100,"./es6.array.iterator":103}],93:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_descriptors"),i=e("./_library"),s=e("./_typed"),a=e("./_hide"),u=e("./_redefine-all"),c=e("./_fails"),l=e("./_an-instance"),f=e("./_to-integer"),d=e("./_to-length"),p=e("./_to-index"),h=e("./_object-gopn").f,m=e("./_object-dp").f,v=e("./_array-fill"),y=e("./_set-to-string-tag"),g="ArrayBuffer",_="DataView",b="prototype",w="Wrong index!",j=n[g],x=n[_],k=n.Math,S=n.RangeError,P=n.Infinity,M=j,E=k.abs,O=k.pow,I=k.floor,A=k.log,T=k.LN2,C="byteLength",R="byteOffset",F=o?"_b":"buffer",D=o?"_l":C,L=o?"_o":R;function N(e,t,r){var n,o,i,s=new Array(r),a=8*r-t-1,u=(1<<a)-1,c=u>>1,l=23===t?O(2,-24)-O(2,-77):0,f=0,d=e<0||0===e&&1/e<0?1:0;for((e=E(e))!=e||e===P?(o=e!=e?1:0,n=u):(n=I(A(e)/T),e*(i=O(2,-n))<1&&(n--,i*=2),2<=(e+=1<=n+c?l/i:l*O(2,1-c))*i&&(n++,i/=2),u<=n+c?(o=0,n=u):1<=n+c?(o=(e*i-1)*O(2,t),n+=c):(o=e*O(2,c-1)*O(2,t),n=0));8<=t;s[f++]=255&o,o/=256,t-=8);for(n=n<<t|o,a+=t;0<a;s[f++]=255&n,n/=256,a-=8);return s[--f]|=128*d,s}function z(e,t,r){var n,o=8*r-t-1,i=(1<<o)-1,s=i>>1,a=o-7,u=r-1,c=e[u--],l=127&c;for(c>>=7;0<a;l=256*l+e[u],u--,a-=8);for(n=l&(1<<-a)-1,l>>=-a,a+=t;0<a;n=256*n+e[u],u--,a-=8);if(0===l)l=1-s;else{if(l===i)return n?NaN:c?-P:P;n+=O(2,t),l-=s}return(c?-1:1)*n*O(2,l-t)}function W(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function U(e){return[255&e]}function q(e){return[255&e,e>>8&255]}function B(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function H(e){return N(e,52,8)}function G(e){return N(e,23,4)}function V(e,t,r){m(e[b],t,{get:function(){return this[r]}})}function K(e,t,r,n){var o=p(+r);if(o+t>e[D])throw S(w);var i=e[F]._b,s=o+e[L],a=i.slice(s,s+t);return n?a:a.reverse()}function Y(e,t,r,n,o,i){var s=p(+r);if(s+t>e[D])throw S(w);for(var a=e[F]._b,u=s+e[L],c=n(+o),l=0;l<t;l++)a[u+l]=c[i?l:t-l-1]}if(s.ABV){if(!c(function(){j(1)})||!c(function(){new j(-1)})||c(function(){return new j,new j(1.5),new j(NaN),j.name!=g})){for(var $,J=(j=function(e){return l(this,j),new M(p(e))})[b]=M[b],Q=h(M),X=0;Q.length>X;)($=Q[X++])in j||a(j,$,M[$]);i||(J.constructor=j)}var Z=new x(new j(2)),ee=x[b].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||u(x[b],{setInt8:function(e,t){ee.call(this,e,t<<24>>24)},setUint8:function(e,t){ee.call(this,e,t<<24>>24)}},!0)}else j=function(e){l(this,j,g);var t=p(e);this._b=v.call(new Array(t),0),this[D]=t},x=function(e,t,r){l(this,x,_),l(e,j,_);var n=e[D],o=f(t);if(o<0||n<o)throw S("Wrong offset!");if(n<o+(r=void 0===r?n-o:d(r)))throw S("Wrong length!");this[F]=e,this[L]=o,this[D]=r},o&&(V(j,C,"_l"),V(x,"buffer","_b"),V(x,C,"_l"),V(x,R,"_o")),u(x[b],{getInt8:function(e){return K(this,1,e)[0]<<24>>24},getUint8:function(e){return K(this,1,e)[0]},getInt16:function(e,t){var r=K(this,2,e,t);return(r[1]<<8|r[0])<<16>>16},getUint16:function(e,t){var r=K(this,2,e,t);return r[1]<<8|r[0]},getInt32:function(e,t){return W(K(this,4,e,t))},getUint32:function(e,t){return W(K(this,4,e,t))>>>0},getFloat32:function(e,t){return z(K(this,4,e,t),23,4)},getFloat64:function(e,t){return z(K(this,8,e,t),52,8)},setInt8:function(e,t){Y(this,1,e,U,t)},setUint8:function(e,t){Y(this,1,e,U,t)},setInt16:function(e,t,r){Y(this,2,e,q,t,r)},setUint16:function(e,t,r){Y(this,2,e,q,t,r)},setInt32:function(e,t,r){Y(this,4,e,B,t,r)},setUint32:function(e,t,r){Y(this,4,e,B,t,r)},setFloat32:function(e,t,r){Y(this,4,e,G,t,r)},setFloat64:function(e,t,r){Y(this,8,e,H,t,r)}});y(j,g),y(x,_),a(x[b],s.VIEW,!0),r[g]=j,r[_]=x},{"./_an-instance":4,"./_array-fill":7,"./_descriptors":18,"./_fails":24,"./_global":29,"./_hide":31,"./_library":47,"./_object-dp":54,"./_object-gopn":58,"./_redefine-all":70,"./_set-to-string-tag":76,"./_to-index":86,"./_to-integer":87,"./_to-length":89,"./_typed":94}],94:[function(e,t,r){for(var n,o=e("./_global"),i=e("./_hide"),s=e("./_uid"),a=s("typed_array"),u=s("view"),c=!(!o.ArrayBuffer||!o.DataView),l=c,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(n=o[d[f++]])?(i(n.prototype,a,!0),i(n.prototype,u,!0)):l=!1;t.exports={ABV:c,CONSTR:l,TYPED:a,VIEW:u}},{"./_global":29,"./_hide":31,"./_uid":95}],95:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],96:[function(e,t,r){var n=e("./_global").navigator;t.exports=n&&n.userAgent||""},{"./_global":29}],97:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_library"),s=e("./_wks-ext"),a=e("./_object-dp").f;t.exports=function(e){var t=o.Symbol||(o.Symbol=!i&&n.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:s.f(e)})}},{"./_core":14,"./_global":29,"./_library":47,"./_object-dp":54,"./_wks-ext":98}],98:[function(e,t,r){r.f=e("./_wks")},{"./_wks":99}],99:[function(e,t,r){var n=e("./_shared")("wks"),o=e("./_uid"),i=e("./_global").Symbol,s="function"==typeof i;(t.exports=function(e){return n[e]||(n[e]=s&&i[e]||(s?i:o)("Symbol."+e))}).store=n},{"./_global":29,"./_shared":78,"./_uid":95}],100:[function(e,t,r){var n=e("./_classof"),o=e("./_wks")("iterator"),i=e("./_iterators");t.exports=e("./_core").getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[n(e)]}},{"./_classof":12,"./_core":14,"./_iterators":46,"./_wks":99}],101:[function(e,t,r){"use strict";var n=e("./_export"),o=e("./_array-methods")(5),i="find",s=!0;i in[]&&Array(1)[i](function(){s=!1}),n(n.P+n.F*s,"Array",{find:function(e,t){return o(this,e,1<arguments.length?t:void 0)}}),e("./_add-to-unscopables")(i)},{"./_add-to-unscopables":2,"./_array-methods":9,"./_export":22}],102:[function(e,t,r){"use strict";var h=e("./_ctx"),n=e("./_export"),m=e("./_to-object"),v=e("./_iter-call"),y=e("./_is-array-iter"),g=e("./_to-length"),_=e("./_create-property"),b=e("./core.get-iterator-method");n(n.S+n.F*!e("./_iter-detect")(function(e){Array.from(e)}),"Array",{from:function(e,t,r){var n,o,i,s,a=m(e),u="function"==typeof this?this:Array,c=arguments.length,l=1<c?t:void 0,f=void 0!==l,d=0,p=b(a);if(f&&(l=h(l,2<c?r:void 0,2)),null==p||u==Array&&y(p))for(o=new u(n=g(a.length));d<n;d++)_(o,d,f?l(a[d],d):a[d]);else for(s=p.call(a),o=new u;!(i=s.next()).done;d++)_(o,d,f?v(s,l,[i.value,d],!0):i.value);return o.length=d,o}})},{"./_create-property":15,"./_ctx":16,"./_export":22,"./_is-array-iter":37,"./_iter-call":41,"./_iter-detect":44,"./_to-length":89,"./_to-object":90,"./core.get-iterator-method":100}],103:[function(e,t,r){"use strict";var n=e("./_add-to-unscopables"),o=e("./_iter-step"),i=e("./_iterators"),s=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=s(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./_add-to-unscopables":2,"./_iter-define":43,"./_iter-step":45,"./_iterators":46,"./_to-iobject":88}],104:[function(e,t,r){var n=e("./_object-dp").f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e("./_descriptors")&&n(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},{"./_descriptors":18,"./_object-dp":54}],105:[function(e,t,r){var n=e("./_export");n(n.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},{"./_export":22}],106:[function(e,t,r){var n=e("./_export");n(n.S,"Math",{fround:e("./_math-fround")})},{"./_export":22,"./_math-fround":48}],107:[function(e,t,r){var n=e("./_export"),o=Math.imul;n(n.S+n.F*e("./_fails")(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(e,t){var r=65535,n=+e,o=+t,i=r&n,s=r&o;return 0|i*s+((r&n>>>16)*s+i*(r&o>>>16)<<16>>>0)}})},{"./_export":22,"./_fails":24}],108:[function(e,t,r){var n=e("./_export");n(n.S,"Math",{trunc:function(e){return(0<e?Math.floor:Math.ceil)(e)}})},{"./_export":22}],109:[function(e,t,r){"use strict";function n(e){var t=l(e,!1);if("string"==typeof t&&2<t.length){var r,n,o,i=(t=_?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(r=t.charCodeAt(2))||120===r)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+t}for(var s,a=t.slice(2),u=0,c=a.length;u<c;u++)if((s=a.charCodeAt(u))<48||o<s)return NaN;return parseInt(a,n)}}return+t}var o=e("./_global"),i=e("./_has"),s=e("./_cof"),a=e("./_inherit-if-required"),l=e("./_to-primitive"),u=e("./_fails"),c=e("./_object-gopn").f,f=e("./_object-gopd").f,d=e("./_object-dp").f,p=e("./_string-trim").trim,h="Number",m=o[h],v=m,y=m.prototype,g=s(e("./_object-create")(y))==h,_="trim"in String.prototype;if(!m(" 0o1")||!m("0b1")||m("+0x1")){m=function(e){var t=arguments.length<1?0:e,r=this;return r instanceof m&&(g?u(function(){y.valueOf.call(r)}):s(r)!=h)?a(new v(n(t)),r,m):n(t)};for(var b,w=e("./_descriptors")?c(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),j=0;w.length>j;j++)i(v,b=w[j])&&!i(m,b)&&d(m,b,f(v,b));(m.prototype=y).constructor=m,e("./_redefine")(o,h,m)}},{"./_cof":13,"./_descriptors":18,"./_fails":24,"./_global":29,"./_has":30,"./_inherit-if-required":34,"./_object-create":53,"./_object-dp":54,"./_object-gopd":56,"./_object-gopn":58,"./_redefine":71,"./_string-trim":82,"./_to-primitive":91}],110:[function(e,t,r){var n=e("./_export"),o=e("./_parse-int");n(n.S+n.F*(Number.parseInt!=o),"Number",{parseInt:o})},{"./_export":22,"./_parse-int":66}],111:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return o(n(e))}})},{"./_object-keys":62,"./_object-sap":64,"./_to-object":90}],112:[function(e,t,r){"use strict";var n=e("./_classof"),o={};o[e("./_wks")("toStringTag")]="z",o+""!="[object z]"&&e("./_redefine")(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},{"./_classof":12,"./_redefine":71,"./_wks":99}],113:[function(r,e,t){"use strict";function n(){}function f(e){var t;return!(!v(e)||"function"!=typeof(t=e.then))&&t}function o(l,r){if(!l._n){l._n=!0;var n=l._c;j(function(){for(var u=l._v,c=1==l._s,e=0,t=function(e){var t,r,n,o=c?e.ok:e.fail,i=e.resolve,s=e.reject,a=e.domain;try{o?(c||(2==l._h&&N(l),l._h=1),!0===o?t=u:(a&&a.enter(),t=o(u),a&&(a.exit(),n=!0)),t===e.promise?s(E("Promise-chain cycle")):(r=f(t))?r.call(t,i,s):i(t)):s(u)}catch(e){a&&!n&&a.exit(),s(e)}};n.length>e;)t(n[e++]);l._c=[],l._n=!1,r&&!l._h&&D(l)})}}function i(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),o(t,!0))}var s,a,u,c,l=r("./_library"),d=r("./_global"),p=r("./_ctx"),h=r("./_classof"),m=r("./_export"),v=r("./_is-object"),y=r("./_a-function"),g=r("./_an-instance"),_=r("./_for-of"),b=r("./_species-constructor"),w=r("./_task").set,j=r("./_microtask")(),x=r("./_new-promise-capability"),k=r("./_perform"),S=r("./_user-agent"),P=r("./_promise-resolve"),M="Promise",E=d.TypeError,O=d.process,I=O&&O.versions,A=I&&I.v8||"",T=d[M],C="process"==h(O),R=a=x.f,F=!!function(){try{var e=T.resolve(1),t=(e.constructor={})[r("./_wks")("species")]=function(e){e(n,n)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(n)instanceof t&&0!==A.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(e){}}(),D=function(i){w.call(d,function(){var e,t,r,n=i._v,o=L(i);if(o&&(e=k(function(){C?O.emit("unhandledRejection",n,i):(t=d.onunhandledrejection)?t({promise:i,reason:n}):(r=d.console)&&r.error&&r.error("Unhandled promise rejection",n)}),i._h=C||L(i)?2:1),i._a=void 0,o&&e.e)throw e.v})},L=function(e){return 1!==e._h&&0===(e._a||e._c).length},N=function(t){w.call(d,function(){var e;C?O.emit("rejectionHandled",t):(e=d.onrejectionhandled)&&e({promise:t,reason:t._v})})},z=function(e){var r,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw E("Promise can't be resolved itself");(r=f(e))?j(function(){var t={_w:n,_d:!1};try{r.call(e,p(z,t,1),p(i,t,1))}catch(e){i.call(t,e)}}):(n._v=e,n._s=1,o(n,!1))}catch(e){i.call({_w:n,_d:!1},e)}}};F||(T=function(e){g(this,T,M,"_h"),y(e),s.call(this);try{e(p(z,this,1),p(i,this,1))}catch(e){i.call(this,e)}},(s=function(){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r("./_redefine-all")(T.prototype,{then:function(e,t){var r=R(b(this,T));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=C?O.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&o(this,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),u=function(){var e=new s;this.promise=e,this.resolve=p(z,e,1),this.reject=p(i,e,1)},x.f=R=function(e){return e===T||e===c?new u:a(e)}),m(m.G+m.W+m.F*!F,{Promise:T}),r("./_set-to-string-tag")(T,M),r("./_set-species")(M),c=r("./_core")[M],m(m.S+m.F*!F,M,{reject:function(e){var t=R(this);return(0,t.reject)(e),t.promise}}),m(m.S+m.F*(l||!F),M,{resolve:function(e){return P(l&&this===c?T:this,e)}}),m(m.S+m.F*!(F&&r("./_iter-detect")(function(e){T.all(e).catch(n)})),M,{all:function(e){var s=this,t=R(s),a=t.resolve,u=t.reject,r=k(function(){var n=[],o=0,i=1;_(e,!1,function(e){var t=o++,r=!1;n.push(void 0),i++,s.resolve(e).then(function(e){r||(r=!0,n[t]=e,--i||a(n))},u)}),--i||a(n)});return r.e&&u(r.v),t.promise},race:function(e){var t=this,r=R(t),n=r.reject,o=k(function(){_(e,!1,function(e){t.resolve(e).then(r.resolve,n)})});return o.e&&n(o.v),r.promise}})},{"./_a-function":1,"./_an-instance":4,"./_classof":12,"./_core":14,"./_ctx":16,"./_export":22,"./_for-of":27,"./_global":29,"./_is-object":39,"./_iter-detect":44,"./_library":47,"./_microtask":51,"./_new-promise-capability":52,"./_perform":67,"./_promise-resolve":68,"./_redefine-all":70,"./_set-species":75,"./_set-to-string-tag":76,"./_species-constructor":79,"./_task":84,"./_user-agent":96,"./_wks":99}],114:[function(e,t,r){var n=e("./_global"),i=e("./_inherit-if-required"),o=e("./_object-dp").f,s=e("./_object-gopn").f,a=e("./_is-regexp"),u=e("./_flags"),c=n.RegExp,l=c,f=c.prototype,d=/a/g,p=/a/g,h=new c(d)!==d;if(e("./_descriptors")&&(!h||e("./_fails")(function(){return p[e("./_wks")("match")]=!1,c(d)!=d||c(p)==p||"/a/i"!=c(d,"i")}))){c=function(e,t){var r=this instanceof c,n=a(e),o=void 0===t;return!r&&n&&e.constructor===c&&o?e:i(h?new l(n&&!o?e.source:e,t):l((n=e instanceof c)?e.source:e,n&&o?u.call(e):t),r?this:f,c)};function m(t){t in c||o(c,t,{configurable:!0,get:function(){return l[t]},set:function(e){l[t]=e}})}for(var v=s(l),y=0;v.length>y;)m(v[y++]);(f.constructor=c).prototype=f,e("./_redefine")(n,"RegExp",c)}e("./_set-species")("RegExp")},{"./_descriptors":18,"./_fails":24,"./_flags":26,"./_global":29,"./_inherit-if-required":34,"./_is-regexp":40,"./_object-dp":54,"./_object-gopn":58,"./_redefine":71,"./_set-species":75,"./_wks":99}],115:[function(e,t,r){"use strict";var n=e("./_regexp-exec");e("./_export")({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},{"./_export":22,"./_regexp-exec":73}],116:[function(e,t,r){e("./_descriptors")&&"g"!=/./g.flags&&e("./_object-dp").f(RegExp.prototype,"flags",{configurable:!0,get:e("./_flags")})},{"./_descriptors":18,"./_flags":26,"./_object-dp":54}],117:[function(e,t,r){"use strict";var k=e("./_an-object"),n=e("./_to-object"),S=e("./_to-length"),P=e("./_to-integer"),M=e("./_advance-string-index"),E=e("./_regexp-exec-abstract"),O=Math.max,I=Math.min,d=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,h=/\$([$&`']|\d\d?)/g;e("./_fix-re-wks")("replace",2,function(o,i,w,j){return[function(e,t){var r=o(this),n=null==e?void 0:e[i];return void 0!==n?n.call(e,r,t):w.call(String(r),e,t)},function(e,t){var r=j(w,e,this,t);if(r.done)return r.value;var n=k(e),o=String(this),i="function"==typeof t;i||(t=String(t));var s=n.global;if(s){var a=n.unicode;n.lastIndex=0}for(var u=[];;){var c=E(n,o);if(null===c)break;if(u.push(c),!s)break;""===String(c[0])&&(n.lastIndex=M(o,S(n.lastIndex),a))}for(var l,f="",d=0,p=0;p<u.length;p++){c=u[p];for(var h=String(c[0]),m=O(I(P(c.index),o.length),0),v=[],y=1;y<c.length;y++)v.push(void 0===(l=c[y])?l:String(l));var g=c.groups;if(i){var _=[h].concat(v,m,o);void 0!==g&&_.push(g);var b=String(t.apply(void 0,_))}else b=x(h,o,m,v,g,t);d<=m&&(f+=o.slice(d,m)+b,d=m+h.length)}return f+o.slice(d)}];function x(i,s,a,u,c,e){var l=a+i.length,f=u.length,t=h;return void 0!==c&&(c=n(c),t=p),w.call(e,t,function(e,t){var r;switch(t.charAt(0)){case"$":return"$";case"&":return i;case"`":return s.slice(0,a);case"'":return s.slice(l);case"<":r=c[t.slice(1,-1)];break;default:var n=+t;if(0==n)return e;if(f<n){var o=d(n/10);return 0===o?e:o<=f?void 0===u[o-1]?t.charAt(1):u[o-1]+t.charAt(1):e}r=u[n-1]}return void 0===r?"":r})}})},{"./_advance-string-index":3,"./_an-object":5,"./_fix-re-wks":25,"./_regexp-exec-abstract":72,"./_to-integer":87,"./_to-length":89,"./_to-object":90}],118:[function(e,t,r){"use strict";var f=e("./_is-regexp"),_=e("./_an-object"),b=e("./_species-constructor"),w=e("./_advance-string-index"),j=e("./_to-length"),x=e("./_regexp-exec-abstract"),d=e("./_regexp-exec"),n=e("./_fails"),k=Math.min,p=[].push,s="split",h="length",m="lastIndex",S=4294967295,P=!n(function(){RegExp(S,"y")});e("./_fix-re-wks")("split",2,function(o,i,v,y){var g;return g="c"=="abbc"[s](/(b)*/)[1]||4!="test"[s](/(?:)/,-1)[h]||2!="ab"[s](/(?:ab)*/)[h]||4!="."[s](/(.?)(.?)/)[h]||1<"."[s](/()()/)[h]||""[s](/.?/)[h]?function(e,t){var r=String(this);if(void 0===e&&0===t)return[];if(!f(e))return v.call(r,e,t);for(var n,o,i,s=[],a=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),u=0,c=void 0===t?S:t>>>0,l=new RegExp(e.source,a+"g");(n=d.call(l,r))&&!(u<(o=l[m])&&(s.push(r.slice(u,n.index)),1<n[h]&&n.index<r[h]&&p.apply(s,n.slice(1)),i=n[0][h],u=o,s[h]>=c));)l[m]===n.index&&l[m]++;return u===r[h]?!i&&l.test("")||s.push(""):s.push(r.slice(u)),s[h]>c?s.slice(0,c):s}:"0"[s](void 0,0)[h]?function(e,t){return void 0===e&&0===t?[]:v.call(this,e,t)}:v,[function(e,t){var r=o(this),n=null==e?void 0:e[i];return void 0!==n?n.call(e,r,t):g.call(String(r),e,t)},function(e,t){var r=y(g,e,this,t,g!==v);if(r.done)return r.value;var n=_(e),o=String(this),i=b(n,RegExp),s=n.unicode,a=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(P?"y":"g"),u=new i(P?n:"^(?:"+n.source+")",a),c=void 0===t?S:t>>>0;if(0==c)return[];if(0===o.length)return null===x(u,o)?[o]:[];for(var l=0,f=0,d=[];f<o.length;){u.lastIndex=P?f:0;var p,h=x(u,P?o:o.slice(f));if(null===h||(p=k(j(u.lastIndex+(P?0:f)),o.length))===l)f=w(o,f,s);else{if(d.push(o.slice(l,f)),d.length===c)return d;for(var m=1;m<=h.length-1;m++)if(d.push(h[m]),d.length===c)return d;f=l=p}}return d.push(o.slice(l)),d}]})},{"./_advance-string-index":3,"./_an-object":5,"./_fails":24,"./_fix-re-wks":25,"./_is-regexp":40,"./_regexp-exec":73,"./_regexp-exec-abstract":72,"./_species-constructor":79,"./_to-length":89}],119:[function(t,e,r){"use strict";t("./es6.regexp.flags");function n(e){t("./_redefine")(RegExp.prototype,a,e,!0)}var o=t("./_an-object"),i=t("./_flags"),s=t("./_descriptors"),a="toString",u=/./[a];t("./_fails")(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?n(function(){var e=o(this);return"/".concat(e.source,"/","flags"in e?e.flags:!s&&e instanceof RegExp?i.call(e):void 0)}):u.name!=a&&n(function(){return u.call(this)})},{"./_an-object":5,"./_descriptors":18,"./_fails":24,"./_flags":26,"./_redefine":71,"./es6.regexp.flags":116}],120:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":43,"./_string-at":80}],121:[function(e,t,r){"use strict";var n=e("./_export"),i=e("./_to-length"),s=e("./_string-context"),a="startsWith",u=""[a];n(n.P+n.F*e("./_fails-is-regexp")(a),"String",{startsWith:function(e,t){var r=s(this,e,a),n=i(Math.min(1<arguments.length?t:void 0,r.length)),o=String(e);return u?u.call(r,o,n):r.slice(n,n+o.length)===o}})},{"./_export":22,"./_fails-is-regexp":23,"./_string-context":81,"./_to-length":89}],122:[function(e,t,r){"use strict";function n(e){var t=K[e]=I(z[q]);return t._k=e,t}function o(e,t){k(e);for(var r,n=j(t=M(t)),o=0,i=n.length;o<i;)te(e,r=n[o++],t[r]);return e}function i(e){var t=G.call(this,e=E(e,!0));return!(this===$&&l(K,e)&&!l(Y,e))&&(!(t||!l(this,e)||!l(K,e)||l(this,B)&&this[B][e])||t)}function s(e,t){if(e=M(e),t=E(t,!0),e!==$||!l(K,t)||l(Y,t)){var r=D(e,t);return!r||!l(K,t)||l(e,B)&&e[B][t]||(r.enumerable=!0),r}}function a(e){for(var t,r=N(M(e)),n=[],o=0;r.length>o;)l(K,t=r[o++])||t==B||t==h||n.push(t);return n}function u(e){for(var t,r=e===$,n=N(r?Y:M(e)),o=[],i=0;n.length>i;)!l(K,t=n[i++])||r&&!l($,t)||o.push(K[t]);return o}var c=e("./_global"),l=e("./_has"),f=e("./_descriptors"),d=e("./_export"),p=e("./_redefine"),h=e("./_meta").KEY,m=e("./_fails"),v=e("./_shared"),y=e("./_set-to-string-tag"),g=e("./_uid"),_=e("./_wks"),b=e("./_wks-ext"),w=e("./_wks-define"),j=e("./_enum-keys"),x=e("./_is-array"),k=e("./_an-object"),S=e("./_is-object"),P=e("./_to-object"),M=e("./_to-iobject"),E=e("./_to-primitive"),O=e("./_property-desc"),I=e("./_object-create"),A=e("./_object-gopn-ext"),T=e("./_object-gopd"),C=e("./_object-gops"),R=e("./_object-dp"),F=e("./_object-keys"),D=T.f,L=R.f,N=A.f,z=c.Symbol,W=c.JSON,U=W&&W.stringify,q="prototype",B=_("_hidden"),H=_("toPrimitive"),G={}.propertyIsEnumerable,V=v("symbol-registry"),K=v("symbols"),Y=v("op-symbols"),$=Object[q],J="function"==typeof z&&!!C.f,Q=c.QObject,X=!Q||!Q[q]||!Q[q].findChild,Z=f&&m(function(){return 7!=I(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=D($,t);n&&delete $[t],L(e,t,r),n&&e!==$&&L($,t,n)}:L,ee=J&&"symbol"==typeof z.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof z},te=function(e,t,r){return e===$&&te(Y,t,r),k(e),t=E(t,!0),k(r),l(K,t)?(r.enumerable?(l(e,B)&&e[B][t]&&(e[B][t]=!1),r=I(r,{enumerable:O(0,!1)})):(l(e,B)||L(e,B,O(1,{})),e[B][t]=!0),Z(e,t,r)):L(e,t,r)};J||(p((z=function(e){if(this instanceof z)throw TypeError("Symbol is not a constructor!");var t=g(0<arguments.length?e:void 0),r=function(e){this===$&&r.call(Y,e),l(this,B)&&l(this[B],t)&&(this[B][t]=!1),Z(this,t,O(1,e))};return f&&X&&Z($,t,{configurable:!0,set:r}),n(t)})[q],"toString",function(){return this._k}),T.f=s,R.f=te,e("./_object-gopn").f=A.f=a,e("./_object-pie").f=i,C.f=u,f&&!e("./_library")&&p($,"propertyIsEnumerable",i,!0),b.f=function(e){return n(_(e))}),d(d.G+d.W+d.F*!J,{Symbol:z});for(var re="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;re.length>ne;)_(re[ne++]);for(var oe=F(_.store),ie=0;oe.length>ie;)w(oe[ie++]);d(d.S+d.F*!J,"Symbol",{for:function(e){return l(V,e+="")?V[e]:V[e]=z(e)},keyFor:function(e){if(!ee(e))throw TypeError(e+" is not a symbol!");for(var t in V)if(V[t]===e)return t},useSetter:function(){X=!0},useSimple:function(){X=!1}}),d(d.S+d.F*!J,"Object",{create:function(e,t){return void 0===t?I(e):o(I(e),t)},defineProperty:te,defineProperties:o,getOwnPropertyDescriptor:s,getOwnPropertyNames:a,getOwnPropertySymbols:u});var se=m(function(){C.f(1)});d(d.S+d.F*se,"Object",{getOwnPropertySymbols:function(e){return C.f(P(e))}}),W&&d(d.S+d.F*(!J||m(function(){var e=z();return"[null]"!=U([e])||"{}"!=U({a:e})||"{}"!=U(Object(e))})),"JSON",{stringify:function(e){for(var t,r,n=[e],o=1;o<arguments.length;)n.push(arguments[o++]);if(r=t=n[1],(S(t)||void 0!==e)&&!ee(e))return x(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!ee(t))return t}),n[1]=t,U.apply(W,n)}}),z[q][H]||e("./_hide")(z[q],H,z[q].valueOf),y(z,"Symbol"),y(Math,"Math",!0),y(c.JSON,"JSON",!0)},{"./_an-object":5,"./_descriptors":18,"./_enum-keys":21,"./_export":22,"./_fails":24,"./_global":29,"./_has":30,"./_hide":31,"./_is-array":38,"./_is-object":39,"./_library":47,"./_meta":50,"./_object-create":53,"./_object-dp":54,"./_object-gopd":56,"./_object-gopn":58,"./_object-gopn-ext":57,"./_object-gops":59,"./_object-keys":62,"./_object-pie":63,"./_property-desc":69,"./_redefine":71,"./_set-to-string-tag":76,"./_shared":78,"./_to-iobject":88,"./_to-object":90,"./_to-primitive":91,"./_uid":95,"./_wks":99,"./_wks-define":97,"./_wks-ext":98}],123:[function(e,t,r){e("./_typed-array")("Uint8",1,function(n){return function(e,t,r){return n(this,e,t,r)}})},{"./_typed-array":92}],124:[function(e,t,r){e("./_typed-array")("Uint8",1,function(n){return function(e,t,r){return n(this,e,t,r)}},!0)},{"./_typed-array":92}],125:[function(e,t,r){var n=e("./_export"),u=e("./_own-keys"),c=e("./_to-iobject"),l=e("./_object-gopd"),f=e("./_create-property");n(n.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,r,n=c(e),o=l.f,i=u(n),s={},a=0;i.length>a;)void 0!==(r=o(n,t=i[a++]))&&f(s,t,r);return s}})},{"./_create-property":15,"./_export":22,"./_object-gopd":56,"./_own-keys":65,"./_to-iobject":88}],126:[function(e,t,r){e("./_wks-define")("asyncIterator")},{"./_wks-define":97}],127:[function(e,t,r){for(var n=e("./es6.array.iterator"),o=e("./_object-keys"),i=e("./_redefine"),s=e("./_global"),a=e("./_hide"),u=e("./_iterators"),c=e("./_wks"),l=c("iterator"),f=c("toStringTag"),d=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),m=0;m<h.length;m++){var v,y=h[m],g=p[y],_=s[y],b=_&&_.prototype;if(b&&(b[l]||a(b,l,d),b[f]||a(b,f,y),u[y]=d,g))for(v in n)b[v]||i(b,v,n[v],!0)}},{"./_global":29,"./_hide":31,"./_iterators":46,"./_object-keys":62,"./_redefine":71,"./_wks":99,"./es6.array.iterator":103}],128:[function(e,t,r){var n=function(s){"use strict";var u,e=Object.prototype,l=e.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},o=t.iterator||"@@iterator",r=t.asyncIterator||"@@asyncIterator",n=t.toStringTag||"@@toStringTag";function a(e,t,r,n){var i,s,a,u,o=t&&t.prototype instanceof y?t:y,c=Object.create(o.prototype),l=new M(n||[]);return c._invoke=(i=e,s=r,a=l,u=d,function(e,t){if(u===h)throw new Error("Generator is already running");if(u===m){if("throw"===e)throw t;return O()}for(a.method=e,a.arg=t;;){var r=a.delegate;if(r){var n=k(r,a);if(n){if(n===v)continue;return n}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(u===d)throw u=m,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);u=h;var o=f(i,s,a);if("normal"===o.type){if(u=a.done?m:p,o.arg===v)continue;return{value:o.arg,done:a.done}}"throw"===o.type&&(u=m,a.method="throw",a.arg=o.arg)}}),c}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}s.wrap=a;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function y(){}function i(){}function c(){}var g={};g[o]=function(){return this};var _=Object.getPrototypeOf,b=_&&_(_(E([])));b&&b!==e&&l.call(b,o)&&(g=b);var w=c.prototype=y.prototype=Object.create(g);function j(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function x(u,c){var t;this._invoke=function(r,n){function e(){return new c(function(e,t){!function t(e,r,n,o){var i=f(u[e],u,r);if("throw"!==i.type){var s=i.arg,a=s.value;return a&&"object"==typeof a&&l.call(a,"__await")?c.resolve(a.__await).then(function(e){t("next",e,n,o)},function(e){t("throw",e,n,o)}):c.resolve(a).then(function(e){s.value=e,n(s)},function(e){return t("throw",e,n,o)})}o(i.arg)}(r,n,e,t)})}return t=t?t.then(e,e):e()}}function k(e,t){var r=e.iterator[t.method];if(r===u){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=u,k(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var n=f(r,e.iterator,t.arg);if("throw"===n.type)return t.method="throw",t.arg=n.arg,t.delegate=null,v;var o=n.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=u),t.delegate=null,v):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function M(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function E(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,n=function e(){for(;++r<t.length;)if(l.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=u,e.done=!0,e};return n.next=n}}return{next:O}}function O(){return{value:u,done:!0}}return i.prototype=w.constructor=c,c.constructor=i,c[n]=i.displayName="GeneratorFunction",s.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===i||"GeneratorFunction"===(t.displayName||t.name))},s.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,n in e||(e[n]="GeneratorFunction")),e.prototype=Object.create(w),e},s.awrap=function(e){return{__await:e}},j(x.prototype),x.prototype[r]=function(){return this},s.AsyncIterator=x,s.async=function(e,t,r,n,o){void 0===o&&(o=Promise);var i=new x(a(e,t,r,n),o);return s.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},j(w),w[n]="Generator",w[o]=function(){return this},w.toString=function(){return"[object Generator]"},s.keys=function(r){var n=[];for(var e in r)n.push(e);return n.reverse(),function e(){for(;n.length;){var t=n.pop();if(t in r)return e.value=t,e.done=!1,e}return e.done=!0,e}},s.values=E,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=u,this.done=!1,this.delegate=null,this.method="next",this.arg=u,this.tryEntries.forEach(P),!e)for(var t in this)"t"===t.charAt(0)&&l.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=u)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function e(e,t){return i.type="throw",i.arg=r,n.next=e,t&&(n.method="next",n.arg=u),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var s=l.call(o,"catchLoc"),a=l.call(o,"finallyLoc");if(s&&a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),P(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;P(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:E(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=u),v}},s}("object"==typeof t?t.exports:{});try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},{}],129:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Build={version:"0.72.0 (9d95650ce8e9eb9633ef5cec3fb91cb1)",buildSeed:1631176127038,"wdosbox.wasm":{size:1463621,gzSize:491837},"wdosbox.js":{size:107939,gzSize:27716},"wlibzip.wasm":{size:112343,gzSize:54127},"wlibzip.js":{size:80579,gzSize:20779}}},{}],130:[function(e,t,r){"use strict";function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var i=function(){function e(){s(this,e)}return o(e,[{key:"close",value:function(){}},{key:"put",value:function(){return Promise.resolve()}},{key:"get",value:function(e,t){return void 0!==t?Promise.resolve(t):Promise.reject("Cache is not supported on this host")}},{key:"forEach",value:function(e,t){t()}}]),e}();r.CacheNoop=i,r.CacheDb=function(e,r){return new Promise(function(t){new a(e,t,function(e){r.onErr(e),t(new i)})})};var a=function(){function i(e,t,r){var n=this;if(s(this,i),this.storeName="files",this.db=null,this.version=e,this.indexedDB="undefined"==typeof window?void 0:window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,this.indexedDB){var o=this.indexedDB.open("js-dos-cache ("+e+")",1);o.onerror=function(e){var t;r("Can't open cache database: "+(null===(t=o.error)||void 0===t?void 0:t.message))},o.onsuccess=function(e){n.db=o.result,t(n)},o.onupgradeneeded=function(e){try{n.db=o.result,n.db.onerror=function(e){r("Can't upgrade cache database")},n.db.createObjectStore(n.storeName)}catch(e){r("Can't upgrade cache database")}}}else r("Indexed db is not supported on this host")}return o(i,[{key:"close",value:function(){null!==this.db&&(this.db.close(),this.db=null)}},{key:"put",value:function(r,n){var o=this;return new Promise(function(e){if(null!==o.db){var t=o.db.transaction(o.storeName,"readwrite");t.oncomplete=function(){return e()},t.objectStore(o.storeName).put(n,r)}else e()})}},{key:"get",value:function(o,i){var s=this;return new Promise(function(t,r){function e(e){void 0===i?r(new Error(e)):t(i)}if(null!==s.db){var n=s.db.transaction(s.storeName,"readonly").objectStore(s.storeName).get(o);n.onerror=function(){return r(new Error("Can't read value for key '"+o+"'"))},n.onsuccess=function(){n.result?t(n.result):e("Result is empty for key '"+o+"', result: "+n.result)}}else e("db is not initalized")})}},{key:"forEach",value:function(r,n){if(null!==this.db){var e=this.db.transaction(this.storeName,"readonly").objectStore(this.storeName).openCursor();e.onerror=function(){return n()},e.onsuccess=function(e){var t=e.target.result;t?(r(t.key.toString(),t.value),t.continue()):n()}}else n()}}]),i}()},{"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119}],131:[function(e,t,r){"use strict";function v(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=a(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.array.from"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.promise"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.string.iterator"),e("regenerator-runtime/runtime");var o=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var y=e("./dos-conf"),g=o(e("../../libzip/libzip")),_=e("../../http"),c=function(){function r(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.config=y.createDosConfig(),this.sources=[],this.libzipWasm=e,this.cache=t}var e,t,n,a,o;return e=r,(t=[{key:"autoexec",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.config.autoexec.options.script.value=t.join("\n"),this}},{key:"cycles",value:function(e){return this.config.cpu.options.cycles.value=e,this}},{key:"extract",value:function(e,t,r){var n=1<arguments.length&&void 0!==t?t:"/",o=2<arguments.length&&void 0!==r?r:"zip";return this.extractAll([{url:e,path:n,type:o}])}},{key:"extractAll",value:function(e){var t;return(t=this.sources).push.apply(t,i(e)),this}},{key:"toUint8Array",value:(a=regeneratorRuntime.mark(function e(){var t,r,n,o,i,s,a,u,c,l,f,d,p,h=this,m=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=0<m.length&&void 0!==m[0]&&m[0],r={},e.next=4,this.libzipWasm.instantiate(r);case 4:return n=new g.default(r,"/home/web_user"),e.next=7,y.toDosboxConf(this.config);case 7:o=e.sent,i=[],s=v(this.sources);try{for(u=function(){var t=a.value;if("zip"!==t.type)throw new Error("Only Zip is supported");var e=_.HTTPRequest(t.url,{cache:h.cache,responseType:"arraybuffer"}).then(function(e){return{source:t,data:new Uint8Array(e)}});i.push(e)},s.s();!(a=s.n()).done;)u()}catch(e){s.e(e)}finally{s.f()}if(t){e.next=18;break}return e.next=14,n.writeFile(".jsdos/dosbox.conf",o);case 14:return e.next=16,n.writeFile(".jsdos/readme.txt",b);case 16:return e.next=18,n.writeFile(".jsdos/jsdos.json",JSON.stringify(this.config,null,2));case 18:return e.next=20,Promise.all(i);case 20:c=e.sent,l=v(c);try{for(l.s();!(f=l.n()).done;)d=f.value,n.zipToFs(d.data,d.source.path)}catch(e){l.e(e)}finally{l.f()}if(t)return e.next=26,n.writeFile(".jsdos/dosbox.conf",o);e.next=30;break;case 26:return e.next=28,n.writeFile(".jsdos/readme.txt",b);case 28:return e.next=30,n.writeFile(".jsdos/jsdos.json",JSON.stringify(this.config,null,2));case 30:return e.next=32,n.zipFromFs();case 32:return p=e.sent,n.destroy(),e.abrupt("return",p);case 35:case"end":return e.stop()}},e,this)}),o=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})},function(){return o.apply(this,arguments)})}])&&s(e.prototype,t),n&&s(e,n),r}();r.default=c;var b="\nPlease visit our website:\n\n        _                __\n       (_)____      ____/ /___  _____ _________  ____ ___\n      / / ___/_____/ __  / __ \\/ ___// ___/ __ \\/ __ `__ \\\n     / (__  )_____/ /_/ / /_/ (__  )/ /__/ /_/ / / / / / /\n  __/ /____/      \\__,_/\\____/____(_)___/\\____/_/ /_/ /_/\n /___/\n"},{"../../http":136,"../../libzip/libzip":141,"./dos-conf":132,"core-js/modules/es6.array.from":102,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],132:[function(e,t,r){"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach(function(e){o(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(a){return function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e("core-js/modules/es7.object.get-own-property-descriptors"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.regexp.to-string"),e("regenerator-runtime/runtime"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.number.constructor"),e("core-js/modules/es6.number.parse-int"),e("core-js/modules/es6.string.starts-with"),e("core-js/modules/es6.array.find"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.keys"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.function.name"),Object.defineProperty(r,"__esModule",{value:!0});var f=function e(){l(this,e),this.name="sdl",this.description="This section contains all of the low level system settings for how DOSBox interacts with your real hardware. You can define what resolutions are emulated, how DOSBox should treat errors or listen to your keyboard and mouse. You can often achieve a fair level of optimization by working with these setting, though for the most part leaving them at their default settings will create the best experience. These settings are passed on to the SDL Library which handles low level things like input and thread priority.",this.options={autolock:{name:"autolock",description:"Mouse will automatically lock, if you click on the screen.",value:!1,allowedValues:[!0,!1]}}};r.OutputCategory=f;var d=function e(){l(this,e),this.name="dosbox",this.description="The [dosbox] section contains various settings that do not pertain to any other section (e.g. setting the language used in DOSBox help texts, where to store screen captures, etc.)",this.options={machine:{name:"machine",description:"The type of machine tries to emulate.",value:"svga_s3",allowedValues:["hercules","cga","tandy","pcjr","ega","vgaonly","svga_s3","svga_et3000","svga_et4000","svga_paradise","vesa_nolfb","vesa_oldvbe"]}}};r.DosboxCategory=d;var p=function e(){l(this,e),this.name="cpu",this.description="The CPU section controls how DOSBox tries to emulate the CPU, how fast the emulation should be, and to adjust it. DOSBox offers 4 different methods of CPU emulation.",this.options={core:{name:"core",description:"CPU Core used in emulation. auto will switch to dynamic if available and appropriate.",value:"auto",allowedValues:["auto","normal","simple"]},cputype:{name:"cputype",description:"CPU Type used in emulation. auto is the fastest choice.",value:"auto",allowedValues:["auto","386","386_slow","486_slow","pentium_slow","386_prefetch"]},cycles:{name:"cycles",description:"Amount of instructions DOSBox tries to emulate each millisecond. Setting this value too high results in sound dropouts and lags.\nCycles can be set in 3 ways:\n'auto'          tries to guess what a game needs.\n                It usually works, but can fail for certain games.\n'fixed #number' will set a fixed amount of cycles. This is what you usually need if 'auto' fails.\n                (Example: fixed 4000).\n'max'           will allocate as much cycles as your computer is able to handle.\n",value:"auto",allowedValues:["auto","fixed","max"]}}};r.CpuCategory=p;var m=function e(){l(this,e),this.name="mixer",this.description="Here you can define the quality of emulated audio.",this.options={rate:{name:"rate",description:"Frequency rate of sound",value:44100,allowedValues:[]},nosound:{name:"nosound",description:"Enable silent mode, sound is still emulated though.",value:!1,allowedValues:[!0,!1]}}};r.MixerCategory=m;var v=function e(){l(this,e),this.name="autoexec",this.description="Lines in this section will be run at startup",this.options={script:{name:"lines",description:"Use \\n to separate lines",value:"",allowedValues:[]}}};function y(){return{output:new f,dosbox:new d,cpu:new p,mixer:new m,autoexec:new v}}function g(f,d){var p="sdl"===d.name?"output":d.name;return new Promise(function(e,n){if(f)if(f.name===d.name){for(var t=0,r=Object.keys(f.options);t<r.length;t++){var o=r[t],i=f.options[o],s=d.options[o];if(void 0===s)return void n(new Error("Unknown option '"+(i.name||o)+"' in '"+f.name+"'"));if(0<s.allowedValues.length){var a=function(){var t=i.value,e=s.allowedValues.find(function(e){return e===t});if("cpu"===p&&"cycles"===i.name&&(t+"").startsWith("fixed ")){var r=Number.parseInt(t.substr("fixed ".length),10);if(isNaN(r))return n(new Error("Fixed value should conatain number")),{v:void 0}}else if(void 0===e)return n(new Error("Incorrect value '"+t+"' ("+h(t)+") for '"+f.name+"."+(i.name||o)+"' allowed is "+JSON.stringify(s.allowedValues))),{v:void 0}}();if("object"===h(a))return a.v}}for(var u=0,c=Object.keys(d.options);u<c.length;u++){var l=c[u];if(!(l in f.options))return void n(new Error("Option '"+l+"' is missed in '"+p+"'"))}e()}else n(new Error("Incorrect category name '"+f.name+"' should be '"+d.name+"'"));else n(new Error("Category '"+p+"' is missed"))})}function _(){return b.apply(this,arguments)}function b(){return(b=i(regeneratorRuntime.mark(function e(t){var r,n,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:r=y(),n=0,o=Object.keys(r);case 2:if(n<o.length)return i=o[n],e.next=6,g(t[i],r[i]);e.next=9;break;case 6:n++,e.next=2;break;case 9:case"end":return e.stop()}},e)}))).apply(this,arguments)}function w(){return j.apply(this,arguments)}function j(){return(j=i(regeneratorRuntime.mark(function e(t,r){var n,o,i,s,a,u;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===t)return e.abrupt("return");e.next=2;break;case 2:n=0,o=Object.keys(t.options||{});case 3:if(!(n<o.length)){e.next=16;break}if(i=o[n],"string"!=typeof(s=t.options[i])&&"number"!=typeof s&&!Array.isArray(s)){e.next=13;break}if(a=r.options[i]){e.next=10;break}return e.abrupt("continue",13);case 10:u=s,t.options[i]=c({},a),t.options[i].value=u;case 13:n++,e.next=3;break;case 16:case"end":return e.stop()}},e)}))).apply(this,arguments)}function x(){return k.apply(this,arguments)}function k(){return(k=i(regeneratorRuntime.mark(function e(t){var r,n,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:r=y(),n=0,o=Object.keys(r);case 2:if(n<o.length)return i=o[n],e.next=6,w(t[i],r[i]);e.next=9;break;case 6:n++,e.next=2;break;case 9:case"end":return e.stop()}},e)}))).apply(this,arguments)}function S(){return(S=i(regeneratorRuntime.mark(function e(r){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x(r);case 2:return e.next=4,_(r);case 4:return n=P(r.output)+"\nfullscreen=false\nfulldouble=false\nfullresolution=original\nwindowresolution=original\noutput=surface\nsensitivity=100\nwaitonerror=true\npriority=higher,normal\nmapperfile=mapper-jsdos.map\nusescancodes=true\nvsync=false\n"+P(r.dosbox)+"\nlanguage=\ncaptures=capture\nmemsize=16\n"+P(r.cpu)+"\ncycleup=10\ncycledown=20\n"+P(r.mixer)+"\nblocksize=1024\nprebuffer=20\n\n[render]\n# frameskip: How many frames DOSBox skips before drawing one.\n#    aspect: Do aspect correction, if your output method doesn't support scaling this can slow things down!.\n#    scaler: Scaler used to enlarge/enhance low resolution modes.\n#              If 'forced' is appended, then the scaler will be used even if the result might not be desired.\n#            Possible values: none, normal2x, normal3x, advmame2x, advmame3x, advinterp2x, advinterp3x, hq2x, hq3x, 2xsai, super2xsai, supereagle, tv2x, tv3x, rgb2x, rgb3x, scan2x, scan3x.\n\nframeskip=0\naspect=false\nscaler=none\n\n[midi]\n#     mpu401: Type of MPU-401 to emulate.\n#             Possible values: intelligent, uart, none.\n# mididevice: Device that will receive the MIDI data from MPU-401.\n#             Possible values: default, win32, alsa, oss, coreaudio, coremidi, none.\n# midiconfig: Special configuration options for the device driver. This is usually the id of the device you want to use.\n#               See the README/Manual for more details.\n\nmpu401=intelligent\nmididevice=default\nmidiconfig=\n\n[sblaster]\n#  sbtype: Type of Soundblaster to emulate. gb is Gameblaster.\n#          Possible values: sb1, sb2, sbpro1, sbpro2, sb16, gb, none.\n#  sbbase: The IO address of the soundblaster.\n#          Possible values: 220, 240, 260, 280, 2a0, 2c0, 2e0, 300.\n#     irq: The IRQ number of the soundblaster.\n#          Possible values: 7, 5, 3, 9, 10, 11, 12.\n#     dma: The DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n#    hdma: The High DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n# sbmixer: Allow the soundblaster mixer to modify the DOSBox mixer.\n# oplmode: Type of OPL emulation. On 'auto' the mode is determined by sblaster type. All OPL modes are Adlib-compatible, except for 'cms'.\n#          Possible values: auto, cms, opl2, dualopl2, opl3, none.\n#  oplemu: Provider for the OPL emulation. compat might provide better quality (see oplrate as well).\n#          Possible values: default, compat, fast.\n# oplrate: Sample rate of OPL music emulation. Use 49716 for highest quality (set the mixer rate accordingly).\n#          Possible values: 44100, 49716, 48000, 32000, 22050, 16000, 11025, 8000.\n\nsbtype=sb16\nsbbase=220\nirq=7\ndma=1\nhdma=5\nsbmixer=true\noplmode=auto\noplemu=default\noplrate=44100\n\n[gus]\n#      gus: Enable the Gravis Ultrasound emulation.\n#  gusrate: Sample rate of Ultrasound emulation.\n#           Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#  gusbase: The IO base address of the Gravis Ultrasound.\n#           Possible values: 240, 220, 260, 280, 2a0, 2c0, 2e0, 300.\n#   gusirq: The IRQ number of the Gravis Ultrasound.\n#           Possible values: 5, 3, 7, 9, 10, 11, 12.\n#   gusdma: The DMA channel of the Gravis Ultrasound.\n#           Possible values: 3, 0, 1, 5, 6, 7.\n# ultradir: Path to Ultrasound directory. In this directory\n#           there should be a MIDI directory that contains\n#           the patch files for GUS playback. Patch sets used\n#           with Timidity should work fine.\n\ngus=false\ngusrate=44100\ngusbase=240\ngusirq=5\ngusdma=3\nultradir=C:\\ULTRASND\n\n[speaker]\n# pcspeaker: Enable PC-Speaker emulation.\n#    pcrate: Sample rate of the PC-Speaker sound generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#     tandy: Enable Tandy Sound System emulation. For 'auto', emulation is present only if machine is set to 'tandy'.\n#            Possible values: auto, on, off.\n# tandyrate: Sample rate of the Tandy 3-Voice generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#    disney: Enable Disney Sound Source emulation. (Covox Voice Master and Speech Thing compatible).\n\npcspeaker=true\npcrate=44100\ntandy=auto\ntandyrate=44100\ndisney=true\n\n[joystick]\n# joysticktype: Type of joystick to emulate: auto (default), none,\n#               2axis (supports two joysticks),\n#               4axis (supports one joystick, first joystick used),\n#               4axis_2 (supports one joystick, second joystick used),\n#               fcs (Thrustmaster), ch (CH Flightstick).\n#               none disables joystick emulation.\n#               auto chooses emulation depending on real joystick(s).\n#               (Remember to reset dosbox's mapperfile if you saved it earlier)\n#               Possible values: auto, 2axis, 4axis, 4axis_2, fcs, ch, none.\n#        timed: enable timed intervals for axis. Experiment with this option, if your joystick drifts (away).\n#     autofire: continuously fires as long as you keep the button pressed.\n#       swap34: swap the 3rd and the 4th axis. can be useful for certain joysticks.\n#   buttonwrap: enable button wrapping at the number of emulated buttons.\n\njoysticktype=auto\ntimed=true\nautofire=false\nswap34=false\nbuttonwrap=false\n\n[serial]\n# serial1: set type of device connected to com port.\n#          Can be disabled, dummy, modem, nullmodem, directserial.\n#          Additional parameters must be in the same line in the form of\n#          parameter:value. Parameter for all types is irq (optional).\n#          for directserial: realport (required), rxdelay (optional).\n#                           (realport:COM1 realport:ttyS0).\n#          for modem: listenport (optional).\n#          for nullmodem: server, rxdelay, txdelay, telnet, usedtr,\n#                         transparent, port, inhsocket (all optional).\n#          Example: serial1=modem listenport:5000\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial2: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial3: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial4: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n\nserial1=dummy\nserial2=dummy\nserial3=disabled\nserial4=disabled\n\n[dos]\n#            xms: Enable XMS support.\n#            ems: Enable EMS support.\n#            umb: Enable UMB support.\n# keyboardlayout: Language code of the keyboard layout (or none).\n\nxms=true\nems=true\numb=true\nkeyboardlayout=auto\n\n[ipx]\n# ipx: Enable ipx over UDP/IP emulation.\n\nipx=false\n"+(t=r.autoexec,"[autoexec]\necho off\nmount c .\nc:\n\ntype jsdos~1/readme.txt\necho on\n\n".concat(t.options.script.value,"\n\n# Generated using https://js-dos.com\n# █▀▀▀▀▀█ █  ▄▄▄▀▀█ █▀▀▀▀▀█\n# █ ███ █ ██▄ █ ▀ ▄ █ ███ █\n# █ ▀▀▀ █ ▄██ ▀ ▀▀█ █ ▀▀▀ █\n# ▀▀▀▀▀▀▀ ▀ █▄▀▄▀ █ ▀▀▀▀▀▀▀\n# █▀▄▄█▀▀▄▄ ▀ ▀█▄▄▄▄ ▀▄█▀█▀\n# █▀ ▀ ▀▀▄ █▀ ▄ ▄▀▀▀▄ █▀█▄\n# ▄ ▄▄ █▀▀▄ ▄▀▄▀▀█  ▀▀▄▀▀█▀\n#   ▄▀▀█▀▀ █▀█▀█▀▀▄ ▀██▀█▄\n# ▀▀▀ ▀ ▀ █▄█ ▀█▄▄█▀▀▀█▀▀\n# █▀▀▀▀▀█ ▄▄▄ ▄ ▄ █ ▀ █▄▄▄▄\n# █ ███ █ ▀█▀▀▄▀▀▄████▀▀█▄█\n# █ ▀▀▀ █ ▄▀▀█▀█▀▄ ▀▀▄▄█▄█\n# ▀▀▀▀▀▀▀ ▀   ▀▀ ▀  ▀   ▀▀▀\n")),e.abrupt("return",Promise.resolve(n));case 6:case"end":return e.stop()}var t},e)}))).apply(this,arguments)}function P(e){var t="";t+="[".concat(e.name,"]\n");var r,n=s(Object.keys(e.options).sort());try{for(n.s();!(r=n.n()).done;){var o=r.value,i=e.options[o];t+="".concat(i.name,"=").concat(i.value,"\n")}}catch(e){n.e(e)}finally{n.f()}return t}r.AutoexecCategory=v,r.createDosConfig=y,r.toDosboxConf=function(e){return S.apply(this,arguments)}},{"core-js/modules/es6.array.find":101,"core-js/modules/es6.array.from":102,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.function.name":104,"core-js/modules/es6.number.constructor":109,"core-js/modules/es6.number.parse-int":110,"core-js/modules/es6.object.keys":111,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.string.starts-with":121,"core-js/modules/es6.symbol":122,"core-js/modules/es7.object.get-own-property-descriptors":125,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],133:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}e("core-js/modules/es6.function.name"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var c=e("../../../protocol/messages-queue");function n(){var a;return a=regeneratorRuntime.mark(function e(t,r){var n,o,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=new c.MessagesQueue,o=n.handler.bind(n),s=function(e){var t=e.data;"ws-sync-sleep"===(null==t?void 0:t.name)&&t.props.sessionId===r&&postMessage({name:"wc-sync-sleep",props:t.props},"*")},(a={sessionId:r,sendMessageToServer:function(e,t){i.messageHandler({data:{name:e,props:t}})},initMessageHandler:function(e){o=e,n.sendTo(o)},exit:function(){"undefined"!=typeof window&&window.removeEventListener("message",s)}}).module=i={postMessage:function(e,t){o(e,t)}},"undefined"!=typeof window&&window.addEventListener("message",s,{passive:!0}),e.next=10,t.instantiate(i);case 10:return i.callMain([r]),e.abrupt("return",a);case 12:case"end":return e.stop()}},e)}),(n=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}).apply(this,arguments)}r.dosDirect=function(e,t){return n.apply(this,arguments)}},{"../../../protocol/messages-queue":142,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"regenerator-runtime/runtime":128}],134:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}e("core-js/modules/es6.function.name"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var c=e("../../../protocol/messages-queue");function n(){var a;return a=regeneratorRuntime.mark(function e(t,r,n){var o,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return o=new c.MessagesQueue,i=o.handler.bind(o),(s=new Worker(t)).onerror=function(e){i("ws-err",{type:e.type,filename:e.filename,message:e.message})},s.onmessage=function(e){var t=e.data;void 0!==(null==t?void 0:t.name)&&i(t.name,t.props)},e.next=7,r.instantiate({});case 7:a={sessionId:n,sendMessageToServer:function(e,t){s.postMessage({name:e,props:t})},initMessageHandler:function(e){i=e,o.sendTo(i)},exit:function(){s.terminate()}};try{a.sendMessageToServer("wc-install",{module:r.wasmModule,sessionId:n})}catch(e){a.sendMessageToServer("wc-install",{sessionId:n})}return e.abrupt("return",a);case 10:case"end":return e.stop()}},e)}),(n=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}).apply(this,arguments)}r.dosWorker=function(e,t,r){return n.apply(this,arguments)}},{"../../../protocol/messages-queue":142,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"regenerator-runtime/runtime":128}],135:[function(n,e,o){(function(e){"use strict";var t=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(o,"__esModule",{value:!0});var r=t(n("./impl/emulators-impl"));"undefined"!=typeof window&&(window.emulators=r.default),void 0!==e&&(e.emulators=r.default)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./impl/emulators-impl":138}],136:[function(e,t,r){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach(function(e){s(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}e("core-js/modules/es7.object.get-own-property-descriptors"),e("core-js/modules/es6.symbol"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.keys"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var a=e("./cache");r.HTTPRequest=function(r,n){return new Promise(function(e,t){new u(r,i(i({},n),{},{success:e,fail:function(e){t(new Error(e))}}))})};var u=function(){function n(e,t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.xhr=null,this.total=0,this.loaded=0,this.resource=e,this.options=t,this.options.method=t.method||"GET",this.cache=t.cache||new a.CacheNoop,"GET"===this.options.method&&this.cache.get(this.resource).then(function(e){void 0!==r.options.success&&r.options.success(e)}).catch(function(){r.makeHttpRequest()})}var e,t,r;return e=n,(t=[{key:"makeHttpRequest",value:function(){var e,t,r=this;this.xhr=new XMLHttpRequest,this.xhr.open(this.options.method||"GET",this.resource,!0),"POST"===this.options.method&&this.xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded"),this.xhr.overrideMimeType("text/plain; charset=x-user-defined"),"function"==typeof(e=this.xhr).addEventListener&&e.addEventListener("progress",function(e){if(r.total=e.total,r.loaded=e.loaded,r.options.progress)return r.options.progress(e.total,e.loaded)}),"function"==typeof(t=this.xhr).addEventListener&&t.addEventListener("error",function(){if(r.options.fail)return r.options.fail("Unalbe to download '"+r.resource+"', code: "+r.xhr.status),delete r.options.fail}),this.xhr.onreadystatechange=function(){return r.onReadyStateChange()},this.options.responseType&&(this.xhr.responseType=this.options.responseType),this.xhr.send(this.options.data)}},{key:"onReadyStateChange",value:function(){var e=this.xhr;if(4===e.readyState)if(200===e.status){if(this.options.success){var t=Math.max(this.total,this.loaded);return void 0!==this.options.progress&&this.options.progress(t,t),"GET"===this.options.method&&this.resource.indexOf("?")<0&&this.cache.put(this.resource,e.response),this.options.success(e.response)}}else if(this.options.fail)return this.options.fail("Unable to download '"+this.resource+"', code: "+e.status),delete this.options.fail}}])&&o(e.prototype,t),r&&o(e,r),n}()},{"./cache":130,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.object.keys":111,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.symbol":122,"core-js/modules/es7.object.get-own-property-descriptors":125,"core-js/modules/web.dom.iterable":127}],137:[function(e,t,r){"use strict";function a(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});r.CommandInterfaceEventsImpl=function e(){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.delayedStdout=[],this.onStdoutConsumers=[],this.onFrameSizeConsumers=[],this.onFrameConsumers=[],this.onSoundPushConsumers=[],this.onExitConsumers=[],this.onMessageConsumers=[],this.onStdout=function(e){if(s.onStdoutConsumers.push(e),1===s.onStdoutConsumers.length){var t,r=a(s.delayedStdout);try{for(r.s();!(t=r.n()).done;){var n=t.value;s.fireStdout(n)}}catch(e){r.e(e)}finally{r.f()}s.delayedStdout=[]}},this.onFrameSize=function(e){s.onFrameSizeConsumers.push(e)},this.onFrame=function(e){s.onFrameConsumers.push(e)},this.onSoundPush=function(e){s.onSoundPushConsumers.push(e)},this.onExit=function(e){s.onExitConsumers.push(e)},this.onMessage=function(e){s.onMessageConsumers.push(e)},this.fireStdout=function(e){if(0!==s.onStdoutConsumers.length){var t,r=a(s.onStdoutConsumers);try{for(r.s();!(t=r.n()).done;){(0,t.value)(e)}}catch(e){r.e(e)}finally{r.f()}}else s.delayedStdout.push(e)},this.fireFrameSize=function(e,t){var r,n=a(s.onFrameSizeConsumers);try{for(n.s();!(r=n.n()).done;){(0,r.value)(e,t)}}catch(e){n.e(e)}finally{n.f()}},this.fireFrame=function(e){var t,r=a(s.onFrameConsumers);try{for(r.s();!(t=r.n()).done;){(0,t.value)(e)}}catch(e){r.e(e)}finally{r.f()}},this.fireSoundPush=function(e){var t,r=a(s.onSoundPushConsumers);try{for(r.s();!(t=r.n()).done;){(0,t.value)(e)}}catch(e){r.e(e)}finally{r.f()}},this.fireExit=function(){var e,t=a(s.onExitConsumers);try{for(t.s();!(e=t.n()).done;){(0,e.value)()}}catch(e){t.e(e)}finally{t.f()}s.onStdoutConsumers=[],s.onFrameSizeConsumers=[],s.onFrameConsumers=[],s.onSoundPushConsumers=[],s.onExitConsumers=[],s.onMessageConsumers=[]},this.fireMessage=function(e){for(var t=arguments.length,r=new Array(1<t?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var o,i=a(s.onMessageConsumers);try{for(i.s();!(o=i.n()).done;){o.value.apply(void 0,[e].concat(r))}}catch(e){i.e(e)}finally{i.f()}}}},{"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127}],138:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function d(a){return function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("regenerator-runtime/runtime");var n=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var h=e("../build"),m=e("../cache"),v=e("./modules"),y=n(e("../dos/bundle/dos-bundle")),g=e("../dos/dosbox/ts/direct"),_=e("../dos/dosbox/ts/worker"),b=n(e("../janus/janus-impl")),w=e("../protocol/protocol"),o=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.pathPrefix="",this.cacheSeed="",this.cachePromises={}}var t,r,n,o,i,s,a,u,c,l,f;return t=e,(r=[{key:"cache",value:function(e){if(null!=e&&0!==e.length||(e=h.Build.version+" "+this.cacheSeed),void 0===this.cachePromises[e]){var t=m.CacheDb(e,{onErr:console.error});this.cachePromises[e]=t}return this.cachePromises[e]}},{key:"dosBundle",value:(f=d(regeneratorRuntime.mark(function e(){var t,r,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.wasmModules();case 2:return t=e.sent,e.next=5,t.libzip();case 5:return r=e.sent,e.next=8,this.cache();case 8:return n=e.sent,e.abrupt("return",new y.default(r,n));case 10:case"end":return e.stop()}},e,this)})),function(){return f.apply(this,arguments)})},{key:"dosboxNode",value:(l=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dosboxDirect(t));case 1:case"end":return e.stop()}},e,this)})),function(e){return l.apply(this,arguments)})},{key:"dosboxDirect",value:(c=d(regeneratorRuntime.mark(function e(t){var r,n,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.wasmModules();case 2:return r=e.sent,e.next=5,r.dosbox();case 5:return n=e.sent,e.next=8,g.dosDirect(n,"session-"+Date.now());case 8:return o=e.sent,e.abrupt("return",this.backend(t,o));case 10:case"end":return e.stop()}},e,this)})),function(e){return c.apply(this,arguments)})},{key:"dosboxWorker",value:(u=d(regeneratorRuntime.mark(function e(t){var r,n,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.wasmModules();case 2:return r=e.sent,e.next=5,r.dosbox();case 5:return n=e.sent,e.next=8,_.dosWorker(this.pathPrefix+"wdosbox.js",n,"session-"+Date.now());case 8:return o=e.sent,e.abrupt("return",this.backend(t,o));case 10:case"end":return e.stop()}},e,this)})),function(e){return u.apply(this,arguments)})},{key:"janus",value:(a=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",b.default(t));case 1:case"end":return e.stop()}},e)})),function(e){return a.apply(this,arguments)})},{key:"backend",value:(s=d(regeneratorRuntime.mark(function e(o,i){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise(function(t,r){var n=new w.CommandInterfaceOverTransportLayer(Array.isArray(o)?o:[o],i,function(e){null!==e?r(e):setTimeout(function(){return t(n)},4)})}));case 1:case"end":return e.stop()}},e)})),function(e,t){return s.apply(this,arguments)})},{key:"wasmModules",value:function(){var r=this;if(void 0!==this.wasmModulesPromise)return this.wasmModulesPromise;var e=function(){var e=d(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.cache();case 2:return t=e.sent,e.abrupt("return",new v.WasmModulesImpl(r.pathPrefix,t));case 4:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}();return this.wasmModulesPromise=e(),this.wasmModulesPromise}},{key:"dosDirect",value:(i=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dosboxDirect(t));case 1:case"end":return e.stop()}},e,this)})),function(e){return i.apply(this,arguments)})},{key:"dosWorker",value:(o=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dosboxWorker(t));case 1:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})}])&&p(t.prototype,r),n&&p(t,n),e}());r.default=o},{"../build":129,"../cache":130,"../dos/bundle/dos-bundle":131,"../dos/dosbox/ts/direct":133,"../dos/dosbox/ts/worker":134,"../janus/janus-impl":140,"../protocol/protocol":143,"./modules":139,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"regenerator-runtime/runtime":128}],139:[function(o,e,y){"use strict";function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),e}function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}o("core-js/modules/es6.array.from"),o("core-js/modules/es6.function.name"),o("core-js/modules/es6.regexp.to-string"),o("core-js/modules/web.dom.iterable"),o("core-js/modules/es6.array.iterator"),o("core-js/modules/es6.string.iterator"),o("core-js/modules/es6.regexp.replace"),o("regenerator-runtime/runtime"),o("core-js/modules/es6.promise"),o("core-js/modules/es6.object.to-string"),o("core-js/modules/es7.symbol.async-iterator"),o("core-js/modules/es6.symbol"),o("core-js/modules/es6.math.trunc"),o("core-js/modules/es6.math.clz32"),o("core-js/modules/es6.math.fround"),o("core-js/modules/es6.math.imul"),o("core-js/modules/es6.typed.uint8-array"),Object.defineProperty(y,"__esModule",{value:!0});var _=o("../http");y.host=new function e(){if(a(this,e),this.wasmSupported=!1,this.globals="undefined"==typeof window?{}:window,this.globals.exports||(this.globals.exports={}),this.globals.compiled||(this.globals.compiled={}),"object"===("undefined"==typeof WebAssembly?"undefined":r(WebAssembly))&&"function"==typeof WebAssembly.instantiate&&"function"==typeof WebAssembly.compile){var t=new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0));t instanceof WebAssembly.Module&&(this.wasmSupported=new WebAssembly.Instance(t)instanceof WebAssembly.Instance)}Math.imul&&-5===Math.imul(4294967295,5)||(Math.imul=function(e,t){var r=65535&e,n=65535&t;return r*n+((e>>>16)*n+r*(t>>>16)<<16)|0}),Math.imul=Math.imul,Math.fround||(Math.fround=function(e){return e}),Math.fround=Math.fround,Math.clz32||(Math.clz32=function(e){e>>>=0;for(var t=0;t<32;t++)if(e&1<<31-t)return t;return 32}),Math.clz32=Math.clz32,Math.trunc||(Math.trunc=function(e){return e<0?Math.ceil(e):Math.floor(e)}),Math.trunc=Math.trunc};var t=function(){function r(e,t){a(this,r),this.wasmSupported=!1,0<e.length&&"/"!==e[e.length-1]&&(e+="/"),this.pathPrefix=e,this.cache=t}return s(r,[{key:"libzip",value:function(){return void 0!==this.libzipPromise||(this.libzipPromise=this.loadModule(this.pathPrefix+"wlibzip.js","WLIBZIP")),this.libzipPromise}},{key:"dosbox",value:function(){return void 0!==this.dosboxPromise||(this.dosboxPromise=this.loadModule(this.pathPrefix+"wdosbox.js","WDOSBOX")),this.dosboxPromise}},{key:"loadModule",value:function(e,t){return c(e,t,this.cache,function(){})}}]),r}();function c(e,t,r,n){return"undefined"==typeof XMLHttpRequest?function(e,t){if(void 0!==y.host.globals.compiled[t])return y.host.globals.compiled[t];var r=o(e),n=Promise.resolve(new l(r));t&&(y.host.globals.compiled[t]=n);return n}(e,t):function(p,h,m,v){if(void 0!==y.host.globals.compiled[h])return y.host.globals.compiled[h];function e(){var a;return a=regeneratorRuntime.mark(function e(){var t,r,n,o,i,s,a,u,c,l,f,d;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=p.lastIndexOf("/"),r=p.indexOf("w",t),n=r===t+1&&0<=r,y.host.wasmSupported&&n){e.next=5;break}throw new Error("Starting from js-dos 6.22.60 js environment is not supported");case 5:return o=p.replace(".js",".wasm"),i=_.HTTPRequest(o,{cache:m,responseType:"arraybuffer",progress:function(e,t){v("Resolving DosBox ("+p+")",e,t)}}),s=_.HTTPRequest(p,{cache:m,progress:function(e,t){v("Resolving DosBox",e,t)}}),e.next=10,Promise.all([i,s]);case 10:return a=e.sent,u=g(a,2),c=u[0],l=u[1],e.next=16,WebAssembly.compile(c);case 16:return f=e.sent,d=function(e,t){e.env=e.env||{},WebAssembly.instantiate(f,e).then(function(e){return t(e,f)})},eval.call(window,l),e.abrupt("return",new b(f,y.host.globals.exports[h],d));case 20:case"end":return e.stop()}},e)}),(e=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}).apply(this,arguments)}var t=function(){return e.apply(this,arguments)}();h&&(y.host.globals.compiled[h]=t);return t}(e,t,r,n)}y.WasmModulesImpl=t,y.loadWasmModule=c;var l=function(){function t(e){a(this,t),this.emModule=e}return s(t,[{key:"instantiate",value:function(t){var r=this;return new Promise(function(e){t.onRuntimeInitialized=function(){e()},new r.emModule(t)})}}]),t}(),b=function(){function n(e,t,r){a(this,n),this.wasmModule=e,this.module=t,this.instantiateWasm=r}return s(n,[{key:"instantiate",value:function(t){var r=this;return new Promise(function(e){t.instantiateWasm=r.instantiateWasm,t.onRuntimeInitialized=function(){e()},new r.module(t)})}}]),n}()},{"../http":136,"core-js/modules/es6.array.from":102,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.function.name":104,"core-js/modules/es6.math.clz32":105,"core-js/modules/es6.math.fround":106,"core-js/modules/es6.math.imul":107,"core-js/modules/es6.math.trunc":108,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.replace":117,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],140:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function c(a){return function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}}function m(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.number.constructor"),e("core-js/modules/es6.number.parse-int"),e("core-js/modules/es6.regexp.split"),e("core-js/modules/es6.string.starts-with"),Object.defineProperty(r,"__esModule",{value:!0});var a=e("../impl/ci-impl");function l(o,i){var s="";return function e(t){var r=t.indexOf("\n");if(-1===r)s+=t;else{var n=s+t.substr(0,r);s="";try{o(function(e){for(var t=atob(e),r=new Uint8Array(t.length),n=0;n<r.length;n++)r[n]=t.charCodeAt(n);return(new TextDecoder).decode(r)}(n))}catch(e){i(e)}e(t.substr(r+1))}}}var f=function(){function r(e,t){var h=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.live=!0,this.startedAt=Date.now(),this.exitResolveFn=function(){},this.configResolveFn=function(){},this.handleResolveFn=function(){},this.keyMatrix={},this.frameWidth=0,this.frameHeight=0,this.eventQueue="",this.eventIntervalId=-1,this.rttIntervalId=-1,this.logIntervalId=-1,this.logColor="not set",this.logWhiteMs=0,this.logRedMs=0,this.logYellowMs=0,this.onDataMessage=function(e){if(e.startsWith("config="))h.configResolveFn(JSON.parse(e.substr("config=".length)));else if(e.startsWith("frame=")){var t=m(e.substr("frame=".length).split("x"),2),r=t[0],n=t[1];h.frameWidth=Number.parseInt(r,10)||0,h.frameHeight=Number.parseInt(n,10)||0}else if(e.startsWith("rtt=")){var o,i=m(e.substr("rtt=".length).split(" "),3),s=i[0],a=i[1],u=i[2],c=Number.parseInt(a,10),l=Number.parseInt(u,10),f=Date.now(),d=(null===(o=h.handle)||void 0===o?void 0:o.getBitrate())||"0 kbits/sec",p=Number.parseInt(d.split(" ")[0],10);h.sendPipeMessage("rtt-data",Date.now(),c,l,f,p),s===h.opaqueId&&h.eventsImpl.fireStdout("rtt-data="+(f-c)+" "+p)}else if(e.startsWith("log-visual-"))switch(e){case"log-visual-white":h.eventsImpl.fireStdout("yellow-frame:"+(Date.now()-h.logYellowMs));break;case"log-visual-red":h.eventsImpl.fireStdout("white-frame:"+(Date.now()-h.logWhiteMs));break;case"log-visual-yellow":h.eventsImpl.fireStdout("red-frame:"+(Date.now()-h.logRedMs))}else if(e.startsWith("log-command-"))switch(e){case"log-command-white":h.eventsImpl.fireStdout("yellow-pipe:"+(Date.now()-h.logYellowMs));break;case"log-command-red":h.eventsImpl.fireStdout("white-pipe:"+(Date.now()-h.logWhiteMs));break;case"log-command-yellow":h.eventsImpl.fireStdout("red-pipe:"+(Date.now()-h.logRedMs))}else h.eventsImpl.fireStdout(e)},this.onJanusMessage=function(t,e,r){null!=r&&t.createAnswer({jsep:r,media:{audioSend:!1,videoSend:!1,data:!0},success:function(e){h.fireMessage("started"),t.send({message:{request:"start"},jsep:e})},error:h.onError})},this.onError=function(e){h.fireMessage("error",e)},this.eventsImpl=new a.CommandInterfaceEventsImpl,this.janus=e,this.opaqueId=t,this.exitPromise=new Promise(function(e){h.exitResolveFn=e}),this.configPromise=new Promise(function(e){h.configResolveFn=e}),this.handlePromise=new Promise(function(t,r){h.handleResolveFn=function(e){h.handle=e,h.live?(setTimeout(function(){h.live&&e.data({text:"pipe "+h.opaqueId+" config"})},1e3),h.config().then(function(){h.live&&(h.eventIntervalId=setInterval(function(){h.sendEventsData(e)},8),h.rttIntervalId=setInterval(function(){h.sendPipeMessage("rtt",Date.now())},1e3))}),t(e)):r(new Error("exit() was called"))}}),this.attach()}var e,t,n,o,i;return e=r,(t=[{key:"fireMessage",value:function(e){for(var t,r=arguments.length,n=new Array(1<r?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];(t=this.eventsImpl).fireMessage.apply(t,[e].concat(n))}},{key:"attach",value:function(){var r,n=this;this.janus.attach({plugin:"janus.plugin.streaming",opaqueId:this.opaqueId,error:this.onError,success:function(e){r=e,n.fireMessage("attached"),e.send({message:{request:"watch",id:1}})},onmessage:function(e,t){n.onJanusMessage(r,e,t)},onremotestream:function(e){n.fireMessage("onremotestream",e)},ondataopen:function(){return n.handleResolveFn(r)},ondata:l(this.onDataMessage,this.onError)})}},{key:"onDestroyed",value:function(){this.fireMessage("destroyed"),this.exitResolveFn()}},{key:"config",value:(i=c(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.configPromise);case 1:case"end":return e.stop()}},e,this)})),function(){return i.apply(this,arguments)})},{key:"width",value:function(){return this.frameWidth}},{key:"height",value:function(){return this.frameHeight}},{key:"soundFrequency",value:function(){return 44100}},{key:"screenshot",value:function(){return Promise.reject(new Error("Not supported"))}},{key:"simulateKeyPress",value:function(){for(var t=this,r=Date.now()-this.startedAt,e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];n.forEach(function(e){return t.addKey(e,!0,r)}),n.forEach(function(e){return t.addKey(e,!1,16+r)})}},{key:"sendKeyEvent",value:function(e,t){this.addKey(e,t,Date.now()-this.startedAt)}},{key:"addKey",value:function(e,t,r){if(!0===this.keyMatrix[e]!==t&&(this.keyMatrix[e]=t,this.sendPipeMessage("k"+(t?"down":"up"),e,r),-1!==this.logIntervalId&&t))switch(this.logColor){case"white":this.logWhiteMs=Date.now();break;case"red":this.logRedMs=Date.now();break;case"yellow":this.logYellowMs=Date.now()}}},{key:"sendMouseMotion",value:function(e,t){this.sendPipeMessage("mmove",e,t,Date.now()-this.startedAt)}},{key:"sendMouseRelativeMotion",value:function(){throw new Error("not implemented")}},{key:"sendMouseButton",value:function(e,t){this.sendPipeMessage("m"+(t?"down":"up"),e,Date.now()-this.startedAt)}},{key:"sendMouseSync",value:function(){this.sendPipeMessage("msync",Date.now()-this.startedAt)}},{key:"logVisual",value:function(s){var a=this;this.sendPipeMessage("log-visual-on");var e=document.createElement("canvas"),u=e.getContext("2d");e.width=1,e.height=1,this.logIntervalId=setInterval(c(regeneratorRuntime.mark(function e(){var t,r,n,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=Date.now(),null!=u&&u.drawImage(s,0,0,1,1,0,0,1,1),n=null==u||null===(t=u.getImageData(0,0,1,1))||void 0===t?void 0:t.data,o=Date.now()-r,i="not set",200<n[0]&&200<n[1]&&200<n[2]?i="white":200<n[0]&&n[1]<200&&n[2]<200?i="red":200<n[0]&&200<n[1]&&n[2]<200&&(i="yellow"),i===a.logColor){e.next=17;break}e.t0=i,e.next="white"===e.t0?10:"red"===e.t0?12:"yellow"===e.t0?14:16;break;case 10:return a.eventsImpl.fireStdout("yellow-stream:"+(Date.now()-a.logYellowMs-o)),e.abrupt("break",16);case 12:return a.eventsImpl.fireStdout("white-stream:"+(Date.now()-a.logWhiteMs-o)),e.abrupt("break",16);case 14:return a.eventsImpl.fireStdout("red-stream:"+(Date.now()-a.logRedMs-o)),e.abrupt("break",16);case 16:a.logColor=i;case 17:case"end":return e.stop()}},e)})),16)}},{key:"sendPipeMessage",value:function(){this.eventQueue+="pipe "+this.opaqueId;for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n=0,o=t;n<o.length;n++){var i=o[n];this.eventQueue+=" "+i}this.eventQueue+="\n"}},{key:"sendEventsData",value:(o=c(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(0===this.eventQueue.length)return e.abrupt("return");e.next=2;break;case 2:t.data({text:this.eventQueue}),this.eventQueue="";case 4:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})},{key:"persist",value:function(){return Promise.reject(new Error("Not supported"))}},{key:"pause",value:function(){console.warn("pause/resume is not implemented")}},{key:"resume",value:function(){}},{key:"mute",value:function(){console.warn("mute/unmute is not implemented")}},{key:"unmute",value:function(){}},{key:"exit",value:function(){return this.live=!1,clearInterval(this.logIntervalId),this.logIntervalId=-1,clearInterval(this.eventIntervalId),this.eventIntervalId=-1,clearInterval(this.rttIntervalId),this.rttIntervalId=-1,this.janus.destroy(),this.exitPromise}},{key:"events",value:function(){return this.eventsImpl}}])&&s(e.prototype,t),n&&s(e,n),r}();r.default=function(s,e){var a=e||window.Janus;return void 0===a?Promise.reject(new Error("Janus is not defined, you should load janus.js before this")):a.isWebrtcSupported()?new Promise(function(e,t){var r=null,n={error:function(e){null===r?t(e):r.onError(e)},destroyed:function(){null!==r&&r.onDestroyed()}},o={server:s,success:function(){r=new f(i,"js-dos-"+a.randomString(12)),e(r)},error:n.error,destroyed:n.destroyed,destroyOnUnload:!0},i=new a(o)}):Promise.reject(new Error("WebRTC not supported"))}},{"../impl/ci-impl":137,"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.number.constructor":109,"core-js/modules/es6.number.parse-int":110,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.split":118,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.string.starts-with":121,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],141:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.regexp.constructor"),e("core-js/modules/es6.regexp.replace"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.regexp.split"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function r(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.module=e,this.home=t,this.module.callMain([]),this.chdirToHome()}var e,t,n,a,o;return e=r,(t=[{key:"zipFromFs",value:function(e){var t=0<arguments.length&&void 0!==e?e:-1;this.chdirToHome();var r=this.module._zip_from_fs(t);if(0===r)return Promise.reject(new Error("Can't create zip, see more info in logs"));var n=this.module.HEAPU32[r/4],o=this.module.HEAPU8.slice(r+4,r+4+n);return this.module._free(r),Promise.resolve(o)}},{key:"zipToFs",value:function(e,t){var r=1<arguments.length&&void 0!==t?t:"/";r=this.normalizeFilename(r);var n=this.normalizeFilename(r).split("/");this.createPath(n,0,n.length),this.chdir(r);var o=new Uint8Array(e),i=this.module._malloc(o.length);this.module.HEAPU8.set(o,i);var s=this.module._zip_to_fs(i,o.length);return this.module._free(i),this.chdirToHome(),0===s?Promise.resolve():Promise.reject(new Error("Can't extract zip, retcode "+s+", see more info in logs"))}},{key:"writeFile",value:function(e,t){e=this.normalizeFilename(e),t instanceof ArrayBuffer&&(t=new Uint8Array(t));var r=e.split("/");if(0===r.length)throw new Error("Can't create file '"+e+"', because it's not valid file path");var n=r[r.length-1].trim();if(0===n.length)throw new Error("Can't create file '"+e+"', because file name is empty");var o=this.createPath(r,0,r.length-1);this.module.FS.writeFile(o+"/"+n,t)}},{key:"readFile",value:(a=regeneratorRuntime.mark(function e(t){var r,n=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=1<n.length&&void 0!==n[1]?n[1]:"utf8",t=this.normalizeFilename(t),e.abrupt("return",this.module.FS.readFile(t,{encoding:r}));case 3:case"end":return e.stop()}},e,this)}),o=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})},function(e){return o.apply(this,arguments)})},{key:"exists",value:function(e){e=this.normalizeFilename(e);try{return this.module.FS.lookupPath(e),!0}catch(e){return!1}}},{key:"destroy",value:function(){try{this.module._libzip_destroy()}catch(e){return e}}},{key:"normalizeFilename",value:function(e){for(e=e.replace(new RegExp("^[a-zA-z]+:"),"").replace(new RegExp("\\\\","g"),"/");"/"===e[0];)e=e.substr(1);return e}},{key:"createPath",value:function(e,t,r){for(var n=".",o=t;o<r;++o){var i=e[o].trim();0!==i.length&&(this.module.FS.createPath(n,i,!0,!0),n=n+"/"+i)}return n}},{key:"chdirToHome",value:function(){this.module.FS.chdir(this.home)}},{key:"chdir",value:function(e){this.module.FS.chdir(this.home+"/"+e)}}])&&i(e.prototype,t),n&&i(e,n),r}();r.default=n},{"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.constructor":114,"core-js/modules/es6.regexp.replace":117,"core-js/modules/es6.regexp.split":118,"core-js/modules/es6.typed.uint8-array":123,"regenerator-runtime/runtime":128}],142:[function(e,t,r){"use strict";function o(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.function.name"),Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.messages=[]}var t,r,n;return t=e,(r=[{key:"handler",value:function(e,t){this.messages.push({name:e,props:t})}},{key:"sendTo",value:function(e){var t,r=o(this.messages);try{for(r.s();!(t=r.n()).done;){var n=t.value;e(n.name,n.props)}}catch(e){r.e(e)}finally{r.f()}this.messages=[]}}])&&i(t.prototype,r),n&&i(t,n),e}();r.MessagesQueue=n},{"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127}],143:[function(e,t,r){"use strict";function i(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.typed.uint8-clamped-array"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.typed.uint8-array"),Object.defineProperty(r,"__esModule",{value:!0});var s=e("../impl/ci-impl"),o=function(){function o(e,t,r){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.startedAt=Date.now(),this.frameWidth=0,this.frameHeight=0,this.rgb=new Uint8Array,this.freq=0,this.eventsImpl=new s.CommandInterfaceEventsImpl,this.keyMatrix={},this.configResolve=function(){},this.panicMessages=[],this.bundles=e,this.transport=t,this.ready=r,this.configPromise=new Promise(function(e){return n.configResolve=e}),this.transport.initMessageHandler(this.onServerMessage.bind(this))}var e,t,r;return e=o,(t=[{key:"sendClientMessage",value:function(e,t){(t=t||{}).sessionId=t.sessionId||this.transport.sessionId,this.transport.sendMessageToServer(e,t)}},{key:"onServerMessage",value:function(e,t){if(!(void 0===e||e.length<3||"w"!==e[0]||"s"!==e[1]||"-"!==e[2])&&void 0!==t&&t.sessionId===this.transport.sessionId)switch(e){case"ws-ready":this.sendClientMessage("wc-run",{bundles:this.bundles}),delete this.bundles;break;case"ws-server-ready":0<this.panicMessages.length?(void 0!==this.transport.exit&&this.transport.exit(),this.ready(new Error(JSON.stringify(this.panicMessages)))):this.ready(null),delete this.ready;break;case"ws-frame-set-size":this.onFrameSize(t.width,t.height);break;case"ws-update-lines":this.onFrameLines(t.lines);break;case"ws-exit":this.onExit();break;case"ws-log":this.onLog(t.tag,t.message);break;case"ws-warn":this.onWarn(t.tag,t.message);break;case"ws-err":this.onErr(t.tag,t.message);break;case"ws-stdout":this.onStdout(t.message);break;case"ws-persist":this.onPersist(t.bundle);break;case"ws-sound-init":this.onSoundInit(t.freq);break;case"ws-sound-push":this.onSoundPush(t.samples);break;case"ws-config":this.onConfig(JSON.parse(t.content));break;case"ws-sync-sleep":this.sendClientMessage("wc-sync-sleep",t);break;default:console.log("Unknown server message (ws):",e)}}},{key:"onConfig",value:function(e){this.configResolve(e)}},{key:"onFrameSize",value:function(e,t){this.frameWidth===e&&this.frameHeight===t||(this.frameWidth=e,this.frameHeight=t,this.rgb=new Uint8Array(e*t*3),this.eventsImpl.fireFrameSize(e,t))}},{key:"onFrameLines",value:function(e){var t,r=i(e);try{for(r.s();!(t=r.n()).done;){var n=t.value;this.rgb.set(n.heapu8,n.start*this.frameWidth*3)}}catch(e){r.e(e)}finally{r.f()}this.eventsImpl.fireFrame(this.rgb)}},{key:"onSoundInit",value:function(e){this.freq=e}},{key:"onSoundPush",value:function(e){this.eventsImpl.fireSoundPush(e)}},{key:"onLog",value:function(e,t){this.eventsImpl.fireMessage("log","["+e+"]"+t)}},{key:"onWarn",value:function(e,t){this.eventsImpl.fireMessage("warn","["+e+"]"+t)}},{key:"onErr",value:function(e,t){"panic"===e?(this.panicMessages.push(t),console.error("["+e+"]"+t)):console.log("["+e+"]"+t),this.eventsImpl.fireMessage("error","["+e+"]"+t)}},{key:"onStdout",value:function(e){this.eventsImpl.fireStdout(e)}},{key:"config",value:function(){return this.configPromise}},{key:"width",value:function(){return this.frameWidth}},{key:"height",value:function(){return this.frameHeight}},{key:"soundFrequency",value:function(){return this.freq}},{key:"screenshot",value:function(){for(var e=new Uint8ClampedArray(this.rgb.length/3*4),t=0,r=0;r<e.length;)e[r++]=this.rgb[t++],e[r++]=this.rgb[t++],e[r++]=this.rgb[t++],e[r++]=255;return Promise.resolve(new ImageData(e,this.frameWidth,this.frameHeight))}},{key:"simulateKeyPress",value:function(){for(var t=this,r=Date.now()-this.startedAt,e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];n.forEach(function(e){return t.addKey(e,!0,r)}),n.forEach(function(e){return t.addKey(e,!1,16+r)})}},{key:"sendKeyEvent",value:function(e,t){this.addKey(e,t,Date.now()-this.startedAt)}},{key:"addKey",value:function(e,t,r){!0===this.keyMatrix[e]!==t&&(this.keyMatrix[e]=t,this.sendClientMessage("wc-add-key",{key:e,pressed:t,timeMs:r}))}},{key:"sendMouseMotion",value:function(e,t){this.sendClientMessage("wc-mouse-move",{x:e,y:t,relative:!1,timeMs:Date.now()-this.startedAt})}},{key:"sendMouseRelativeMotion",value:function(e,t){this.sendClientMessage("wc-mouse-move",{x:e,y:t,relative:!0,timeMs:Date.now()-this.startedAt})}},{key:"sendMouseButton",value:function(e,t){this.sendClientMessage("wc-mouse-button",{button:e,pressed:t,timeMs:Date.now()-this.startedAt})}},{key:"sendMouseSync",value:function(){this.sendClientMessage("wc-mouse-sync",{timeMs:Date.now()-this.startedAt})}},{key:"persist",value:function(){var t=this;if(void 0!==this.persistPromise)return this.persistPromise;var e=new Promise(function(e){return t.persistResolve=e});return this.persistPromise=e,this.sendClientMessage("wc-pack-fs-to-bundle"),e}},{key:"onPersist",value:function(e){this.persistResolve&&(this.persistResolve(e),delete this.persistPromise,delete this.persistResolve)}},{key:"pause",value:function(){this.sendClientMessage("wc-pause")}},{key:"resume",value:function(){this.sendClientMessage("wc-resume")}},{key:"mute",value:function(){this.sendClientMessage("wc-mute")}},{key:"unmute",value:function(){this.sendClientMessage("wc-unmute")}},{key:"exit",value:function(){var t=this;return void 0!==this.exitPromise||(this.exitPromise=new Promise(function(e){return t.exitResolve=e}),this.exitPromise.then(function(){t.events().fireExit()}),this.resume(),this.sendClientMessage("wc-exit")),this.exitPromise}},{key:"onExit",value:function(){void 0!==this.transport.exit&&this.transport.exit(),this.exitResolve&&(this.exitResolve(),delete this.exitPromise,delete this.exitResolve)}},{key:"events",value:function(){return this.eventsImpl}}])&&n(e.prototype,t),r&&n(e,r),o}();r.CommandInterfaceOverTransportLayer=o},{"../impl/ci-impl":137,"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es6.typed.uint8-clamped-array":124,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127}]},{},[135]);


!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).zip={})}(this,(function(e){"use strict";const t=-2,n=-3,i=-5,r=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],a=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],s=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],o=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],c=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],l=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],d=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],u=15;function f(){let e,t,r,a,s,f;function h(e,t,o,c,l,d,h,_,w,p,b){let g,y,x,m,k,v,A,R,U,E,S,z,D,T,F;E=0,k=o;do{r[e[t+E]]++,E++,k--}while(0!==k);if(r[0]==o)return h[0]=-1,_[0]=0,0;for(R=_[0],v=1;v<=u&&0===r[v];v++);for(A=v,R<v&&(R=v),k=u;0!==k&&0===r[k];k--);for(x=k,R>k&&(R=k),_[0]=R,T=1<<v;v<k;v++,T<<=1)if((T-=r[v])<0)return n;if((T-=r[k])<0)return n;for(r[k]+=T,f[1]=v=0,E=1,D=2;0!=--k;)f[D]=v+=r[E],D++,E++;k=0,E=0;do{0!==(v=e[t+E])&&(b[f[v]++]=k),E++}while(++k<o);for(o=f[x],f[0]=k=0,E=0,m=-1,z=-R,s[0]=0,S=0,F=0;A<=x;A++)for(g=r[A];0!=g--;){for(;A>z+R;){if(m++,z+=R,F=x-z,F=F>R?R:F,(y=1<<(v=A-z))>g+1&&(y-=g+1,D=A,v<F))for(;++v<F&&!((y<<=1)<=r[++D]);)y-=r[D];if(F=1<<v,p[0]+F>1440)return n;s[m]=S=p[0],p[0]+=F,0!==m?(f[m]=k,a[0]=v,a[1]=R,v=k>>>z-R,a[2]=S-s[m-1]-v,w.set(a,3*(s[m-1]+v))):h[0]=S}for(a[1]=A-z,E>=o?a[0]=192:b[E]<c?(a[0]=b[E]<256?0:96,a[2]=b[E++]):(a[0]=d[b[E]-c]+16+64,a[2]=l[b[E++]-c]),y=1<<A-z,v=k>>>z;v<F;v+=y)w.set(a,3*(S+v));for(v=1<<A-1;0!=(k&v);v>>>=1)k^=v;for(k^=v,U=(1<<z)-1;(k&U)!=f[m];)m--,z-=R,U=(1<<z)-1}return 0!==T&&1!=x?i:0}function _(n){let i;for(e||(e=[],t=[],r=new Int32Array(16),a=[],s=new Int32Array(u),f=new Int32Array(16)),t.length<n&&(t=[]),i=0;i<n;i++)t[i]=0;for(i=0;i<16;i++)r[i]=0;for(i=0;i<3;i++)a[i]=0;s.set(r.subarray(0,u),0),f.set(r.subarray(0,16),0)}this.inflate_trees_bits=function(r,a,s,o,c){let l;return _(19),e[0]=0,l=h(r,0,19,19,null,null,s,a,o,e,t),l==n?c.msg="oversubscribed dynamic bit lengths tree":l!=i&&0!==a[0]||(c.msg="incomplete dynamic bit lengths tree",l=n),l},this.inflate_trees_dynamic=function(r,a,s,u,f,w,p,b,g){let y;return _(288),e[0]=0,y=h(s,0,r,257,o,c,w,u,b,e,t),0!=y||0===u[0]?(y==n?g.msg="oversubscribed literal/length tree":-4!=y&&(g.msg="incomplete literal/length tree",y=n),y):(_(288),y=h(s,r,a,0,l,d,p,f,b,e,t),0!=y||0===f[0]&&r>257?(y==n?g.msg="oversubscribed distance tree":y==i?(g.msg="incomplete distance tree",y=n):-4!=y&&(g.msg="empty distance tree with lengths",y=n),y):0)}}f.inflate_trees_fixed=function(e,t,n,i){return e[0]=9,t[0]=5,n[0]=a,i[0]=s,0};function h(){const e=this;let i,a,s,o,c=0,l=0,d=0,u=0,f=0,h=0,_=0,w=0,p=0,b=0;function g(e,t,i,a,s,o,c,l){let d,u,f,h,_,w,p,b,g,y,x,m,k,v,A,R;p=l.next_in_index,b=l.avail_in,_=c.bitb,w=c.bitk,g=c.write,y=g<c.read?c.read-g-1:c.end-g,x=r[e],m=r[t];do{for(;w<20;)b--,_|=(255&l.read_byte(p++))<<w,w+=8;if(d=_&x,u=i,f=a,R=3*(f+d),0!==(h=u[R]))for(;;){if(_>>=u[R+1],w-=u[R+1],0!=(16&h)){for(h&=15,k=u[R+2]+(_&r[h]),_>>=h,w-=h;w<15;)b--,_|=(255&l.read_byte(p++))<<w,w+=8;for(d=_&m,u=s,f=o,R=3*(f+d),h=u[R];;){if(_>>=u[R+1],w-=u[R+1],0!=(16&h)){for(h&=15;w<h;)b--,_|=(255&l.read_byte(p++))<<w,w+=8;if(v=u[R+2]+(_&r[h]),_>>=h,w-=h,y-=k,g>=v)A=g-v,g-A>0&&2>g-A?(c.window[g++]=c.window[A++],c.window[g++]=c.window[A++],k-=2):(c.window.set(c.window.subarray(A,A+2),g),g+=2,A+=2,k-=2);else{A=g-v;do{A+=c.end}while(A<0);if(h=c.end-A,k>h){if(k-=h,g-A>0&&h>g-A)do{c.window[g++]=c.window[A++]}while(0!=--h);else c.window.set(c.window.subarray(A,A+h),g),g+=h,A+=h,h=0;A=0}}if(g-A>0&&k>g-A)do{c.window[g++]=c.window[A++]}while(0!=--k);else c.window.set(c.window.subarray(A,A+k),g),g+=k,A+=k,k=0;break}if(0!=(64&h))return l.msg="invalid distance code",k=l.avail_in-b,k=w>>3<k?w>>3:k,b+=k,p-=k,w-=k<<3,c.bitb=_,c.bitk=w,l.avail_in=b,l.total_in+=p-l.next_in_index,l.next_in_index=p,c.write=g,n;d+=u[R+2],d+=_&r[h],R=3*(f+d),h=u[R]}break}if(0!=(64&h))return 0!=(32&h)?(k=l.avail_in-b,k=w>>3<k?w>>3:k,b+=k,p-=k,w-=k<<3,c.bitb=_,c.bitk=w,l.avail_in=b,l.total_in+=p-l.next_in_index,l.next_in_index=p,c.write=g,1):(l.msg="invalid literal/length code",k=l.avail_in-b,k=w>>3<k?w>>3:k,b+=k,p-=k,w-=k<<3,c.bitb=_,c.bitk=w,l.avail_in=b,l.total_in+=p-l.next_in_index,l.next_in_index=p,c.write=g,n);if(d+=u[R+2],d+=_&r[h],R=3*(f+d),0===(h=u[R])){_>>=u[R+1],w-=u[R+1],c.window[g++]=u[R+2],y--;break}}else _>>=u[R+1],w-=u[R+1],c.window[g++]=u[R+2],y--}while(y>=258&&b>=10);return k=l.avail_in-b,k=w>>3<k?w>>3:k,b+=k,p-=k,w-=k<<3,c.bitb=_,c.bitk=w,l.avail_in=b,l.total_in+=p-l.next_in_index,l.next_in_index=p,c.write=g,0}e.init=function(e,t,n,r,c,l){i=0,_=e,w=t,s=n,p=r,o=c,b=l,a=null},e.proc=function(e,y,x){let m,k,v,A,R,U,E,S=0,z=0,D=0;for(D=y.next_in_index,A=y.avail_in,S=e.bitb,z=e.bitk,R=e.write,U=R<e.read?e.read-R-1:e.end-R;;)switch(i){case 0:if(U>=258&&A>=10&&(e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,x=g(_,w,s,p,o,b,e,y),D=y.next_in_index,A=y.avail_in,S=e.bitb,z=e.bitk,R=e.write,U=R<e.read?e.read-R-1:e.end-R,0!=x)){i=1==x?7:9;break}d=_,a=s,l=p,i=1;case 1:for(m=d;z<m;){if(0===A)return e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);x=0,A--,S|=(255&y.read_byte(D++))<<z,z+=8}if(k=3*(l+(S&r[m])),S>>>=a[k+1],z-=a[k+1],v=a[k],0===v){u=a[k+2],i=6;break}if(0!=(16&v)){f=15&v,c=a[k+2],i=2;break}if(0==(64&v)){d=v,l=k/3+a[k+2];break}if(0!=(32&v)){i=7;break}return i=9,y.msg="invalid literal/length code",x=n,e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);case 2:for(m=f;z<m;){if(0===A)return e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);x=0,A--,S|=(255&y.read_byte(D++))<<z,z+=8}c+=S&r[m],S>>=m,z-=m,d=w,a=o,l=b,i=3;case 3:for(m=d;z<m;){if(0===A)return e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);x=0,A--,S|=(255&y.read_byte(D++))<<z,z+=8}if(k=3*(l+(S&r[m])),S>>=a[k+1],z-=a[k+1],v=a[k],0!=(16&v)){f=15&v,h=a[k+2],i=4;break}if(0==(64&v)){d=v,l=k/3+a[k+2];break}return i=9,y.msg="invalid distance code",x=n,e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);case 4:for(m=f;z<m;){if(0===A)return e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);x=0,A--,S|=(255&y.read_byte(D++))<<z,z+=8}h+=S&r[m],S>>=m,z-=m,i=5;case 5:for(E=R-h;E<0;)E+=e.end;for(;0!==c;){if(0===U&&(R==e.end&&0!==e.read&&(R=0,U=R<e.read?e.read-R-1:e.end-R),0===U&&(e.write=R,x=e.inflate_flush(y,x),R=e.write,U=R<e.read?e.read-R-1:e.end-R,R==e.end&&0!==e.read&&(R=0,U=R<e.read?e.read-R-1:e.end-R),0===U)))return e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);e.window[R++]=e.window[E++],U--,E==e.end&&(E=0),c--}i=0;break;case 6:if(0===U&&(R==e.end&&0!==e.read&&(R=0,U=R<e.read?e.read-R-1:e.end-R),0===U&&(e.write=R,x=e.inflate_flush(y,x),R=e.write,U=R<e.read?e.read-R-1:e.end-R,R==e.end&&0!==e.read&&(R=0,U=R<e.read?e.read-R-1:e.end-R),0===U)))return e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);x=0,e.window[R++]=u,U--,i=0;break;case 7:if(z>7&&(z-=8,A++,D--),e.write=R,x=e.inflate_flush(y,x),R=e.write,U=R<e.read?e.read-R-1:e.end-R,e.read!=e.write)return e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);i=8;case 8:return x=1,e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);case 9:return x=n,e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x);default:return x=t,e.bitb=S,e.bitk=z,y.avail_in=A,y.total_in+=D-y.next_in_index,y.next_in_index=D,e.write=R,e.inflate_flush(y,x)}},e.free=function(){}}const _=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function w(e,a){const s=this;let o,c=0,l=0,d=0,u=0;const w=[0],p=[0],b=new h;let g=0,y=new Int32Array(4320);const x=new f;s.bitk=0,s.bitb=0,s.window=new Uint8Array(a),s.end=a,s.read=0,s.write=0,s.reset=function(e,t){t&&(t[0]=0),6==c&&b.free(e),c=0,s.bitk=0,s.bitb=0,s.read=s.write=0},s.reset(e,null),s.inflate_flush=function(e,t){let n,r,a;return r=e.next_out_index,a=s.read,n=(a<=s.write?s.write:s.end)-a,n>e.avail_out&&(n=e.avail_out),0!==n&&t==i&&(t=0),e.avail_out-=n,e.total_out+=n,e.next_out.set(s.window.subarray(a,a+n),r),r+=n,a+=n,a==s.end&&(a=0,s.write==s.end&&(s.write=0),n=s.write-a,n>e.avail_out&&(n=e.avail_out),0!==n&&t==i&&(t=0),e.avail_out-=n,e.total_out+=n,e.next_out.set(s.window.subarray(a,a+n),r),r+=n,a+=n),e.next_out_index=r,s.read=a,t},s.proc=function(e,i){let a,h,m,k,v,A,R,U;for(k=e.next_in_index,v=e.avail_in,h=s.bitb,m=s.bitk,A=s.write,R=A<s.read?s.read-A-1:s.end-A;;){let E,S,z,D,T,F,C,O;switch(c){case 0:for(;m<3;){if(0===v)return s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);i=0,v--,h|=(255&e.read_byte(k++))<<m,m+=8}switch(a=7&h,g=1&a,a>>>1){case 0:h>>>=3,m-=3,a=7&m,h>>>=a,m-=a,c=1;break;case 1:E=[],S=[],z=[[]],D=[[]],f.inflate_trees_fixed(E,S,z,D),b.init(E[0],S[0],z[0],0,D[0],0),h>>>=3,m-=3,c=6;break;case 2:h>>>=3,m-=3,c=3;break;case 3:return h>>>=3,m-=3,c=9,e.msg="invalid block type",i=n,s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i)}break;case 1:for(;m<32;){if(0===v)return s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);i=0,v--,h|=(255&e.read_byte(k++))<<m,m+=8}if((~h>>>16&65535)!=(65535&h))return c=9,e.msg="invalid stored block lengths",i=n,s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);l=65535&h,h=m=0,c=0!==l?2:0!==g?7:0;break;case 2:if(0===v)return s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);if(0===R&&(A==s.end&&0!==s.read&&(A=0,R=A<s.read?s.read-A-1:s.end-A),0===R&&(s.write=A,i=s.inflate_flush(e,i),A=s.write,R=A<s.read?s.read-A-1:s.end-A,A==s.end&&0!==s.read&&(A=0,R=A<s.read?s.read-A-1:s.end-A),0===R)))return s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);if(i=0,a=l,a>v&&(a=v),a>R&&(a=R),s.window.set(e.read_buf(k,a),A),k+=a,v-=a,A+=a,R-=a,0!=(l-=a))break;c=0!==g?7:0;break;case 3:for(;m<14;){if(0===v)return s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);i=0,v--,h|=(255&e.read_byte(k++))<<m,m+=8}if(d=a=16383&h,(31&a)>29||(a>>5&31)>29)return c=9,e.msg="too many length or distance symbols",i=n,s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);if(a=258+(31&a)+(a>>5&31),!o||o.length<a)o=[];else for(U=0;U<a;U++)o[U]=0;h>>>=14,m-=14,u=0,c=4;case 4:for(;u<4+(d>>>10);){for(;m<3;){if(0===v)return s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);i=0,v--,h|=(255&e.read_byte(k++))<<m,m+=8}o[_[u++]]=7&h,h>>>=3,m-=3}for(;u<19;)o[_[u++]]=0;if(w[0]=7,a=x.inflate_trees_bits(o,w,p,y,e),0!=a)return(i=a)==n&&(o=null,c=9),s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);u=0,c=5;case 5:for(;a=d,!(u>=258+(31&a)+(a>>5&31));){let t,l;for(a=w[0];m<a;){if(0===v)return s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);i=0,v--,h|=(255&e.read_byte(k++))<<m,m+=8}if(a=y[3*(p[0]+(h&r[a]))+1],l=y[3*(p[0]+(h&r[a]))+2],l<16)h>>>=a,m-=a,o[u++]=l;else{for(U=18==l?7:l-14,t=18==l?11:3;m<a+U;){if(0===v)return s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);i=0,v--,h|=(255&e.read_byte(k++))<<m,m+=8}if(h>>>=a,m-=a,t+=h&r[U],h>>>=U,m-=U,U=u,a=d,U+t>258+(31&a)+(a>>5&31)||16==l&&U<1)return o=null,c=9,e.msg="invalid bit length repeat",i=n,s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);l=16==l?o[U-1]:0;do{o[U++]=l}while(0!=--t);u=U}}if(p[0]=-1,T=[],F=[],C=[],O=[],T[0]=9,F[0]=6,a=d,a=x.inflate_trees_dynamic(257+(31&a),1+(a>>5&31),o,T,F,C,O,y,e),0!=a)return a==n&&(o=null,c=9),i=a,s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);b.init(T[0],F[0],y,C[0],y,O[0]),c=6;case 6:if(s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,1!=(i=b.proc(s,e,i)))return s.inflate_flush(e,i);if(i=0,b.free(e),k=e.next_in_index,v=e.avail_in,h=s.bitb,m=s.bitk,A=s.write,R=A<s.read?s.read-A-1:s.end-A,0===g){c=0;break}c=7;case 7:if(s.write=A,i=s.inflate_flush(e,i),A=s.write,R=A<s.read?s.read-A-1:s.end-A,s.read!=s.write)return s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);c=8;case 8:return i=1,s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);case 9:return i=n,s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i);default:return i=t,s.bitb=h,s.bitk=m,e.avail_in=v,e.total_in+=k-e.next_in_index,e.next_in_index=k,s.write=A,s.inflate_flush(e,i)}}},s.free=function(e){s.reset(e,null),s.window=null,y=null},s.set_dictionary=function(e,t,n){s.window.set(e.subarray(t,t+n),0),s.read=s.write=n},s.sync_point=function(){return 1==c?1:0}}const p=13,b=[0,0,255,255];function g(){const e=this;function r(e){return e&&e.istate?(e.total_in=e.total_out=0,e.msg=null,e.istate.mode=7,e.istate.blocks.reset(e,null),0):t}e.mode=0,e.method=0,e.was=[0],e.need=0,e.marker=0,e.wbits=0,e.inflateEnd=function(t){return e.blocks&&e.blocks.free(t),e.blocks=null,0},e.inflateInit=function(n,i){return n.msg=null,e.blocks=null,i<8||i>15?(e.inflateEnd(n),t):(e.wbits=i,n.istate.blocks=new w(n,1<<i),r(n),0)},e.inflate=function(e,r){let a,s;if(!e||!e.istate||!e.next_in)return t;const o=e.istate;for(r=4==r?i:0,a=i;;)switch(o.mode){case 0:if(0===e.avail_in)return a;if(a=r,e.avail_in--,e.total_in++,8!=(15&(o.method=e.read_byte(e.next_in_index++)))){o.mode=p,e.msg="unknown compression method",o.marker=5;break}if(8+(o.method>>4)>o.wbits){o.mode=p,e.msg="invalid window size",o.marker=5;break}o.mode=1;case 1:if(0===e.avail_in)return a;if(a=r,e.avail_in--,e.total_in++,s=255&e.read_byte(e.next_in_index++),((o.method<<8)+s)%31!=0){o.mode=p,e.msg="incorrect header check",o.marker=5;break}if(0==(32&s)){o.mode=7;break}o.mode=2;case 2:if(0===e.avail_in)return a;a=r,e.avail_in--,e.total_in++,o.need=(255&e.read_byte(e.next_in_index++))<<24&4278190080,o.mode=3;case 3:if(0===e.avail_in)return a;a=r,e.avail_in--,e.total_in++,o.need+=(255&e.read_byte(e.next_in_index++))<<16&16711680,o.mode=4;case 4:if(0===e.avail_in)return a;a=r,e.avail_in--,e.total_in++,o.need+=(255&e.read_byte(e.next_in_index++))<<8&65280,o.mode=5;case 5:return 0===e.avail_in?a:(a=r,e.avail_in--,e.total_in++,o.need+=255&e.read_byte(e.next_in_index++),o.mode=6,2);case 6:return o.mode=p,e.msg="need dictionary",o.marker=0,t;case 7:if(a=o.blocks.proc(e,a),a==n){o.mode=p,o.marker=0;break}if(0==a&&(a=r),1!=a)return a;a=r,o.blocks.reset(e,o.was),o.mode=12;case 12:return 1;case p:return n;default:return t}},e.inflateSetDictionary=function(e,n,i){let r=0,a=i;if(!e||!e.istate||6!=e.istate.mode)return t;const s=e.istate;return a>=1<<s.wbits&&(a=(1<<s.wbits)-1,r=i-a),s.blocks.set_dictionary(n,r,a),s.mode=7,0},e.inflateSync=function(e){let a,s,o,c,l;if(!e||!e.istate)return t;const d=e.istate;if(d.mode!=p&&(d.mode=p,d.marker=0),0===(a=e.avail_in))return i;for(s=e.next_in_index,o=d.marker;0!==a&&o<4;)e.read_byte(s)==b[o]?o++:o=0!==e.read_byte(s)?0:4-o,s++,a--;return e.total_in+=s-e.next_in_index,e.next_in_index=s,e.avail_in=a,d.marker=o,4!=o?n:(c=e.total_in,l=e.total_out,r(e),e.total_in=c,e.total_out=l,d.mode=7,0)},e.inflateSyncPoint=function(e){return e&&e.istate&&e.istate.blocks?e.istate.blocks.sync_point():t}}function y(){}y.prototype={inflateInit:function(e){const t=this;return t.istate=new g,e||(e=15),t.istate.inflateInit(t,e)},inflate:function(e){const n=this;return n.istate?n.istate.inflate(n,e):t},inflateEnd:function(){const e=this;if(!e.istate)return t;const n=e.istate.inflateEnd(e);return e.istate=null,n},inflateSync:function(){const e=this;return e.istate?e.istate.inflateSync(e):t},inflateSetDictionary:function(e,n){const i=this;return i.istate?i.istate.inflateSetDictionary(i,e,n):t},read_byte:function(e){return this.next_in[e]},read_buf:function(e,t){return this.next_in.subarray(e,e+t)}};const x={chunkSize:524288,maxWorkers:"undefined"!=typeof navigator&&navigator.hardwareConcurrency||2,terminateWorkerTimeout:5e3,useWebWorkers:!0,workerScripts:void 0},m=Object.assign({},x);function k(e){if(void 0!==e.chunkSize&&(m.chunkSize=e.chunkSize),void 0!==e.maxWorkers&&(m.maxWorkers=e.maxWorkers),void 0!==e.terminateWorkerTimeout&&(m.terminateWorkerTimeout=e.terminateWorkerTimeout),void 0!==e.useWebWorkers&&(m.useWebWorkers=e.useWebWorkers),void 0!==e.Deflate&&(m.Deflate=e.Deflate),void 0!==e.Inflate&&(m.Inflate=e.Inflate),void 0!==e.workerScripts){if(e.workerScripts.deflate){if(!Array.isArray(e.workerScripts.deflate))throw new Error("workerScripts.deflate must be an array");m.workerScripts||(m.workerScripts={}),m.workerScripts.deflate=e.workerScripts.deflate}if(e.workerScripts.inflate){if(!Array.isArray(e.workerScripts.inflate))throw new Error("workerScripts.inflate must be an array");m.workerScripts||(m.workerScripts={}),m.workerScripts.inflate=e.workerScripts.inflate}}}const v="Abort error";function A(e,t){if(e&&e.aborted)throw t.flush(),new Error(v)}async function R(e,t){return t.length&&await e.writeUint8Array(t),t.length}const U="HTTP error ",E="HTTP Range not supported",S="text/plain",z="Content-Length",D="Accept-Ranges",T="HEAD",F="GET",C="bytes";class O{constructor(){this.size=0}init(){this.initialized=!0}}class I extends O{}class W extends O{writeUint8Array(e){this.size+=e.length}}class M extends I{constructor(e){super(),this.blob=e,this.size=e.size}async readUint8Array(e,t){const n=new FileReader;return new Promise(((i,r)=>{n.onload=e=>i(new Uint8Array(e.target.result)),n.onerror=()=>r(n.error),n.readAsArrayBuffer(this.blob.slice(e,e+t))}))}}class H extends I{constructor(e,t){super(),this.url=e,this.preventHeadRequest=t.preventHeadRequest,this.useRangeHeader=t.useRangeHeader,this.forceRangeRequests=t.forceRangeRequests,this.options=Object.assign({},t),delete this.options.preventHeadRequest,delete this.options.useRangeHeader,delete this.options.forceRangeRequests,delete this.options.useXHR}async init(){if(super.init(),V(this.url)&&!this.preventHeadRequest){const e=await B(T,this.url,this.options);if(this.size=Number(e.headers.get(z)),!this.forceRangeRequests&&this.useRangeHeader&&e.headers.get(D)!=C)throw new Error(E);void 0===this.size&&await L(this,this.options)}else await L(this,this.options)}async readUint8Array(e,t){if(this.useRangeHeader){const n=await B(F,this.url,this.options,Object.assign({},this.options.headers,{HEADER_RANGE:"bytes="+e+"-"+(e+t-1)}));if(206!=n.status)throw new Error(E);return new Uint8Array(await n.arrayBuffer())}return this.data||await L(this,this.options),new Uint8Array(this.data.subarray(e,e+t))}}async function L(e,t){const n=await B(F,e.url,t);e.data=new Uint8Array(await n.arrayBuffer()),e.size||(e.size=e.data.length)}async function B(e,t,n,i){i=Object.assign({},n.headers,i);const r=await fetch(t,Object.assign({},n,{method:e,headers:i}));if(r.status<400)return r;throw new Error(U+(r.statusText||r.status))}class N extends I{constructor(e,t){super(),this.url=e,this.preventHeadRequest=t.preventHeadRequest,this.useRangeHeader=t.useRangeHeader,this.forceRangeRequests=t.forceRangeRequests}async init(){if(super.init(),V(this.url)&&!this.preventHeadRequest)return new Promise(((e,t)=>j(T,this.url,(n=>{this.size=Number(n.getResponseHeader(z)),this.useRangeHeader?this.forceRangeRequests||n.getResponseHeader(D)==C?e():t(new Error(E)):void 0===this.size?P(this,this.url).then((()=>e())).catch(t):e()}),t)));await P(this,this.url)}async readUint8Array(e,t){if(!this.useRangeHeader)return this.data||await P(this,this.url),new Uint8Array(this.data.subarray(e,e+t));if(206!=(await new Promise(((n,i)=>j(F,this.url,(e=>n(new Uint8Array(e.response))),i,[["Range","bytes="+e+"-"+(e+t-1)]])))).status)throw new Error(E)}}function P(e,t){return new Promise(((n,i)=>j(F,t,(t=>{e.data=new Uint8Array(t.response),e.size||(e.size=e.data.length),n()}),i)))}function j(e,t,n,i,r=[]){const a=new XMLHttpRequest;return a.addEventListener("load",(()=>{a.status<400?n(a):i(U+(a.statusText||a.status))}),!1),a.addEventListener("error",i,!1),a.open(e,t),r.forEach((e=>a.setRequestHeader(e[0],e[1]))),a.responseType="arraybuffer",a.send(),a}class q extends I{constructor(e,t={}){super(),this.url=e,t.useXHR?this.reader=new N(e,t):this.reader=new H(e,t)}set size(e){}get size(){return this.reader.size}async init(){super.init(),await this.reader.init()}async readUint8Array(e,t){return this.reader.readUint8Array(e,t)}}function V(e){if("undefined"!=typeof document){const t=document.createElement("a");return t.href=e,"http:"==t.protocol||"https:"==t.protocol}return/^https?:\/\//i.test(e)}const G=4294967295,Z=33639248,K=101075792,X="\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ".split("");const Y=[];for(let e=0;e<256;e++){let t=e;for(let e=0;e<8;e++)1&t?t=t>>>1^3988292384:t>>>=1;Y[e]=t}class J{constructor(e){this.crc=e||-1}append(e){let t=0|this.crc;for(let n=0,i=0|e.length;n<i;n++)t=t>>>8^Y[255&(t^e[n])];this.crc=t}get(){return~this.crc}}const Q={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],i=Q.getPartial(n);return 32===i?e.concat(t):Q._shiftRight(t,i,0|n,e.slice(0,e.length-1))},bitLength(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+Q.getPartial(n)},clamp(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,Math.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=Q.partial(t,e[n-1]&2147483648>>t-1,1)),e},partial:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,getPartial:e=>Math.round(e/1099511627776)||32,_shiftRight(e,t,n,i){for(void 0===i&&(i=[]);t>=32;t-=32)i.push(n),n=0;if(0===t)return i.concat(e);for(let r=0;r<e.length;r++)i.push(n|e[r]>>>t),n=e[r]<<32-t;const r=e.length?e[e.length-1]:0,a=Q.getPartial(r);return i.push(Q.partial(t+a&31,t+a>32?n:i.pop(),1)),i}},$={bytes:{fromBits(e){const t=Q.bitLength(e)/8,n=new Uint8Array(t);let i;for(let r=0;r<t;r++)0==(3&r)&&(i=e[r/4]),n[r]=i>>>24,i<<=8;return n},toBits(e){const t=[];let n,i=0;for(n=0;n<e.length;n++)i=i<<8|e[n],3==(3&n)&&(t.push(i),i=0);return 3&n&&t.push(Q.partial(8*(3&n),i)),t}}},ee={sha1:function(e){e?(this._h=e._h.slice(0),this._buffer=e._buffer.slice(0),this._length=e._length):this.reset()}};ee.sha1.prototype={blockSize:512,reset:function(){const e=this;return e._h=this._init.slice(0),e._buffer=[],e._length=0,e},update:function(e){const t=this;"string"==typeof e&&(e=$.utf8String.toBits(e));const n=t._buffer=Q.concat(t._buffer,e),i=t._length,r=t._length=i+Q.bitLength(e);if(r>9007199254740991)throw new Error("Cannot hash more than 2^53 - 1 bits");const a=new Uint32Array(n);let s=0;for(let e=t.blockSize+i-(t.blockSize+i&t.blockSize-1);e<=r;e+=t.blockSize)t._block(a.subarray(16*s,16*(s+1))),s+=1;return n.splice(0,16*s),t},finalize:function(){const e=this;let t=e._buffer;const n=e._h;t=Q.concat(t,[Q.partial(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(Math.floor(e._length/4294967296)),t.push(0|e._length);t.length;)e._block(t.splice(0,16));return e.reset(),n},_init:[1732584193,4023233417,2562383102,271733878,3285377520],_key:[1518500249,1859775393,2400959708,3395469782],_f:function(e,t,n,i){return e<=19?t&n|~t&i:e<=39?t^n^i:e<=59?t&n|t&i|n&i:e<=79?t^n^i:void 0},_S:function(e,t){return t<<e|t>>>32-e},_block:function(e){const t=this,n=t._h,i=Array(80);for(let t=0;t<16;t++)i[t]=e[t];let r=n[0],a=n[1],s=n[2],o=n[3],c=n[4];for(let e=0;e<=79;e++){e>=16&&(i[e]=t._S(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const n=t._S(5,r)+t._f(e,a,s,o)+c+i[e]+t._key[Math.floor(e/20)]|0;c=o,o=s,s=t._S(30,a),a=r,r=n}n[0]=n[0]+r|0,n[1]=n[1]+a|0,n[2]=n[2]+s|0,n[3]=n[3]+o|0,n[4]=n[4]+c|0}};const te={aes:class{constructor(e){const t=this;t._tables=[[[],[],[],[],[]],[[],[],[],[],[]]],t._tables[0][0][0]||t._precompute();const n=t._tables[0][4],i=t._tables[1],r=e.length;let a,s,o,c=1;if(4!==r&&6!==r&&8!==r)throw new Error("invalid aes key size");for(t._key=[s=e.slice(0),o=[]],a=r;a<4*r+28;a++){let e=s[a-1];(a%r==0||8===r&&a%r==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],a%r==0&&(e=e<<8^e>>>24^c<<24,c=c<<1^283*(c>>7))),s[a]=s[a-r]^e}for(let e=0;a;e++,a--){const t=s[3&e?a:a-4];o[e]=a<=4||e<4?t:i[0][n[t>>>24]]^i[1][n[t>>16&255]]^i[2][n[t>>8&255]]^i[3][n[255&t]]}}encrypt(e){return this._crypt(e,0)}decrypt(e){return this._crypt(e,1)}_precompute(){const e=this._tables[0],t=this._tables[1],n=e[4],i=t[4],r=[],a=[];let s,o,c,l;for(let e=0;e<256;e++)a[(r[e]=e<<1^283*(e>>7))^e]=e;for(let d=s=0;!n[d];d^=o||1,s=a[s]||1){let a=s^s<<1^s<<2^s<<3^s<<4;a=a>>8^255&a^99,n[d]=a,i[a]=d,l=r[c=r[o=r[d]]];let u=16843009*l^65537*c^257*o^16843008*d,f=257*r[a]^16843008*a;for(let n=0;n<4;n++)e[n][d]=f=f<<24^f>>>8,t[n][a]=u=u<<24^u>>>8}for(let n=0;n<5;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}_crypt(e,t){if(4!==e.length)throw new Error("invalid aes block size");const n=this._key[t],i=n.length/4-2,r=[0,0,0,0],a=this._tables[t],s=a[0],o=a[1],c=a[2],l=a[3],d=a[4];let u,f,h,_=e[0]^n[0],w=e[t?3:1]^n[1],p=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;e<i;e++)u=s[_>>>24]^o[w>>16&255]^c[p>>8&255]^l[255&b]^n[g],f=s[w>>>24]^o[p>>16&255]^c[b>>8&255]^l[255&_]^n[g+1],h=s[p>>>24]^o[b>>16&255]^c[_>>8&255]^l[255&w]^n[g+2],b=s[b>>>24]^o[_>>16&255]^c[w>>8&255]^l[255&p]^n[g+3],g+=4,_=u,w=f,p=h;for(let e=0;e<4;e++)r[t?3&-e:e]=d[_>>>24]<<24^d[w>>16&255]<<16^d[p>>8&255]<<8^d[255&b]^n[g++],u=_,_=w,w=p,p=b,b=u;return r}}},ne={ctrGladman:class{constructor(e,t){this._prf=e,this._initIv=t,this._iv=t}reset(){this._iv=this._initIv}update(e){return this.calculate(this._prf,e,this._iv)}incWord(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,i=255&e;255===t?(t=0,255===n?(n=0,255===i?i=0:++i):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=i}else e+=1<<24;return e}incCounter(e){0===(e[0]=this.incWord(e[0]))&&(e[1]=this.incWord(e[1]))}calculate(e,t,n){let i;if(!(i=t.length))return[];const r=Q.bitLength(t);for(let r=0;r<i;r+=4){this.incCounter(n);const i=e.encrypt(n);t[r]^=i[0],t[r+1]^=i[1],t[r+2]^=i[2],t[r+3]^=i[3]}return Q.clamp(t,r)}}},ie={hmacSha1:class{constructor(e){const t=this,n=t._hash=ee.sha1,i=[[],[]],r=n.prototype.blockSize/32;t._baseHash=[new n,new n],e.length>r&&(e=n.hash(e));for(let t=0;t<r;t++)i[0][t]=909522486^e[t],i[1][t]=1549556828^e[t];t._baseHash[0].update(i[0]),t._baseHash[1].update(i[1]),t._resultHash=new n(t._baseHash[0])}reset(){const e=this;e._resultHash=new e._hash(e._baseHash[0]),e._updated=!1}update(e){this._updated=!0,this._resultHash.update(e)}digest(){const e=this,t=e._resultHash.finalize(),n=new e._hash(e._baseHash[1]).update(t).finalize();return e.reset(),n}}},re="Invalid pasword",ae=16,se={name:"PBKDF2"},oe=Object.assign({hash:{name:"HMAC"}},se),ce=Object.assign({iterations:1e3,hash:{name:"SHA-1"}},se),le=["deriveBits"],de=[8,12,16],ue=[16,24,32],fe=10,he=[0,0,0,0],_e=$.bytes,we=te.aes,pe=ne.ctrGladman,be=ie.hmacSha1;class ge{constructor(e,t,n){Object.assign(this,{password:e,signed:t,strength:n-1,pendingInput:new Uint8Array(0)})}async append(e){const t=this;if(t.password){const n=ve(e,0,de[t.strength]+2);await async function(e,t,n){await me(e,n,ve(t,0,de[e.strength]));const i=ve(t,de[e.strength]),r=e.keys.passwordVerification;if(r[0]!=i[0]||r[1]!=i[1])throw new Error(re)}(t,n,t.password),t.password=null,t.aesCtrGladman=new pe(new we(t.keys.key),Array.from(he)),t.hmac=new be(t.keys.authentication),e=ve(e,de[t.strength]+2)}return xe(t,e,new Uint8Array(e.length-fe-(e.length-fe)%ae),0,fe,!0)}flush(){const e=this,t=e.pendingInput,n=ve(t,0,t.length-fe),i=ve(t,t.length-fe);let r=new Uint8Array(0);if(n.length){const t=_e.toBits(n);e.hmac.update(t);const i=e.aesCtrGladman.update(t);r=_e.fromBits(i)}let a=!0;if(e.signed){const t=ve(_e.fromBits(e.hmac.digest()),0,fe);for(let e=0;e<fe;e++)t[e]!=i[e]&&(a=!1)}return{valid:a,data:r}}}class ye{constructor(e,t){Object.assign(this,{password:e,strength:t-1,pendingInput:new Uint8Array(0)})}async append(e){const t=this;let n=new Uint8Array(0);t.password&&(n=await async function(e,t){const n=crypto.getRandomValues(new Uint8Array(de[e.strength]));return await me(e,t,n),ke(n,e.keys.passwordVerification)}(t,t.password),t.password=null,t.aesCtrGladman=new pe(new we(t.keys.key),Array.from(he)),t.hmac=new be(t.keys.authentication));const i=new Uint8Array(n.length+e.length-e.length%ae);return i.set(n,0),xe(t,e,i,n.length,0)}flush(){const e=this;let t=new Uint8Array(0);if(e.pendingInput.length){const n=e.aesCtrGladman.update(_e.toBits(e.pendingInput));e.hmac.update(n),t=_e.fromBits(n)}const n=ve(_e.fromBits(e.hmac.digest()),0,fe);return{data:ke(t,n),signature:n}}}function xe(e,t,n,i,r,a){const s=t.length-r;let o;for(e.pendingInput.length&&(t=ke(e.pendingInput,t),n=function(e,t){if(t&&t>e.length){const n=e;(e=new Uint8Array(t)).set(n,0)}return e}(n,s-s%ae)),o=0;o<=s-ae;o+=ae){const r=_e.toBits(ve(t,o,o+ae));a&&e.hmac.update(r);const s=e.aesCtrGladman.update(r);a||e.hmac.update(s),n.set(_e.fromBits(s),o+i)}return e.pendingInput=ve(t,o),n}async function me(e,t,n){const i=(new TextEncoder).encode(t),r=await crypto.subtle.importKey("raw",i,oe,!1,le),a=await crypto.subtle.deriveBits(Object.assign({salt:n},ce),r,8*(2*ue[e.strength]+2)),s=new Uint8Array(a);e.keys={key:_e.toBits(ve(s,0,ue[e.strength])),authentication:_e.toBits(ve(s,ue[e.strength],2*ue[e.strength])),passwordVerification:ve(s,2*ue[e.strength])}}function ke(e,t){let n=e;return e.length+t.length&&(n=new Uint8Array(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function ve(e,t,n){return e.subarray(t,n)}const Ae=12;class Re{constructor(e,t){Object.assign(this,{password:e,passwordVerification:t}),ze(this,e)}append(e){const t=this;if(t.password){const n=Ee(t,e.subarray(0,Ae));if(t.password=null,n[11]!=t.passwordVerification)throw new Error(re);e=e.subarray(Ae)}return Ee(t,e)}flush(){return{valid:!0,data:new Uint8Array(0)}}}class Ue{constructor(e,t){Object.assign(this,{password:e,passwordVerification:t}),ze(this,e)}append(e){const t=this;let n,i;if(t.password){t.password=null;const r=crypto.getRandomValues(new Uint8Array(Ae));r[11]=t.passwordVerification,n=new Uint8Array(e.length+r.length),n.set(Se(t,r),0),i=Ae}else n=new Uint8Array(e.length),i=0;return n.set(Se(t,e),i),n}flush(){return{data:new Uint8Array(0)}}}function Ee(e,t){const n=new Uint8Array(t.length);for(let i=0;i<t.length;i++)n[i]=Te(e)^t[i],De(e,n[i]);return n}function Se(e,t){const n=new Uint8Array(t.length);for(let i=0;i<t.length;i++)n[i]=Te(e)^t[i],De(e,t[i]);return n}function ze(e,t){e.keys=[305419896,591751049,878082192],e.crcKey0=new J(e.keys[0]),e.crcKey2=new J(e.keys[2]);for(let n=0;n<t.length;n++)De(e,t.charCodeAt(n))}function De(e,t){e.crcKey0.append([t]),e.keys[0]=~e.crcKey0.get(),e.keys[1]=Ce(e.keys[1]+Fe(e.keys[0])),e.keys[1]=Ce(Math.imul(e.keys[1],134775813)+1),e.crcKey2.append([e.keys[1]>>>24]),e.keys[2]=~e.crcKey2.get()}function Te(e){const t=2|e.keys[2];return Fe(Math.imul(t,1^t)>>>8)}function Fe(e){return 255&e}function Ce(e){return 4294967295&e}const Oe="inflate",Ie="Invalid signature";class We{constructor(e,{signature:t,password:n,signed:i,compressed:r,zipCrypto:a,passwordVerification:s,encryptionStrength:o},{chunkSize:c}){const l=Boolean(n);Object.assign(this,{signature:t,encrypted:l,signed:i,compressed:r,inflate:r&&new e({chunkSize:c}),crc32:i&&new J,zipCrypto:a,decrypt:l&&a?new Re(n,s):new ge(n,i,o)})}async append(e){const t=this;return t.encrypted&&e.length&&(e=await t.decrypt.append(e)),t.compressed&&e.length&&(e=await t.inflate.append(e)),(!t.encrypted||t.zipCrypto)&&t.signed&&e.length&&t.crc32.append(e),e}async flush(){const e=this;let t,n=new Uint8Array(0);if(e.encrypted){const t=e.decrypt.flush();if(!t.valid)throw new Error(Ie);n=t.data}if((!e.encrypted||e.zipCrypto)&&e.signed){const n=new DataView(new Uint8Array(4).buffer);if(t=e.crc32.get(),n.setUint32(0,t),e.signature!=n.getUint32(0,!1))throw new Error(Ie)}return e.compressed&&(n=await e.inflate.append(n)||new Uint8Array(0),await e.inflate.flush()),{data:n,signature:t}}}class Me{constructor(e,{encrypted:t,signed:n,compressed:i,level:r,zipCrypto:a,password:s,passwordVerification:o,encryptionStrength:c},{chunkSize:l}){Object.assign(this,{encrypted:t,signed:n,compressed:i,deflate:i&&new e({level:r||5,chunkSize:l}),crc32:n&&new J,zipCrypto:a,encrypt:t&&a?new Ue(s,o):new ye(s,c)})}async append(e){const t=this;let n=e;return t.compressed&&e.length&&(n=await t.deflate.append(e)),t.encrypted&&n.length&&(n=await t.encrypt.append(n)),(!t.encrypted||t.zipCrypto)&&t.signed&&e.length&&t.crc32.append(e),n}async flush(){const e=this;let t,n=new Uint8Array(0);if(e.compressed&&(n=await e.deflate.flush()||new Uint8Array(0)),e.encrypted){n=await e.encrypt.append(n);const i=e.encrypt.flush();t=i.signature;const r=new Uint8Array(n.length+i.data.length);r.set(n,0),r.set(i.data,n.length),n=r}return e.encrypted&&!e.zipCrypto||!e.signed||(t=e.crc32.get()),{data:n,signature:t}}}const He="init",Le="append",Be="flush",Ne="message";let Pe=!0;var je=(e,t,n,i,r,a,s)=>(Object.assign(e,{busy:!0,codecConstructor:t,options:Object.assign({},n),scripts:s,terminate(){e.worker&&!e.busy&&(e.worker.terminate(),e.interface=null)},onTaskFinished(){e.busy=!1,r(e)}}),a?function(e,t){let n;const i={type:"module"};if(!e.interface){if(Pe)try{e.worker=r()}catch(t){Pe=!1,e.worker=r(i)}else e.worker=r(i);e.worker.addEventListener(Ne,o,!1),e.interface={append:e=>a({type:Le,data:e}),flush:()=>a({type:Be})}}return e.interface;function r(t={}){return new Worker(new URL(e.scripts[0],"undefined"==typeof document&&"undefined"==typeof location?new(require("url").URL)("file:"+__filename).href:"undefined"==typeof document?location.href:document.currentScript&&document.currentScript.src||new URL("zip-no-worker-inflate.min.js",document.baseURI).href),t)}async function a(i){if(!n){const n=e.options,i=e.scripts.slice(1);await s({scripts:i,type:He,options:n,config:{chunkSize:t.chunkSize}})}return s(i)}function s(t){const i=e.worker,r=new Promise(((e,t)=>n={resolve:e,reject:t}));try{if(t.data)try{t.data=t.data.buffer,i.postMessage(t,[t.data])}catch(e){i.postMessage(t)}else i.postMessage(t)}catch(t){n.reject(t),n=null,e.onTaskFinished()}return r}function o(t){const i=t.data;if(n){const t=i.error,r=i.type;if(t){const i=new Error(t.message);i.stack=t.stack,n.reject(i),n=null,e.onTaskFinished()}else if(r==He||r==Be||r==Le){const t=i.data;r==Be?(n.resolve({data:new Uint8Array(t),signature:i.signature}),n=null,e.onTaskFinished()):n.resolve(t&&new Uint8Array(t))}}}}(e,i):function(e,t){const n=function(e,t,n){return t.codecType.startsWith("deflate")?new Me(e,t,n):t.codecType.startsWith(Oe)?new We(e,t,n):void 0}(e.codecConstructor,e.options,t);return{async append(t){try{return await n.append(t)}catch(t){throw e.onTaskFinished(),t}},async flush(){try{return await n.flush()}finally{e.onTaskFinished()}}}}(e,i));let qe=[],Ve=[];function Ge(e){e.terminateTimeout&&(clearTimeout(e.terminateTimeout),e.terminateTimeout=null)}const Ze=["filename","rawFilename","directory","encrypted","compressedSize","uncompressedSize","lastModDate","rawLastModDate","comment","rawComment","signature","extraField","rawExtraField","bitFlag","extraFieldZip64","extraFieldUnicodePath","extraFieldUnicodeComment","extraFieldAES","filenameUTF8","commentUTF8","offset","zip64","compressionMethod","extraFieldNTFS","lastAccessDate","creationDate","extraFieldExtendedTimestamp","version","versionMadeBy","msDosCompatible","internalFileAttribute","externalFileAttribute"];class Ke{constructor(e){Ze.forEach((t=>this[t]=e[t]))}}const Xe="File format is not recognized",Ye="End of central directory not found",Je="End of Zip64 central directory not found",Qe="End of Zip64 central directory locator not found",$e="Central directory header not found",et="Local file header not found",tt="Zip64 extra field not found",nt="File contains encrypted entry",it="Encryption method not supported",rt="Compression method not supported",at="utf-8",st=["uncompressedSize","compressedSize","offset"];class ot{constructor(e,t,n){Object.assign(this,{reader:e,config:t,options:n})}async getData(e,t,n={}){const i=this,{reader:r,offset:a,extraFieldAES:s,compressionMethod:o,config:c,bitFlag:l,signature:d,rawLastModDate:u,compressedSize:f}=i,h=i.localDirectory={};r.initialized||await r.init();let _=await xt(r,a,30);const w=yt(_);let p=ut(i,n,"password");if(p=p&&p.length&&p,s&&99!=s.originalCompressionMethod)throw new Error(rt);if(0!=o&&8!=o)throw new Error(rt);if(67324752!=bt(w,0))throw new Error(et);ct(h,w,4),_=await xt(r,a,30+h.filenameLength+h.extraFieldLength),h.rawExtraField=_.subarray(30+h.filenameLength),lt(i,h,w,4),t.lastAccessDate=h.lastAccessDate,t.creationDate=h.creationDate;const b=i.encrypted&&h.encrypted,g=b&&!s;if(b){if(!g&&void 0===s.strength)throw new Error(it);if(!p)throw new Error(nt)}const y=await function(e,t,n){const i=!(!t.compressed&&!t.signed&&!t.encrypted)&&(t.useWebWorkers||void 0===t.useWebWorkers&&n.useWebWorkers),r=i&&n.workerScripts?n.workerScripts[t.codecType]:[];if(qe.length<n.maxWorkers){const s={};return qe.push(s),je(s,e,t,n,a,i,r)}{const s=qe.find((e=>!e.busy));return s?(Ge(s),je(s,e,t,n,a,i,r)):new Promise((n=>Ve.push({resolve:n,codecConstructor:e,options:t,webWorker:i,scripts:r})))}function a(e){if(Ve.length){const[{resolve:t,codecConstructor:i,options:r,webWorker:s,scripts:o}]=Ve.splice(0,1);t(je(e,i,r,n,a,s,o))}else e.worker?(Ge(e),Number.isFinite(n.terminateWorkerTimeout)&&n.terminateWorkerTimeout>=0&&(e.terminateTimeout=setTimeout((()=>{qe=qe.filter((t=>t!=e)),e.terminate()}),n.terminateWorkerTimeout))):qe=qe.filter((t=>t!=e))}}(c.Inflate,{codecType:Oe,password:p,zipCrypto:g,encryptionStrength:s&&s.strength,signed:ut(i,n,"checkSignature"),passwordVerification:g&&(l.dataDescriptor?u>>>8&255:d>>>24&255),signature:d,compressed:0!=o,encrypted:b,useWebWorkers:ut(i,n,"useWebWorkers")},c);e.initialized||await e.init();const x=ut(i,n,"signal"),m=a+30+h.filenameLength+h.extraFieldLength;return await async function(e,t,n,i,r,a,s){const o=Math.max(a.chunkSize,64);return async function a(c=0,l=0){const d=s.signal;if(c<r){A(d,e);const u=await t.readUint8Array(c+i,Math.min(o,r-c)),f=u.length;A(d,e);const h=await e.append(u);if(A(d,e),l+=await R(n,h),s.onprogress)try{s.onprogress(c+f,r)}catch(e){}return a(c+o,l)}{const t=await e.flush();return l+=await R(n,t.data),{signature:t.signature,length:l}}}()}(y,r,e,m,f,c,{onprogress:n.onprogress,signal:x}),e.getData()}}function ct(e,t,n){const i=e.rawBitFlag=pt(t,n+2),r=1==(1&i),a=bt(t,n+6);Object.assign(e,{encrypted:r,version:pt(t,n),bitFlag:{level:(6&i)>>1,dataDescriptor:8==(8&i),languageEncodingFlag:2048==(2048&i)},rawLastModDate:a,lastModDate:ht(a),filenameLength:pt(t,n+22),extraFieldLength:pt(t,n+24)})}function lt(e,t,n,i){const r=t.rawExtraField,a=t.extraField=new Map,s=yt(new Uint8Array(r));let o=0;try{for(;o<r.length;){const e=pt(s,o),t=pt(s,o+2);a.set(e,{type:e,data:r.slice(o+4,o+4+t)}),o+=4+t}}catch(e){}const c=pt(n,i+4);t.signature=bt(n,i+10),t.uncompressedSize=bt(n,i+18),t.compressedSize=bt(n,i+14);const l=a.get(1);l&&(!function(e,t){t.zip64=!0;const n=yt(e.data);e.values=[];for(let t=0;t<Math.floor(e.data.length/8);t++)e.values.push(gt(n,0+8*t));const i=st.filter((e=>t[e]==G));for(let t=0;t<i.length;t++)e[i[t]]=e.values[t];st.forEach((n=>{if(t[n]==G){if(void 0===e[n])throw new Error(tt);t[n]=e[n]}}))}(l,t),t.extraFieldZip64=l);const d=a.get(28789);d&&(dt(d,"filename","rawFilename",t,e),t.extraFieldUnicodePath=d);const u=a.get(25461);u&&(dt(u,"comment","rawComment",t,e),t.extraFieldUnicodeComment=u);const f=a.get(39169);f?(!function(e,t,n){const i=yt(e.data);e.vendorVersion=wt(i,0),e.vendorId=wt(i,2);const r=wt(i,4);e.strength=r,e.originalCompressionMethod=n,t.compressionMethod=e.compressionMethod=pt(i,5)}(f,t,c),t.extraFieldAES=f):t.compressionMethod=c;const h=a.get(10);h&&(!function(e,t){const n=yt(e.data);let i,r=4;try{for(;r<e.data.length&&!i;){const t=pt(n,r),a=pt(n,r+2);1==t&&(i=e.data.slice(r+4,r+4+a)),r+=4+a}}catch(e){}try{if(i&&24==i.length){const n=yt(i),r=n.getBigUint64(0,!0),a=n.getBigUint64(8,!0),s=n.getBigUint64(16,!0);Object.assign(e,{rawLastModDate:r,rawLastAccessDate:a,rawCreationDate:s});const o=_t(r),c=_t(a),l={lastModDate:o,lastAccessDate:c,creationDate:_t(s)};Object.assign(e,l),Object.assign(t,l)}}catch(e){}}(h,t),t.extraFieldNTFS=h);const _=a.get(21589);_&&(!function(e,t){const n=yt(e.data),i=wt(n,0),r=[],a=[];1==(1&i)&&(r.push("lastModDate"),a.push("rawLastModDate"));2==(2&i)&&(r.push("lastAccessDate"),a.push("rawLastAccessDate"));4==(4&i)&&(r.push("creationDate"),a.push("rawCreationDate"));let s=1;r.forEach(((i,r)=>{if(e.data.length>=s+4){const o=bt(n,s);t[i]=e[i]=new Date(1e3*o);const c=a[r];e[c]=o}s+=4}))}(_,t),t.extraFieldExtendedTimestamp=_)}function dt(e,t,n,i,r){const a=yt(e.data);e.version=wt(a,0),e.signature=bt(a,1);const s=new J;s.append(r[n]);const o=yt(new Uint8Array(4));o.setUint32(0,s.get(),!0),e[t]=(new TextDecoder).decode(e.data.subarray(5)),e.valid=!r.bitFlag.languageEncodingFlag&&e.signature==bt(o,0),e.valid&&(i[t]=e[t],i[t+"UTF8"]=!0)}function ut(e,t,n){return void 0===t[n]?e.options[n]:t[n]}function ft(e,t){return t&&"cp437"!=t.trim().toLowerCase()?new TextDecoder(t).decode(e):(e=>{let t="";for(let n=0;n<e.length;n++)t+=X[e[n]];return t})(e)}function ht(e){const t=(4294901760&e)>>16,n=65535&e;try{return new Date(1980+((65024&t)>>9),((480&t)>>5)-1,31&t,(63488&n)>>11,(2016&n)>>5,2*(31&n),0)}catch(e){}}function _t(e){return new Date(Number(e/BigInt(1e4)-BigInt(116444736e5)))}function wt(e,t){return e.getUint8(t)}function pt(e,t){return e.getUint16(t,!0)}function bt(e,t){return e.getUint32(t,!0)}function gt(e,t){return Number(e.getBigUint64(t,!0))}function yt(e){return new DataView(e.buffer)}function xt(e,t,n){return e.readUint8Array(t,n)}k({Inflate:function(e){const t=new y,n=e&&e.chunkSize?Math.floor(2*e.chunkSize):131072,r=new Uint8Array(n);let a=!1;t.inflateInit(),t.next_out=r,this.append=function(e,s){const o=[];let c,l,d=0,u=0,f=0;if(0!==e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,0!==t.avail_in||a||(t.next_in_index=0,a=!0),c=t.inflate(0),a&&c===i){if(0!==t.avail_in)throw new Error("inflating: bad input")}else if(0!==c&&1!==c)throw new Error("inflating: "+t.msg);if((a||1===c)&&t.avail_in===e.length)throw new Error("inflating: bad input");t.next_out_index&&(t.next_out_index===n?o.push(new Uint8Array(r)):o.push(r.slice(0,t.next_out_index))),f+=t.next_out_index,s&&t.next_in_index>0&&t.next_in_index!=d&&(s(t.next_in_index),d=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return o.length>1?(l=new Uint8Array(f),o.forEach((function(e){l.set(e,u),u+=e.length}))):l=o[0]||new Uint8Array(0),l}},this.flush=function(){t.inflateEnd()}}}),e.BlobReader=M,e.BlobWriter=class extends W{constructor(e){super(),this.offset=0,this.contentType=e,this.blob=new Blob([],{type:e})}async writeUint8Array(e){super.writeUint8Array(e),this.blob=new Blob([this.blob,e.buffer],{type:this.contentType}),this.offset=this.blob.size}getData(){return this.blob}},e.Data64URIReader=class extends I{constructor(e){super(),this.dataURI=e;let t=e.length;for(;"="==e.charAt(t-1);)t--;this.dataStart=e.indexOf(",")+1,this.size=Math.floor(.75*(t-this.dataStart))}async readUint8Array(e,t){const n=new Uint8Array(t),i=4*Math.floor(e/3),r=atob(this.dataURI.substring(i+this.dataStart,4*Math.ceil((e+t)/3)+this.dataStart)),a=e-3*Math.floor(i/4);for(let e=a;e<a+t;e++)n[e-a]=r.charCodeAt(e);return n}},e.Data64URIWriter=class extends W{constructor(e){super(),this.data="data:"+(e||"")+";base64,",this.pending=[]}async writeUint8Array(e){super.writeUint8Array(e);let t=0,n=this.pending;const i=this.pending.length;for(this.pending="",t=0;t<3*Math.floor((i+e.length)/3)-i;t++)n+=String.fromCharCode(e[t]);for(;t<e.length;t++)this.pending+=String.fromCharCode(e[t]);n.length>2?this.data+=btoa(n):this.pending=n}getData(){return this.data+btoa(this.pending)}},e.ERR_ABORT=v,e.ERR_BAD_FORMAT=Xe,e.ERR_CENTRAL_DIRECTORY_NOT_FOUND=$e,e.ERR_ENCRYPTED=nt,e.ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND=Qe,e.ERR_EOCDR_NOT_FOUND=Ye,e.ERR_EOCDR_ZIP64_NOT_FOUND=Je,e.ERR_EXTRAFIELD_ZIP64_NOT_FOUND=tt,e.ERR_HTTP_RANGE=E,e.ERR_INVALID_PASSWORD=re,e.ERR_INVALID_SIGNATURE=Ie,e.ERR_LOCAL_FILE_HEADER_NOT_FOUND=et,e.ERR_UNSUPPORTED_COMPRESSION=rt,e.ERR_UNSUPPORTED_ENCRYPTION=it,e.HttpRangeReader=class extends q{constructor(e,t={}){t.useRangeHeader=!0,super(e,t)}},e.HttpReader=q,e.Reader=I,e.TextReader=class extends I{constructor(e){super(),this.blobReader=new M(new Blob([e],{type:S}))}async init(){super.init(),this.blobReader.init(),this.size=this.blobReader.size}async readUint8Array(e,t){return this.blobReader.readUint8Array(e,t)}},e.TextWriter=class extends W{constructor(e){super(),this.encoding=e,this.blob=new Blob([],{type:S})}async writeUint8Array(e){super.writeUint8Array(e),this.blob=new Blob([this.blob,e.buffer],{type:S})}getData(){const e=new FileReader;return new Promise(((t,n)=>{e.onload=e=>t(e.target.result),e.onerror=()=>n(e.error),e.readAsText(this.blob,this.encoding)}))}},e.Uint8ArrayReader=class extends I{constructor(e){super(),this.array=e,this.size=e.length}async readUint8Array(e,t){return this.array.slice(e,e+t)}},e.Uint8ArrayWriter=class extends W{constructor(){super(),this.array=new Uint8Array(0)}async writeUint8Array(e){super.writeUint8Array(e);const t=this.array;this.array=new Uint8Array(t.length+e.length),this.array.set(t),this.array.set(e,t.length)}getData(){return this.array}},e.Writer=W,e.ZipReader=class{constructor(e,t={}){Object.assign(this,{reader:e,options:t,config:m})}async getEntries(e={}){const t=this,n=t.reader;if(n.initialized||await n.init(),n.size<22)throw new Error(Xe);const i=await async function(e,t,n,i,r){const a=new Uint8Array(4);!function(e,t,n){e.setUint32(t,n,!0)}(yt(a),0,t);const s=i+r;return await o(i)||await o(Math.min(s,n));async function o(t){const r=n-t,s=await xt(e,r,t);for(let e=s.length-i;e>=0;e--)if(s[e]==a[0]&&s[e+1]==a[1]&&s[e+2]==a[2]&&s[e+3]==a[3])return{offset:r+e,buffer:s.slice(e,e+i).buffer}}}(n,101010256,n.size,22,1048560);if(!i)throw new Error(Ye);const r=yt(i);let a=bt(r,12),s=bt(r,16),o=pt(r,8),c=0;if(s==G||65535==o){const e=yt(await xt(n,i.offset-20,20));if(117853008!=bt(e,0))throw new Error(Je);s=gt(e,8);let t=await xt(n,s,56),r=yt(t);const l=i.offset-20-56;if(bt(r,0)!=K&&s!=l){const e=s;s=l,c=s-e,t=await xt(n,s,56),r=yt(t)}if(bt(r,0)!=K)throw new Error(Qe);o=gt(r,24),a=bt(e,4),s-=gt(r,40)}if(s<0||s>=n.size)throw new Error(Xe);let l=0,d=await xt(n,s,n.size-s),u=yt(d);const f=i.offset-a;if(bt(u,l)!=Z&&s!=f){const e=s;s=f,c=s-e,d=await xt(n,s,n.size-s),u=yt(d)}if(s<0||s>=n.size)throw new Error(Xe);const h=[];for(let i=0;i<o;i++){const r=new ot(n,t.config,t.options);if(bt(u,l)!=Z)throw new Error($e);ct(r,u,l+6);const a=Boolean(r.bitFlag.languageEncodingFlag),s=l+46,f=s+r.filenameLength,_=f+r.extraFieldLength,w=pt(u,l+4),p=0==(0&w);Object.assign(r,{versionMadeBy:w,msDosCompatible:p,compressedSize:0,uncompressedSize:0,commentLength:pt(u,l+32),directory:p&&16==(16&wt(u,l+38)),offset:bt(u,l+42)+c,internalFileAttribute:bt(u,l+34),externalFileAttribute:bt(u,l+38),rawFilename:d.subarray(s,f),filenameUTF8:a,commentUTF8:a,rawExtraField:d.subarray(f,_)});const b=_+r.commentLength;r.rawComment=d.subarray(_,b),r.filename=ft(r.rawFilename,r.filenameUTF8?at:ut(t,e,"filenameEncoding")),r.comment=ft(r.rawComment,r.commentUTF8?at:ut(t,e,"commentEncoding")),!r.directory&&r.filename.endsWith("/")&&(r.directory=!0),lt(r,r,u,l+6);const g=new Ke(r);if(g.getData=(e,t)=>r.getData(e,g,t),h.push(g),l=b,e.onprogress)try{e.onprogress(i+1,o,new Ke(r))}catch(e){}}return h}async close(){}},e.configure=k,e.getMimeType=function(){return"application/octet-stream"},Object.defineProperty(e,"__esModule",{value:!0})}));

!function e(n,t,r){function o(s,a){if(!t[s]){if(!n[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=t[s]={exports:{}};n[s][0].call(u.exports,(function(e){return o(n[s][1][e]||e)}),u,u.exports,e,n,t,r)}return t[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(e,n,t){"use strict";t.byteLength=function(e){var n=c(e),t=n[0],r=n[1];return 3*(t+r)/4-r},t.toByteArray=function(e){var n,t,r=c(e),s=r[0],a=r[1],l=new i(function(e,n,t){return 3*(n+t)/4-t}(0,s,a)),u=0,f=a>0?s-4:s;for(t=0;t<f;t+=4)n=o[e.charCodeAt(t)]<<18|o[e.charCodeAt(t+1)]<<12|o[e.charCodeAt(t+2)]<<6|o[e.charCodeAt(t+3)],l[u++]=n>>16&255,l[u++]=n>>8&255,l[u++]=255&n;2===a&&(n=o[e.charCodeAt(t)]<<2|o[e.charCodeAt(t+1)]>>4,l[u++]=255&n);1===a&&(n=o[e.charCodeAt(t)]<<10|o[e.charCodeAt(t+1)]<<4|o[e.charCodeAt(t+2)]>>2,l[u++]=n>>8&255,l[u++]=255&n);return l},t.fromByteArray=function(e){for(var n,t=e.length,o=t%3,i=[],s=16383,a=0,l=t-o;a<l;a+=s)i.push(u(e,a,a+s>l?l:a+s));1===o?(n=e[t-1],i.push(r[n>>2]+r[n<<4&63]+"==")):2===o&&(n=(e[t-2]<<8)+e[t-1],i.push(r[n>>10]+r[n>>4&63]+r[n<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,l=s.length;a<l;++a)r[a]=s[a],o[s.charCodeAt(a)]=a;function c(e){var n=e.length;if(n%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var t=e.indexOf("=");return-1===t&&(t=n),[t,t===n?0:4-t%4]}function u(e,n,t){for(var o,i,s=[],a=n;a<t;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},{}],2:[function(e,n,t){var r=e("../internals/is-callable"),o=e("../internals/try-to-string");n.exports=function(e){if(r(e))return e;throw TypeError(o(e)+" is not a function")}},{"../internals/is-callable":43,"../internals/try-to-string":89}],3:[function(e,n,t){var r=e("../internals/is-callable");n.exports=function(e){if("object"==typeof e||r(e))return e;throw TypeError("Can't set "+String(e)+" as a prototype")}},{"../internals/is-callable":43}],4:[function(e,n,t){var r=e("../internals/well-known-symbol"),o=e("../internals/object-create"),i=e("../internals/object-define-property"),s=r("unscopables"),a=Array.prototype;null==a[s]&&i.f(a,s,{configurable:!0,value:o(null)}),n.exports=function(e){a[s][e]=!0}},{"../internals/object-create":57,"../internals/object-define-property":59,"../internals/well-known-symbol":92}],5:[function(e,n,t){n.exports=function(e,n,t){if(e instanceof n)return e;throw TypeError("Incorrect "+(t?t+" ":"")+"invocation")}},{}],6:[function(e,n,t){var r=e("../internals/is-object");n.exports=function(e){if(r(e))return e;throw TypeError(String(e)+" is not an object")}},{"../internals/is-object":46}],7:[function(e,n,t){"use strict";var r=e("../internals/function-bind-context"),o=e("../internals/to-object"),i=e("../internals/call-with-safe-iteration-closing"),s=e("../internals/is-array-iterator-method"),a=e("../internals/is-constructor"),l=e("../internals/length-of-array-like"),c=e("../internals/create-property"),u=e("../internals/get-iterator"),f=e("../internals/get-iterator-method");n.exports=function(e){var n=o(e),t=a(this),p=arguments.length,d=p>1?arguments[1]:void 0,h=void 0!==d;h&&(d=r(d,p>2?arguments[2]:void 0,2));var y,v,_,b,m,g,w=f(n),k=0;if(!w||this==Array&&s(w))for(y=l(n),v=t?new this(y):Array(y);y>k;k++)g=h?d(n[k],k):n[k],c(v,k,g);else for(m=(b=u(n,w)).next,v=t?new this:[];!(_=m.call(b)).done;k++)g=h?i(b,d,[_.value,k],!0):_.value,c(v,k,g);return v.length=k,v}},{"../internals/call-with-safe-iteration-closing":9,"../internals/create-property":17,"../internals/function-bind-context":28,"../internals/get-iterator":32,"../internals/get-iterator-method":31,"../internals/is-array-iterator-method":42,"../internals/is-constructor":44,"../internals/length-of-array-like":52,"../internals/to-object":84}],8:[function(e,n,t){var r=e("../internals/to-indexed-object"),o=e("../internals/to-absolute-index"),i=e("../internals/length-of-array-like"),s=function(e){return function(n,t,s){var a,l=r(n),c=i(l),u=o(s,c);if(e&&t!=t){for(;c>u;)if((a=l[u++])!=a)return!0}else for(;c>u;u++)if((e||u in l)&&l[u]===t)return e||u||0;return!e&&-1}};n.exports={includes:s(!0),indexOf:s(!1)}},{"../internals/length-of-array-like":52,"../internals/to-absolute-index":80,"../internals/to-indexed-object":81}],9:[function(e,n,t){var r=e("../internals/an-object"),o=e("../internals/iterator-close");n.exports=function(e,n,t,i){try{return i?n(r(t)[0],t[1]):n(t)}catch(n){o(e,"throw",n)}}},{"../internals/an-object":6,"../internals/iterator-close":49}],10:[function(e,n,t){var r={}.toString;n.exports=function(e){return r.call(e).slice(8,-1)}},{}],11:[function(e,n,t){var r=e("../internals/to-string-tag-support"),o=e("../internals/is-callable"),i=e("../internals/classof-raw"),s=e("../internals/well-known-symbol")("toStringTag"),a="Arguments"==i(function(){return arguments}());n.exports=r?i:function(e){var n,t,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(t=function(e,n){try{return e[n]}catch(e){}}(n=Object(e),s))?t:a?i(n):"Object"==(r=i(n))&&o(n.callee)?"Arguments":r}},{"../internals/classof-raw":10,"../internals/is-callable":43,"../internals/to-string-tag-support":87,"../internals/well-known-symbol":92}],12:[function(e,n,t){var r=e("../internals/has-own-property"),o=e("../internals/own-keys"),i=e("../internals/object-get-own-property-descriptor"),s=e("../internals/object-define-property");n.exports=function(e,n){for(var t=o(n),a=s.f,l=i.f,c=0;c<t.length;c++){var u=t[c];r(e,u)||a(e,u,l(n,u))}}},{"../internals/has-own-property":35,"../internals/object-define-property":59,"../internals/object-get-own-property-descriptor":60,"../internals/own-keys":69}],13:[function(e,n,t){var r=e("../internals/fails");n.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},{"../internals/fails":27}],14:[function(e,n,t){"use strict";var r=e("../internals/iterators-core").IteratorPrototype,o=e("../internals/object-create"),i=e("../internals/create-property-descriptor"),s=e("../internals/set-to-string-tag"),a=e("../internals/iterators"),l=function(){return this};n.exports=function(e,n,t){var c=n+" Iterator";return e.prototype=o(r,{next:i(1,t)}),s(e,c,!1,!0),a[c]=l,e}},{"../internals/create-property-descriptor":16,"../internals/iterators":51,"../internals/iterators-core":50,"../internals/object-create":57,"../internals/set-to-string-tag":74}],15:[function(e,n,t){var r=e("../internals/descriptors"),o=e("../internals/object-define-property"),i=e("../internals/create-property-descriptor");n.exports=r?function(e,n,t){return o.f(e,n,i(1,t))}:function(e,n,t){return e[n]=t,e}},{"../internals/create-property-descriptor":16,"../internals/descriptors":19,"../internals/object-define-property":59}],16:[function(e,n,t){n.exports=function(e,n){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:n}}},{}],17:[function(e,n,t){"use strict";var r=e("../internals/to-property-key"),o=e("../internals/object-define-property"),i=e("../internals/create-property-descriptor");n.exports=function(e,n,t){var s=r(n);s in e?o.f(e,s,i(0,t)):e[s]=t}},{"../internals/create-property-descriptor":16,"../internals/object-define-property":59,"../internals/to-property-key":86}],18:[function(e,n,t){"use strict";var r=e("../internals/export"),o=e("../internals/is-pure"),i=e("../internals/function-name"),s=e("../internals/is-callable"),a=e("../internals/create-iterator-constructor"),l=e("../internals/object-get-prototype-of"),c=e("../internals/object-set-prototype-of"),u=e("../internals/set-to-string-tag"),f=e("../internals/create-non-enumerable-property"),p=e("../internals/redefine"),d=e("../internals/well-known-symbol"),h=e("../internals/iterators"),y=e("../internals/iterators-core"),v=i.PROPER,_=i.CONFIGURABLE,b=y.IteratorPrototype,m=y.BUGGY_SAFARI_ITERATORS,g=d("iterator"),w="keys",k="values",j="entries",x=function(){return this};n.exports=function(e,n,t,i,d,y,O){a(t,n,i);var S,C,P,L=function(e){if(e===d&&I)return I;if(!m&&e in M)return M[e];switch(e){case w:case k:case j:return function(){return new t(this,e)}}return function(){return new t(this)}},E=n+" Iterator",A=!1,M=e.prototype,T=M[g]||M["@@iterator"]||d&&M[d],I=!m&&T||L(d),U="Array"==n&&M.entries||T;if(U&&(S=l(U.call(new e)))!==Object.prototype&&S.next&&(o||l(S)===b||(c?c(S,b):s(S[g])||p(S,g,x)),u(S,E,!0,!0),o&&(h[E]=x)),v&&d==k&&T&&T.name!==k&&(!o&&_?f(M,"name",k):(A=!0,I=function(){return T.call(this)})),d)if(C={values:L(k),keys:y?I:L(w),entries:L(j)},O)for(P in C)(m||A||!(P in M))&&p(M,P,C[P]);else r({target:n,proto:!0,forced:m||A},C);return o&&!O||M[g]===I||p(M,g,I,{name:d}),h[n]=I,C}},{"../internals/create-iterator-constructor":14,"../internals/create-non-enumerable-property":15,"../internals/export":26,"../internals/function-name":29,"../internals/is-callable":43,"../internals/is-pure":47,"../internals/iterators":51,"../internals/iterators-core":50,"../internals/object-get-prototype-of":63,"../internals/object-set-prototype-of":67,"../internals/redefine":71,"../internals/set-to-string-tag":74,"../internals/well-known-symbol":92}],19:[function(e,n,t){var r=e("../internals/fails");n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},{"../internals/fails":27}],20:[function(e,n,t){var r=e("../internals/global"),o=e("../internals/is-object"),i=r.document,s=o(i)&&o(i.createElement);n.exports=function(e){return s?i.createElement(e):{}}},{"../internals/global":34,"../internals/is-object":46}],21:[function(e,n,t){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},{}],22:[function(e,n,t){var r=e("../internals/document-create-element")("span").classList,o=r&&r.constructor&&r.constructor.prototype;n.exports=o===Object.prototype?void 0:o},{"../internals/document-create-element":20}],23:[function(e,n,t){var r=e("../internals/get-built-in");n.exports=r("navigator","userAgent")||""},{"../internals/get-built-in":30}],24:[function(e,n,t){var r,o,i=e("../internals/global"),s=e("../internals/engine-user-agent"),a=i.process,l=i.Deno,c=a&&a.versions||l&&l.version,u=c&&c.v8;u?o=(r=u.split("."))[0]<4?1:r[0]+r[1]:s&&(!(r=s.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=s.match(/Chrome\/(\d+)/))&&(o=r[1]),n.exports=o&&+o},{"../internals/engine-user-agent":23,"../internals/global":34}],25:[function(e,n,t){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},{}],26:[function(e,n,t){var r=e("../internals/global"),o=e("../internals/object-get-own-property-descriptor").f,i=e("../internals/create-non-enumerable-property"),s=e("../internals/redefine"),a=e("../internals/set-global"),l=e("../internals/copy-constructor-properties"),c=e("../internals/is-forced");n.exports=function(e,n){var t,u,f,p,d,h=e.target,y=e.global,v=e.stat;if(t=y?r:v?r[h]||a(h,{}):(r[h]||{}).prototype)for(u in n){if(p=n[u],f=e.noTargetGet?(d=o(t,u))&&d.value:t[u],!c(y?u:h+(v?".":"#")+u,e.forced)&&void 0!==f){if(typeof p==typeof f)continue;l(p,f)}(e.sham||f&&f.sham)&&i(p,"sham",!0),s(t,u,p,e)}}},{"../internals/copy-constructor-properties":12,"../internals/create-non-enumerable-property":15,"../internals/global":34,"../internals/is-forced":45,"../internals/object-get-own-property-descriptor":60,"../internals/redefine":71,"../internals/set-global":73}],27:[function(e,n,t){n.exports=function(e){try{return!!e()}catch(e){return!0}}},{}],28:[function(e,n,t){var r=e("../internals/a-callable");n.exports=function(e,n,t){if(r(e),void 0===n)return e;switch(t){case 0:return function(){return e.call(n)};case 1:return function(t){return e.call(n,t)};case 2:return function(t,r){return e.call(n,t,r)};case 3:return function(t,r,o){return e.call(n,t,r,o)}}return function(){return e.apply(n,arguments)}}},{"../internals/a-callable":2}],29:[function(e,n,t){var r=e("../internals/descriptors"),o=e("../internals/has-own-property"),i=Function.prototype,s=r&&Object.getOwnPropertyDescriptor,a=o(i,"name"),l=a&&"something"===function(){}.name,c=a&&(!r||r&&s(i,"name").configurable);n.exports={EXISTS:a,PROPER:l,CONFIGURABLE:c}},{"../internals/descriptors":19,"../internals/has-own-property":35}],30:[function(e,n,t){var r=e("../internals/global"),o=e("../internals/is-callable"),i=function(e){return o(e)?e:void 0};n.exports=function(e,n){return arguments.length<2?i(r[e]):r[e]&&r[e][n]}},{"../internals/global":34,"../internals/is-callable":43}],31:[function(e,n,t){var r=e("../internals/classof"),o=e("../internals/get-method"),i=e("../internals/iterators"),s=e("../internals/well-known-symbol")("iterator");n.exports=function(e){if(null!=e)return o(e,s)||o(e,"@@iterator")||i[r(e)]}},{"../internals/classof":11,"../internals/get-method":33,"../internals/iterators":51,"../internals/well-known-symbol":92}],32:[function(e,n,t){var r=e("../internals/a-callable"),o=e("../internals/an-object"),i=e("../internals/get-iterator-method");n.exports=function(e,n){var t=arguments.length<2?i(e):n;if(r(t))return o(t.call(e));throw TypeError(String(e)+" is not iterable")}},{"../internals/a-callable":2,"../internals/an-object":6,"../internals/get-iterator-method":31}],33:[function(e,n,t){var r=e("../internals/a-callable");n.exports=function(e,n){var t=e[n];return null==t?void 0:r(t)}},{"../internals/a-callable":2}],34:[function(e,n,t){(function(e){(function(){var t=function(e){return e&&e.Math==Math&&e};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],35:[function(e,n,t){var r=e("../internals/to-object"),o={}.hasOwnProperty;n.exports=Object.hasOwn||function(e,n){return o.call(r(e),n)}},{"../internals/to-object":84}],36:[function(e,n,t){n.exports={}},{}],37:[function(e,n,t){var r=e("../internals/get-built-in");n.exports=r("document","documentElement")},{"../internals/get-built-in":30}],38:[function(e,n,t){var r=e("../internals/descriptors"),o=e("../internals/fails"),i=e("../internals/document-create-element");n.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},{"../internals/descriptors":19,"../internals/document-create-element":20,"../internals/fails":27}],39:[function(e,n,t){var r=e("../internals/fails"),o=e("../internals/classof-raw"),i="".split;n.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},{"../internals/classof-raw":10,"../internals/fails":27}],40:[function(e,n,t){var r=e("../internals/is-callable"),o=e("../internals/shared-store"),i=Function.toString;r(o.inspectSource)||(o.inspectSource=function(e){return i.call(e)}),n.exports=o.inspectSource},{"../internals/is-callable":43,"../internals/shared-store":76}],41:[function(e,n,t){var r,o,i,s=e("../internals/native-weak-map"),a=e("../internals/global"),l=e("../internals/is-object"),c=e("../internals/create-non-enumerable-property"),u=e("../internals/has-own-property"),f=e("../internals/shared-store"),p=e("../internals/shared-key"),d=e("../internals/hidden-keys"),h="Object already initialized",y=a.WeakMap;if(s||f.state){var v=f.state||(f.state=new y),_=v.get,b=v.has,m=v.set;r=function(e,n){if(b.call(v,e))throw new TypeError(h);return n.facade=e,m.call(v,e,n),n},o=function(e){return _.call(v,e)||{}},i=function(e){return b.call(v,e)}}else{var g=p("state");d[g]=!0,r=function(e,n){if(u(e,g))throw new TypeError(h);return n.facade=e,c(e,g,n),n},o=function(e){return u(e,g)?e[g]:{}},i=function(e){return u(e,g)}}n.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(n){var t;if(!l(n)||(t=o(n)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return t}}}},{"../internals/create-non-enumerable-property":15,"../internals/global":34,"../internals/has-own-property":35,"../internals/hidden-keys":36,"../internals/is-object":46,"../internals/native-weak-map":55,"../internals/shared-key":75,"../internals/shared-store":76}],42:[function(e,n,t){var r=e("../internals/well-known-symbol"),o=e("../internals/iterators"),i=r("iterator"),s=Array.prototype;n.exports=function(e){return void 0!==e&&(o.Array===e||s[i]===e)}},{"../internals/iterators":51,"../internals/well-known-symbol":92}],43:[function(e,n,t){n.exports=function(e){return"function"==typeof e}},{}],44:[function(e,n,t){var r=e("../internals/fails"),o=e("../internals/is-callable"),i=e("../internals/classof"),s=e("../internals/get-built-in"),a=e("../internals/inspect-source"),l=[],c=s("Reflect","construct"),u=/^\s*(?:class|function)\b/,f=u.exec,p=!u.exec((function(){})),d=function(e){if(!o(e))return!1;try{return c(Object,l,e),!0}catch(e){return!1}};n.exports=!c||r((function(){var e;return d(d.call)||!d(Object)||!d((function(){e=!0}))||e}))?function(e){if(!o(e))return!1;switch(i(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return p||!!f.call(u,a(e))}:d},{"../internals/classof":11,"../internals/fails":27,"../internals/get-built-in":30,"../internals/inspect-source":40,"../internals/is-callable":43}],45:[function(e,n,t){var r=e("../internals/fails"),o=e("../internals/is-callable"),i=/#|\.prototype\./,s=function(e,n){var t=l[a(e)];return t==u||t!=c&&(o(n)?r(n):!!n)},a=s.normalize=function(e){return String(e).replace(i,".").toLowerCase()},l=s.data={},c=s.NATIVE="N",u=s.POLYFILL="P";n.exports=s},{"../internals/fails":27,"../internals/is-callable":43}],46:[function(e,n,t){var r=e("../internals/is-callable");n.exports=function(e){return"object"==typeof e?null!==e:r(e)}},{"../internals/is-callable":43}],47:[function(e,n,t){n.exports=!1},{}],48:[function(e,n,t){var r=e("../internals/is-callable"),o=e("../internals/get-built-in"),i=e("../internals/use-symbol-as-uid");n.exports=i?function(e){return"symbol"==typeof e}:function(e){var n=o("Symbol");return r(n)&&Object(e)instanceof n}},{"../internals/get-built-in":30,"../internals/is-callable":43,"../internals/use-symbol-as-uid":91}],49:[function(e,n,t){var r=e("../internals/an-object"),o=e("../internals/get-method");n.exports=function(e,n,t){var i,s;r(e);try{if(!(i=o(e,"return"))){if("throw"===n)throw t;return t}i=i.call(e)}catch(e){s=!0,i=e}if("throw"===n)throw t;if(s)throw i;return r(i),t}},{"../internals/an-object":6,"../internals/get-method":33}],50:[function(e,n,t){"use strict";var r,o,i,s=e("../internals/fails"),a=e("../internals/is-callable"),l=e("../internals/object-create"),c=e("../internals/object-get-prototype-of"),u=e("../internals/redefine"),f=e("../internals/well-known-symbol"),p=e("../internals/is-pure"),d=f("iterator"),h=!1;[].keys&&("next"in(i=[].keys())?(o=c(c(i)))!==Object.prototype&&(r=o):h=!0),null==r||s((function(){var e={};return r[d].call(e)!==e}))?r={}:p&&(r=l(r)),a(r[d])||u(r,d,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},{"../internals/fails":27,"../internals/is-callable":43,"../internals/is-pure":47,"../internals/object-create":57,"../internals/object-get-prototype-of":63,"../internals/redefine":71,"../internals/well-known-symbol":92}],51:[function(e,n,t){arguments[4][36][0].apply(t,arguments)},{dup:36}],52:[function(e,n,t){var r=e("../internals/to-length");n.exports=function(e){return r(e.length)}},{"../internals/to-length":83}],53:[function(e,n,t){var r=e("../internals/engine-v8-version"),o=e("../internals/fails");n.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},{"../internals/engine-v8-version":24,"../internals/fails":27}],54:[function(e,n,t){var r=e("../internals/fails"),o=e("../internals/well-known-symbol"),i=e("../internals/is-pure"),s=o("iterator");n.exports=!r((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),n=e.searchParams,t="";return e.pathname="c%20d",n.forEach((function(e,r){n.delete("b"),t+=r+e})),i&&!e.toJSON||!n.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==n.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!n[s]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==t||"x"!==new URL("http://x",void 0).host}))},{"../internals/fails":27,"../internals/is-pure":47,"../internals/well-known-symbol":92}],55:[function(e,n,t){var r=e("../internals/global"),o=e("../internals/is-callable"),i=e("../internals/inspect-source"),s=r.WeakMap;n.exports=o(s)&&/native code/.test(i(s))},{"../internals/global":34,"../internals/inspect-source":40,"../internals/is-callable":43}],56:[function(e,n,t){"use strict";var r=e("../internals/descriptors"),o=e("../internals/fails"),i=e("../internals/object-keys"),s=e("../internals/object-get-own-property-symbols"),a=e("../internals/object-property-is-enumerable"),l=e("../internals/to-object"),c=e("../internals/indexed-object"),u=Object.assign,f=Object.defineProperty;n.exports=!u||o((function(){if(r&&1!==u({b:1},u(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},n={},t=Symbol(),o="abcdefghijklmnopqrst";return e[t]=7,o.split("").forEach((function(e){n[e]=e})),7!=u({},e)[t]||i(u({},n)).join("")!=o}))?function(e,n){for(var t=l(e),o=arguments.length,u=1,f=s.f,p=a.f;o>u;)for(var d,h=c(arguments[u++]),y=f?i(h).concat(f(h)):i(h),v=y.length,_=0;v>_;)d=y[_++],r&&!p.call(h,d)||(t[d]=h[d]);return t}:u},{"../internals/descriptors":19,"../internals/fails":27,"../internals/indexed-object":39,"../internals/object-get-own-property-symbols":62,"../internals/object-keys":65,"../internals/object-property-is-enumerable":66,"../internals/to-object":84}],57:[function(e,n,t){var r,o=e("../internals/an-object"),i=e("../internals/object-define-properties"),s=e("../internals/enum-bug-keys"),a=e("../internals/hidden-keys"),l=e("../internals/html"),c=e("../internals/document-create-element"),u=e("../internals/shared-key"),f=u("IE_PROTO"),p=function(){},d=function(e){return"<script>"+e+"</"+"script>"},h=function(e){e.write(d("")),e.close();var n=e.parentWindow.Object;return e=null,n},y=function(){try{r=new ActiveXObject("htmlfile")}catch(e){}var e,n;y="undefined"!=typeof document?document.domain&&r?h(r):((n=c("iframe")).style.display="none",l.appendChild(n),n.src=String("javascript:"),(e=n.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F):h(r);for(var t=s.length;t--;)delete y.prototype[s[t]];return y()};a[f]=!0,n.exports=Object.create||function(e,n){var t;return null!==e?(p.prototype=o(e),t=new p,p.prototype=null,t[f]=e):t=y(),void 0===n?t:i(t,n)}},{"../internals/an-object":6,"../internals/document-create-element":20,"../internals/enum-bug-keys":25,"../internals/hidden-keys":36,"../internals/html":37,"../internals/object-define-properties":58,"../internals/shared-key":75}],58:[function(e,n,t){var r=e("../internals/descriptors"),o=e("../internals/object-define-property"),i=e("../internals/an-object"),s=e("../internals/object-keys");n.exports=r?Object.defineProperties:function(e,n){i(e);for(var t,r=s(n),a=r.length,l=0;a>l;)o.f(e,t=r[l++],n[t]);return e}},{"../internals/an-object":6,"../internals/descriptors":19,"../internals/object-define-property":59,"../internals/object-keys":65}],59:[function(e,n,t){var r=e("../internals/descriptors"),o=e("../internals/ie8-dom-define"),i=e("../internals/an-object"),s=e("../internals/to-property-key"),a=Object.defineProperty;t.f=r?a:function(e,n,t){if(i(e),n=s(n),i(t),o)try{return a(e,n,t)}catch(e){}if("get"in t||"set"in t)throw TypeError("Accessors not supported");return"value"in t&&(e[n]=t.value),e}},{"../internals/an-object":6,"../internals/descriptors":19,"../internals/ie8-dom-define":38,"../internals/to-property-key":86}],60:[function(e,n,t){var r=e("../internals/descriptors"),o=e("../internals/object-property-is-enumerable"),i=e("../internals/create-property-descriptor"),s=e("../internals/to-indexed-object"),a=e("../internals/to-property-key"),l=e("../internals/has-own-property"),c=e("../internals/ie8-dom-define"),u=Object.getOwnPropertyDescriptor;t.f=r?u:function(e,n){if(e=s(e),n=a(n),c)try{return u(e,n)}catch(e){}if(l(e,n))return i(!o.f.call(e,n),e[n])}},{"../internals/create-property-descriptor":16,"../internals/descriptors":19,"../internals/has-own-property":35,"../internals/ie8-dom-define":38,"../internals/object-property-is-enumerable":66,"../internals/to-indexed-object":81,"../internals/to-property-key":86}],61:[function(e,n,t){var r=e("../internals/object-keys-internal"),o=e("../internals/enum-bug-keys").concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},{"../internals/enum-bug-keys":25,"../internals/object-keys-internal":64}],62:[function(e,n,t){t.f=Object.getOwnPropertySymbols},{}],63:[function(e,n,t){var r=e("../internals/has-own-property"),o=e("../internals/is-callable"),i=e("../internals/to-object"),s=e("../internals/shared-key"),a=e("../internals/correct-prototype-getter"),l=s("IE_PROTO"),c=Object.prototype;n.exports=a?Object.getPrototypeOf:function(e){var n=i(e);if(r(n,l))return n[l];var t=n.constructor;return o(t)&&n instanceof t?t.prototype:n instanceof Object?c:null}},{"../internals/correct-prototype-getter":13,"../internals/has-own-property":35,"../internals/is-callable":43,"../internals/shared-key":75,"../internals/to-object":84}],64:[function(e,n,t){var r=e("../internals/has-own-property"),o=e("../internals/to-indexed-object"),i=e("../internals/array-includes").indexOf,s=e("../internals/hidden-keys");n.exports=function(e,n){var t,a=o(e),l=0,c=[];for(t in a)!r(s,t)&&r(a,t)&&c.push(t);for(;n.length>l;)r(a,t=n[l++])&&(~i(c,t)||c.push(t));return c}},{"../internals/array-includes":8,"../internals/has-own-property":35,"../internals/hidden-keys":36,"../internals/to-indexed-object":81}],65:[function(e,n,t){var r=e("../internals/object-keys-internal"),o=e("../internals/enum-bug-keys");n.exports=Object.keys||function(e){return r(e,o)}},{"../internals/enum-bug-keys":25,"../internals/object-keys-internal":64}],66:[function(e,n,t){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);t.f=i?function(e){var n=o(this,e);return!!n&&n.enumerable}:r},{}],67:[function(e,n,t){var r=e("../internals/an-object"),o=e("../internals/a-possible-prototype");n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,n=!1,t={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(t,[]),n=t instanceof Array}catch(e){}return function(t,i){return r(t),o(i),n?e.call(t,i):t.__proto__=i,t}}():void 0)},{"../internals/a-possible-prototype":3,"../internals/an-object":6}],68:[function(e,n,t){var r=e("../internals/is-callable"),o=e("../internals/is-object");n.exports=function(e,n){var t,i;if("string"===n&&r(t=e.toString)&&!o(i=t.call(e)))return i;if(r(t=e.valueOf)&&!o(i=t.call(e)))return i;if("string"!==n&&r(t=e.toString)&&!o(i=t.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},{"../internals/is-callable":43,"../internals/is-object":46}],69:[function(e,n,t){var r=e("../internals/get-built-in"),o=e("../internals/object-get-own-property-names"),i=e("../internals/object-get-own-property-symbols"),s=e("../internals/an-object");n.exports=r("Reflect","ownKeys")||function(e){var n=o.f(s(e)),t=i.f;return t?n.concat(t(e)):n}},{"../internals/an-object":6,"../internals/get-built-in":30,"../internals/object-get-own-property-names":61,"../internals/object-get-own-property-symbols":62}],70:[function(e,n,t){var r=e("../internals/redefine");n.exports=function(e,n,t){for(var o in n)r(e,o,n[o],t);return e}},{"../internals/redefine":71}],71:[function(e,n,t){var r=e("../internals/global"),o=e("../internals/is-callable"),i=e("../internals/has-own-property"),s=e("../internals/create-non-enumerable-property"),a=e("../internals/set-global"),l=e("../internals/inspect-source"),c=e("../internals/internal-state"),u=e("../internals/function-name").CONFIGURABLE,f=c.get,p=c.enforce,d=String(String).split("String");(n.exports=function(e,n,t,l){var c,f=!!l&&!!l.unsafe,h=!!l&&!!l.enumerable,y=!!l&&!!l.noTargetGet,v=l&&void 0!==l.name?l.name:n;o(t)&&("Symbol("===String(v).slice(0,7)&&(v="["+String(v).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(t,"name")||u&&t.name!==v)&&s(t,"name",v),(c=p(t)).source||(c.source=d.join("string"==typeof v?v:""))),e!==r?(f?!y&&e[n]&&(h=!0):delete e[n],h?e[n]=t:s(e,n,t)):h?e[n]=t:a(n,t)})(Function.prototype,"toString",(function(){return o(this)&&f(this).source||l(this)}))},{"../internals/create-non-enumerable-property":15,"../internals/function-name":29,"../internals/global":34,"../internals/has-own-property":35,"../internals/inspect-source":40,"../internals/internal-state":41,"../internals/is-callable":43,"../internals/set-global":73}],72:[function(e,n,t){n.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},{}],73:[function(e,n,t){var r=e("../internals/global");n.exports=function(e,n){try{Object.defineProperty(r,e,{value:n,configurable:!0,writable:!0})}catch(t){r[e]=n}return n}},{"../internals/global":34}],74:[function(e,n,t){var r=e("../internals/object-define-property").f,o=e("../internals/has-own-property"),i=e("../internals/well-known-symbol")("toStringTag");n.exports=function(e,n,t){e&&!o(e=t?e:e.prototype,i)&&r(e,i,{configurable:!0,value:n})}},{"../internals/has-own-property":35,"../internals/object-define-property":59,"../internals/well-known-symbol":92}],75:[function(e,n,t){var r=e("../internals/shared"),o=e("../internals/uid"),i=r("keys");n.exports=function(e){return i[e]||(i[e]=o(e))}},{"../internals/shared":77,"../internals/uid":90}],76:[function(e,n,t){var r=e("../internals/global"),o=e("../internals/set-global"),i="__core-js_shared__",s=r[i]||o(i,{});n.exports=s},{"../internals/global":34,"../internals/set-global":73}],77:[function(e,n,t){var r=e("../internals/is-pure"),o=e("../internals/shared-store");(n.exports=function(e,n){return o[e]||(o[e]=void 0!==n?n:{})})("versions",[]).push({version:"3.18.3",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},{"../internals/is-pure":47,"../internals/shared-store":76}],78:[function(e,n,t){var r=e("../internals/to-integer-or-infinity"),o=e("../internals/to-string"),i=e("../internals/require-object-coercible"),s=function(e){return function(n,t){var s,a,l=o(i(n)),c=r(t),u=l.length;return c<0||c>=u?e?"":void 0:(s=l.charCodeAt(c))<55296||s>56319||c+1===u||(a=l.charCodeAt(c+1))<56320||a>57343?e?l.charAt(c):s:e?l.slice(c,c+2):a-56320+(s-55296<<10)+65536}};n.exports={codeAt:s(!1),charAt:s(!0)}},{"../internals/require-object-coercible":72,"../internals/to-integer-or-infinity":82,"../internals/to-string":88}],79:[function(e,n,t){"use strict";var r=2147483647,o=/[^\0-\u007E]/,i=/[.\u3002\uFF0E\uFF61]/g,s="Overflow: input needs wider integers to process",a=Math.floor,l=String.fromCharCode,c=function(e){return e+22+75*(e<26)},u=function(e,n,t){var r=0;for(e=t?a(e/700):e>>1,e+=a(e/n);e>455;r+=36)e=a(e/35);return a(r+36*e/(e+38))},f=function(e){var n=[];e=function(e){for(var n=[],t=0,r=e.length;t<r;){var o=e.charCodeAt(t++);if(o>=55296&&o<=56319&&t<r){var i=e.charCodeAt(t++);56320==(64512&i)?n.push(((1023&o)<<10)+(1023&i)+65536):(n.push(o),t--)}else n.push(o)}return n}(e);var t,o,i=e.length,f=128,p=0,d=72;for(t=0;t<e.length;t++)(o=e[t])<128&&n.push(l(o));var h=n.length,y=h;for(h&&n.push("-");y<i;){var v=r;for(t=0;t<e.length;t++)(o=e[t])>=f&&o<v&&(v=o);var _=y+1;if(v-f>a((r-p)/_))throw RangeError(s);for(p+=(v-f)*_,f=v,t=0;t<e.length;t++){if((o=e[t])<f&&++p>r)throw RangeError(s);if(o==f){for(var b=p,m=36;;m+=36){var g=m<=d?1:m>=d+26?26:m-d;if(b<g)break;var w=b-g,k=36-g;n.push(l(c(g+w%k))),b=a(w/k)}n.push(l(c(b))),d=u(p,_,y==h),p=0,++y}}++p,++f}return n.join("")};n.exports=function(e){var n,t,r=[],s=e.toLowerCase().replace(i,".").split(".");for(n=0;n<s.length;n++)t=s[n],r.push(o.test(t)?"xn--"+f(t):t);return r.join(".")}},{}],80:[function(e,n,t){var r=e("../internals/to-integer-or-infinity"),o=Math.max,i=Math.min;n.exports=function(e,n){var t=r(e);return t<0?o(t+n,0):i(t,n)}},{"../internals/to-integer-or-infinity":82}],81:[function(e,n,t){var r=e("../internals/indexed-object"),o=e("../internals/require-object-coercible");n.exports=function(e){return r(o(e))}},{"../internals/indexed-object":39,"../internals/require-object-coercible":72}],82:[function(e,n,t){var r=Math.ceil,o=Math.floor;n.exports=function(e){var n=+e;return n!=n||0===n?0:(n>0?o:r)(n)}},{}],83:[function(e,n,t){var r=e("../internals/to-integer-or-infinity"),o=Math.min;n.exports=function(e){return e>0?o(r(e),9007199254740991):0}},{"../internals/to-integer-or-infinity":82}],84:[function(e,n,t){var r=e("../internals/require-object-coercible");n.exports=function(e){return Object(r(e))}},{"../internals/require-object-coercible":72}],85:[function(e,n,t){var r=e("../internals/is-object"),o=e("../internals/is-symbol"),i=e("../internals/get-method"),s=e("../internals/ordinary-to-primitive"),a=e("../internals/well-known-symbol")("toPrimitive");n.exports=function(e,n){if(!r(e)||o(e))return e;var t,l=i(e,a);if(l){if(void 0===n&&(n="default"),t=l.call(e,n),!r(t)||o(t))return t;throw TypeError("Can't convert object to primitive value")}return void 0===n&&(n="number"),s(e,n)}},{"../internals/get-method":33,"../internals/is-object":46,"../internals/is-symbol":48,"../internals/ordinary-to-primitive":68,"../internals/well-known-symbol":92}],86:[function(e,n,t){var r=e("../internals/to-primitive"),o=e("../internals/is-symbol");n.exports=function(e){var n=r(e,"string");return o(n)?n:String(n)}},{"../internals/is-symbol":48,"../internals/to-primitive":85}],87:[function(e,n,t){var r={};r[e("../internals/well-known-symbol")("toStringTag")]="z",n.exports="[object z]"===String(r)},{"../internals/well-known-symbol":92}],88:[function(e,n,t){var r=e("../internals/classof");n.exports=function(e){if("Symbol"===r(e))throw TypeError("Cannot convert a Symbol value to a string");return String(e)}},{"../internals/classof":11}],89:[function(e,n,t){n.exports=function(e){try{return String(e)}catch(e){return"Object"}}},{}],90:[function(e,n,t){var r=0,o=Math.random();n.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++r+o).toString(36)}},{}],91:[function(e,n,t){var r=e("../internals/native-symbol");n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},{"../internals/native-symbol":53}],92:[function(e,n,t){var r=e("../internals/global"),o=e("../internals/shared"),i=e("../internals/has-own-property"),s=e("../internals/uid"),a=e("../internals/native-symbol"),l=e("../internals/use-symbol-as-uid"),c=o("wks"),u=r.Symbol,f=l?u:u&&u.withoutSetter||s;n.exports=function(e){return i(c,e)&&(a||"string"==typeof c[e])||(a&&i(u,e)?c[e]=u[e]:c[e]=f("Symbol."+e)),c[e]}},{"../internals/global":34,"../internals/has-own-property":35,"../internals/native-symbol":53,"../internals/shared":77,"../internals/uid":90,"../internals/use-symbol-as-uid":91}],93:[function(e,n,t){"use strict";var r=e("../internals/to-indexed-object"),o=e("../internals/add-to-unscopables"),i=e("../internals/iterators"),s=e("../internals/internal-state"),a=e("../internals/define-iterator"),l="Array Iterator",c=s.set,u=s.getterFor(l);n.exports=a(Array,"Array",(function(e,n){c(this,{type:l,target:r(e),index:0,kind:n})}),(function(){var e=u(this),n=e.target,t=e.kind,r=e.index++;return!n||r>=n.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:n[r],done:!1}:{value:[r,n[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},{"../internals/add-to-unscopables":4,"../internals/define-iterator":18,"../internals/internal-state":41,"../internals/iterators":51,"../internals/to-indexed-object":81}],94:[function(e,n,t){"use strict";var r=e("../internals/string-multibyte").charAt,o=e("../internals/to-string"),i=e("../internals/internal-state"),s=e("../internals/define-iterator"),a="String Iterator",l=i.set,c=i.getterFor(a);s(String,"String",(function(e){l(this,{type:a,string:o(e),index:0})}),(function(){var e,n=c(this),t=n.string,o=n.index;return o>=t.length?{value:void 0,done:!0}:(e=r(t,o),n.index+=e.length,{value:e,done:!1})}))},{"../internals/define-iterator":18,"../internals/internal-state":41,"../internals/string-multibyte":78,"../internals/to-string":88}],95:[function(e,n,t){var r=e("../internals/global"),o=e("../internals/dom-iterables"),i=e("../internals/dom-token-list-prototype"),s=e("../modules/es.array.iterator"),a=e("../internals/create-non-enumerable-property"),l=e("../internals/well-known-symbol"),c=l("iterator"),u=l("toStringTag"),f=s.values,p=function(e,n){if(e){if(e[c]!==f)try{a(e,c,f)}catch(n){e[c]=f}if(e[u]||a(e,u,n),o[n])for(var t in s)if(e[t]!==s[t])try{a(e,t,s[t])}catch(n){e[t]=s[t]}}};for(var d in o)p(r[d]&&r[d].prototype,d);p(i,"DOMTokenList")},{"../internals/create-non-enumerable-property":15,"../internals/dom-iterables":21,"../internals/dom-token-list-prototype":22,"../internals/global":34,"../internals/well-known-symbol":92,"../modules/es.array.iterator":93}],96:[function(e,n,t){"use strict";e("../modules/es.array.iterator");var r=e("../internals/export"),o=e("../internals/get-built-in"),i=e("../internals/native-url"),s=e("../internals/redefine"),a=e("../internals/redefine-all"),l=e("../internals/set-to-string-tag"),c=e("../internals/create-iterator-constructor"),u=e("../internals/internal-state"),f=e("../internals/an-instance"),p=e("../internals/is-callable"),d=e("../internals/has-own-property"),h=e("../internals/function-bind-context"),y=e("../internals/classof"),v=e("../internals/an-object"),_=e("../internals/is-object"),b=e("../internals/to-string"),m=e("../internals/object-create"),g=e("../internals/create-property-descriptor"),w=e("../internals/get-iterator"),k=e("../internals/get-iterator-method"),j=e("../internals/well-known-symbol"),x=o("fetch"),O=o("Request"),S=O&&O.prototype,C=o("Headers"),P=j("iterator"),L="URLSearchParams",E="URLSearchParamsIterator",A=u.set,M=u.getterFor(L),T=u.getterFor(E),I=/\+/g,U=Array(4),B=function(e){return U[e-1]||(U[e-1]=RegExp("((?:%[\\da-f]{2}){"+e+"})","gi"))},R=function(e){try{return decodeURIComponent(e)}catch(n){return e}},z=function(e){var n=e.replace(I," "),t=4;try{return decodeURIComponent(n)}catch(e){for(;t;)n=n.replace(B(t--),R);return n}},F=/[!'()~]|%20/g,H={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},D=function(e){return H[e]},q=function(e){return encodeURIComponent(e).replace(F,D)},N=function(e,n){if(n)for(var t,r,o=n.split("&"),i=0;i<o.length;)(t=o[i++]).length&&(r=t.split("="),e.push({key:z(r.shift()),value:z(r.join("="))}))},W=function(e){this.entries.length=0,N(this.entries,e)},V=function(e,n){if(e<n)throw TypeError("Not enough arguments")},G=c((function(e,n){A(this,{type:E,iterator:w(M(e).entries),kind:n})}),"Iterator",(function(){var e=T(this),n=e.kind,t=e.iterator.next(),r=t.value;return t.done||(t.value="keys"===n?r.key:"values"===n?r.value:[r.key,r.value]),t})),J=function(){f(this,J,L);var e,n,t,r,o,i,s,a,l,c=arguments.length>0?arguments[0]:void 0,u=this,p=[];if(A(u,{type:L,entries:p,updateURL:function(){},updateSearchParams:W}),void 0!==c)if(_(c))if(e=k(c))for(t=(n=w(c,e)).next;!(r=t.call(n)).done;){if((s=(i=(o=w(v(r.value))).next).call(o)).done||(a=i.call(o)).done||!i.call(o).done)throw TypeError("Expected sequence with length 2");p.push({key:b(s.value),value:b(a.value)})}else for(l in c)d(c,l)&&p.push({key:l,value:b(c[l])});else N(p,"string"==typeof c?"?"===c.charAt(0)?c.slice(1):c:b(c))},Y=J.prototype;if(a(Y,{append:function(e,n){V(arguments.length,2);var t=M(this);t.entries.push({key:b(e),value:b(n)}),t.updateURL()},delete:function(e){V(arguments.length,1);for(var n=M(this),t=n.entries,r=b(e),o=0;o<t.length;)t[o].key===r?t.splice(o,1):o++;n.updateURL()},get:function(e){V(arguments.length,1);for(var n=M(this).entries,t=b(e),r=0;r<n.length;r++)if(n[r].key===t)return n[r].value;return null},getAll:function(e){V(arguments.length,1);for(var n=M(this).entries,t=b(e),r=[],o=0;o<n.length;o++)n[o].key===t&&r.push(n[o].value);return r},has:function(e){V(arguments.length,1);for(var n=M(this).entries,t=b(e),r=0;r<n.length;)if(n[r++].key===t)return!0;return!1},set:function(e,n){V(arguments.length,1);for(var t,r=M(this),o=r.entries,i=!1,s=b(e),a=b(n),l=0;l<o.length;l++)(t=o[l]).key===s&&(i?o.splice(l--,1):(i=!0,t.value=a));i||o.push({key:s,value:a}),r.updateURL()},sort:function(){var e,n,t,r=M(this),o=r.entries,i=o.slice();for(o.length=0,t=0;t<i.length;t++){for(e=i[t],n=0;n<t;n++)if(o[n].key>e.key){o.splice(n,0,e);break}n===t&&o.push(e)}r.updateURL()},forEach:function(e){for(var n,t=M(this).entries,r=h(e,arguments.length>1?arguments[1]:void 0,3),o=0;o<t.length;)r((n=t[o++]).value,n.key,this)},keys:function(){return new G(this,"keys")},values:function(){return new G(this,"values")},entries:function(){return new G(this,"entries")}},{enumerable:!0}),s(Y,P,Y.entries,{name:"entries"}),s(Y,"toString",(function(){for(var e,n=M(this).entries,t=[],r=0;r<n.length;)e=n[r++],t.push(q(e.key)+"="+q(e.value));return t.join("&")}),{enumerable:!0}),l(J,L),r({global:!0,forced:!i},{URLSearchParams:J}),!i&&p(C)){var $=function(e){if(_(e)){var n,t=e.body;if(y(t)===L)return(n=e.headers?new C(e.headers):new C).has("content-type")||n.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),m(e,{body:g(0,String(t)),headers:g(0,n)})}return e};if(p(x)&&r({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return x(e,arguments.length>1?$(arguments[1]):{})}}),p(O)){var X=function(e){return f(this,X,"Request"),new O(e,arguments.length>1?$(arguments[1]):{})};S.constructor=X,X.prototype=S,r({global:!0,forced:!0},{Request:X})}}n.exports={URLSearchParams:J,getState:M}},{"../internals/an-instance":5,"../internals/an-object":6,"../internals/classof":11,"../internals/create-iterator-constructor":14,"../internals/create-property-descriptor":16,"../internals/export":26,"../internals/function-bind-context":28,"../internals/get-built-in":30,"../internals/get-iterator":32,"../internals/get-iterator-method":31,"../internals/has-own-property":35,"../internals/internal-state":41,"../internals/is-callable":43,"../internals/is-object":46,"../internals/native-url":54,"../internals/object-create":57,"../internals/redefine":71,"../internals/redefine-all":70,"../internals/set-to-string-tag":74,"../internals/to-string":88,"../internals/well-known-symbol":92,"../modules/es.array.iterator":93}],97:[function(e,n,t){"use strict";e("../modules/es.string.iterator");var r,o=e("../internals/export"),i=e("../internals/descriptors"),s=e("../internals/native-url"),a=e("../internals/global"),l=e("../internals/object-define-properties"),c=e("../internals/redefine"),u=e("../internals/an-instance"),f=e("../internals/has-own-property"),p=e("../internals/object-assign"),d=e("../internals/array-from"),h=e("../internals/string-multibyte").codeAt,y=e("../internals/string-punycode-to-ascii"),v=e("../internals/to-string"),_=e("../internals/set-to-string-tag"),b=e("../modules/web.url-search-params"),m=e("../internals/internal-state"),g=a.URL,w=b.URLSearchParams,k=b.getState,j=m.set,x=m.getterFor("URL"),O=Math.floor,S=Math.pow,C="Invalid scheme",P="Invalid host",L="Invalid port",E=/[a-z]/i,A=/[\d+-.a-z]/i,M=/\d/,T=/^0x/i,I=/^[0-7]+$/,U=/^\d+$/,B=/^[\da-f]+$/i,R=/[\0\t\n\r #%/:<>?@[\\\]^|]/,z=/[\0\t\n\r #/:<>?@[\\\]^|]/,F=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,H=/[\t\n\r]/g,D=function(e,n){var t,r,o;if("["==n.charAt(0)){if("]"!=n.charAt(n.length-1))return P;if(!(t=N(n.slice(1,-1))))return P;e.host=t}else if(K(e)){if(n=y(n),R.test(n))return P;if(null===(t=q(n)))return P;e.host=t}else{if(z.test(n))return P;for(t="",r=d(n),o=0;o<r.length;o++)t+=$(r[o],V);e.host=t}},q=function(e){var n,t,r,o,i,s,a,l=e.split(".");if(l.length&&""==l[l.length-1]&&l.pop(),(n=l.length)>4)return e;for(t=[],r=0;r<n;r++){if(""==(o=l[r]))return e;if(i=10,o.length>1&&"0"==o.charAt(0)&&(i=T.test(o)?16:8,o=o.slice(8==i?1:2)),""===o)s=0;else{if(!(10==i?U:8==i?I:B).test(o))return e;s=parseInt(o,i)}t.push(s)}for(r=0;r<n;r++)if(s=t[r],r==n-1){if(s>=S(256,5-n))return null}else if(s>255)return null;for(a=t.pop(),r=0;r<t.length;r++)a+=t[r]*S(256,3-r);return a},N=function(e){var n,t,r,o,i,s,a,l=[0,0,0,0,0,0,0,0],c=0,u=null,f=0,p=function(){return e.charAt(f)};if(":"==p()){if(":"!=e.charAt(1))return;f+=2,u=++c}for(;p();){if(8==c)return;if(":"!=p()){for(n=t=0;t<4&&B.test(p());)n=16*n+parseInt(p(),16),f++,t++;if("."==p()){if(0==t)return;if(f-=t,c>6)return;for(r=0;p();){if(o=null,r>0){if(!("."==p()&&r<4))return;f++}if(!M.test(p()))return;for(;M.test(p());){if(i=parseInt(p(),10),null===o)o=i;else{if(0==o)return;o=10*o+i}if(o>255)return;f++}l[c]=256*l[c]+o,2!=++r&&4!=r||c++}if(4!=r)return;break}if(":"==p()){if(f++,!p())return}else if(p())return;l[c++]=n}else{if(null!==u)return;f++,u=++c}}if(null!==u)for(s=c-u,c=7;0!=c&&s>0;)a=l[c],l[c--]=l[u+s-1],l[u+--s]=a;else if(8!=c)return;return l},W=function(e){var n,t,r,o;if("number"==typeof e){for(n=[],t=0;t<4;t++)n.unshift(e%256),e=O(e/256);return n.join(".")}if("object"==typeof e){for(n="",r=function(e){for(var n=null,t=1,r=null,o=0,i=0;i<8;i++)0!==e[i]?(o>t&&(n=r,t=o),r=null,o=0):(null===r&&(r=i),++o);return o>t&&(n=r,t=o),n}(e),t=0;t<8;t++)o&&0===e[t]||(o&&(o=!1),r===t?(n+=t?":":"::",o=!0):(n+=e[t].toString(16),t<7&&(n+=":")));return"["+n+"]"}return e},V={},G=p({},V,{" ":1,'"':1,"<":1,">":1,"`":1}),J=p({},G,{"#":1,"?":1,"{":1,"}":1}),Y=p({},J,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),$=function(e,n){var t=h(e,0);return t>32&&t<127&&!f(n,e)?e:encodeURIComponent(e)},X={ftp:21,file:null,http:80,https:443,ws:80,wss:443},K=function(e){return f(X,e.scheme)},Z=function(e){return""!=e.username||""!=e.password},Q=function(e){return!e.host||e.cannotBeABaseURL||"file"==e.scheme},ee=function(e,n){var t;return 2==e.length&&E.test(e.charAt(0))&&(":"==(t=e.charAt(1))||!n&&"|"==t)},ne=function(e){var n;return e.length>1&&ee(e.slice(0,2))&&(2==e.length||"/"===(n=e.charAt(2))||"\\"===n||"?"===n||"#"===n)},te=function(e){var n=e.path,t=n.length;!t||"file"==e.scheme&&1==t&&ee(n[0],!0)||n.pop()},re=function(e){return"."===e||"%2e"===e.toLowerCase()},oe={},ie={},se={},ae={},le={},ce={},ue={},fe={},pe={},de={},he={},ye={},ve={},_e={},be={},me={},ge={},we={},ke={},je={},xe={},Oe=function(e,n,t,o){var i,s,a,l,c,u=t||oe,p=0,h="",y=!1,v=!1,_=!1;for(t||(e.scheme="",e.username="",e.password="",e.host=null,e.port=null,e.path=[],e.query=null,e.fragment=null,e.cannotBeABaseURL=!1,n=n.replace(F,"")),n=n.replace(H,""),i=d(n);p<=i.length;){switch(s=i[p],u){case oe:if(!s||!E.test(s)){if(t)return C;u=se;continue}h+=s.toLowerCase(),u=ie;break;case ie:if(s&&(A.test(s)||"+"==s||"-"==s||"."==s))h+=s.toLowerCase();else{if(":"!=s){if(t)return C;h="",u=se,p=0;continue}if(t&&(K(e)!=f(X,h)||"file"==h&&(Z(e)||null!==e.port)||"file"==e.scheme&&!e.host))return;if(e.scheme=h,t)return void(K(e)&&X[e.scheme]==e.port&&(e.port=null));h="","file"==e.scheme?u=_e:K(e)&&o&&o.scheme==e.scheme?u=ae:K(e)?u=fe:"/"==i[p+1]?(u=le,p++):(e.cannotBeABaseURL=!0,e.path.push(""),u=ke)}break;case se:if(!o||o.cannotBeABaseURL&&"#"!=s)return C;if(o.cannotBeABaseURL&&"#"==s){e.scheme=o.scheme,e.path=o.path.slice(),e.query=o.query,e.fragment="",e.cannotBeABaseURL=!0,u=xe;break}u="file"==o.scheme?_e:ce;continue;case ae:if("/"!=s||"/"!=i[p+1]){u=ce;continue}u=pe,p++;break;case le:if("/"==s){u=de;break}u=we;continue;case ce:if(e.scheme=o.scheme,s==r)e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=o.path.slice(),e.query=o.query;else if("/"==s||"\\"==s&&K(e))u=ue;else if("?"==s)e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=o.path.slice(),e.query="",u=je;else{if("#"!=s){e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=o.path.slice(),e.path.pop(),u=we;continue}e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=o.path.slice(),e.query=o.query,e.fragment="",u=xe}break;case ue:if(!K(e)||"/"!=s&&"\\"!=s){if("/"!=s){e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,u=we;continue}u=de}else u=pe;break;case fe:if(u=pe,"/"!=s||"/"!=h.charAt(p+1))continue;p++;break;case pe:if("/"!=s&&"\\"!=s){u=de;continue}break;case de:if("@"==s){y&&(h="%40"+h),y=!0,a=d(h);for(var b=0;b<a.length;b++){var m=a[b];if(":"!=m||_){var g=$(m,Y);_?e.password+=g:e.username+=g}else _=!0}h=""}else if(s==r||"/"==s||"?"==s||"#"==s||"\\"==s&&K(e)){if(y&&""==h)return"Invalid authority";p-=d(h).length+1,h="",u=he}else h+=s;break;case he:case ye:if(t&&"file"==e.scheme){u=me;continue}if(":"!=s||v){if(s==r||"/"==s||"?"==s||"#"==s||"\\"==s&&K(e)){if(K(e)&&""==h)return P;if(t&&""==h&&(Z(e)||null!==e.port))return;if(l=D(e,h))return l;if(h="",u=ge,t)return;continue}"["==s?v=!0:"]"==s&&(v=!1),h+=s}else{if(""==h)return P;if(l=D(e,h))return l;if(h="",u=ve,t==ye)return}break;case ve:if(!M.test(s)){if(s==r||"/"==s||"?"==s||"#"==s||"\\"==s&&K(e)||t){if(""!=h){var w=parseInt(h,10);if(w>65535)return L;e.port=K(e)&&w===X[e.scheme]?null:w,h=""}if(t)return;u=ge;continue}return L}h+=s;break;case _e:if(e.scheme="file","/"==s||"\\"==s)u=be;else{if(!o||"file"!=o.scheme){u=we;continue}if(s==r)e.host=o.host,e.path=o.path.slice(),e.query=o.query;else if("?"==s)e.host=o.host,e.path=o.path.slice(),e.query="",u=je;else{if("#"!=s){ne(i.slice(p).join(""))||(e.host=o.host,e.path=o.path.slice(),te(e)),u=we;continue}e.host=o.host,e.path=o.path.slice(),e.query=o.query,e.fragment="",u=xe}}break;case be:if("/"==s||"\\"==s){u=me;break}o&&"file"==o.scheme&&!ne(i.slice(p).join(""))&&(ee(o.path[0],!0)?e.path.push(o.path[0]):e.host=o.host),u=we;continue;case me:if(s==r||"/"==s||"\\"==s||"?"==s||"#"==s){if(!t&&ee(h))u=we;else if(""==h){if(e.host="",t)return;u=ge}else{if(l=D(e,h))return l;if("localhost"==e.host&&(e.host=""),t)return;h="",u=ge}continue}h+=s;break;case ge:if(K(e)){if(u=we,"/"!=s&&"\\"!=s)continue}else if(t||"?"!=s)if(t||"#"!=s){if(s!=r&&(u=we,"/"!=s))continue}else e.fragment="",u=xe;else e.query="",u=je;break;case we:if(s==r||"/"==s||"\\"==s&&K(e)||!t&&("?"==s||"#"==s)){if(".."===(c=(c=h).toLowerCase())||"%2e."===c||".%2e"===c||"%2e%2e"===c?(te(e),"/"==s||"\\"==s&&K(e)||e.path.push("")):re(h)?"/"==s||"\\"==s&&K(e)||e.path.push(""):("file"==e.scheme&&!e.path.length&&ee(h)&&(e.host&&(e.host=""),h=h.charAt(0)+":"),e.path.push(h)),h="","file"==e.scheme&&(s==r||"?"==s||"#"==s))for(;e.path.length>1&&""===e.path[0];)e.path.shift();"?"==s?(e.query="",u=je):"#"==s&&(e.fragment="",u=xe)}else h+=$(s,J);break;case ke:"?"==s?(e.query="",u=je):"#"==s?(e.fragment="",u=xe):s!=r&&(e.path[0]+=$(s,V));break;case je:t||"#"!=s?s!=r&&("'"==s&&K(e)?e.query+="%27":e.query+="#"==s?"%23":$(s,V)):(e.fragment="",u=xe);break;case xe:s!=r&&(e.fragment+=$(s,G))}p++}},Se=function(e){var n,t,r=u(this,Se,"URL"),o=arguments.length>1?arguments[1]:void 0,s=v(e),a=j(r,{type:"URL"});if(void 0!==o)if(o instanceof Se)n=x(o);else if(t=Oe(n={},v(o)))throw TypeError(t);if(t=Oe(a,s,null,n))throw TypeError(t);var l=a.searchParams=new w,c=k(l);c.updateSearchParams(a.query),c.updateURL=function(){a.query=String(l)||null},i||(r.href=Pe.call(r),r.origin=Le.call(r),r.protocol=Ee.call(r),r.username=Ae.call(r),r.password=Me.call(r),r.host=Te.call(r),r.hostname=Ie.call(r),r.port=Ue.call(r),r.pathname=Be.call(r),r.search=Re.call(r),r.searchParams=ze.call(r),r.hash=Fe.call(r))},Ce=Se.prototype,Pe=function(){var e=x(this),n=e.scheme,t=e.username,r=e.password,o=e.host,i=e.port,s=e.path,a=e.query,l=e.fragment,c=n+":";return null!==o?(c+="//",Z(e)&&(c+=t+(r?":"+r:"")+"@"),c+=W(o),null!==i&&(c+=":"+i)):"file"==n&&(c+="//"),c+=e.cannotBeABaseURL?s[0]:s.length?"/"+s.join("/"):"",null!==a&&(c+="?"+a),null!==l&&(c+="#"+l),c},Le=function(){var e=x(this),n=e.scheme,t=e.port;if("blob"==n)try{return new Se(n.path[0]).origin}catch(e){return"null"}return"file"!=n&&K(e)?n+"://"+W(e.host)+(null!==t?":"+t:""):"null"},Ee=function(){return x(this).scheme+":"},Ae=function(){return x(this).username},Me=function(){return x(this).password},Te=function(){var e=x(this),n=e.host,t=e.port;return null===n?"":null===t?W(n):W(n)+":"+t},Ie=function(){var e=x(this).host;return null===e?"":W(e)},Ue=function(){var e=x(this).port;return null===e?"":String(e)},Be=function(){var e=x(this),n=e.path;return e.cannotBeABaseURL?n[0]:n.length?"/"+n.join("/"):""},Re=function(){var e=x(this).query;return e?"?"+e:""},ze=function(){return x(this).searchParams},Fe=function(){var e=x(this).fragment;return e?"#"+e:""},He=function(e,n){return{get:e,set:n,configurable:!0,enumerable:!0}};if(i&&l(Ce,{href:He(Pe,(function(e){var n=x(this),t=v(e),r=Oe(n,t);if(r)throw TypeError(r);k(n.searchParams).updateSearchParams(n.query)})),origin:He(Le),protocol:He(Ee,(function(e){var n=x(this);Oe(n,v(e)+":",oe)})),username:He(Ae,(function(e){var n=x(this),t=d(v(e));if(!Q(n)){n.username="";for(var r=0;r<t.length;r++)n.username+=$(t[r],Y)}})),password:He(Me,(function(e){var n=x(this),t=d(v(e));if(!Q(n)){n.password="";for(var r=0;r<t.length;r++)n.password+=$(t[r],Y)}})),host:He(Te,(function(e){var n=x(this);n.cannotBeABaseURL||Oe(n,v(e),he)})),hostname:He(Ie,(function(e){var n=x(this);n.cannotBeABaseURL||Oe(n,v(e),ye)})),port:He(Ue,(function(e){var n=x(this);Q(n)||(""==(e=v(e))?n.port=null:Oe(n,e,ve))})),pathname:He(Be,(function(e){var n=x(this);n.cannotBeABaseURL||(n.path=[],Oe(n,v(e),ge))})),search:He(Re,(function(e){var n=x(this);""==(e=v(e))?n.query=null:("?"==e.charAt(0)&&(e=e.slice(1)),n.query="",Oe(n,e,je)),k(n.searchParams).updateSearchParams(n.query)})),searchParams:He(ze),hash:He(Fe,(function(e){var n=x(this);""!=(e=v(e))?("#"==e.charAt(0)&&(e=e.slice(1)),n.fragment="",Oe(n,e,xe)):n.fragment=null}))}),c(Ce,"toJSON",(function(){return Pe.call(this)}),{enumerable:!0}),c(Ce,"toString",(function(){return Pe.call(this)}),{enumerable:!0}),g){var De=g.createObjectURL,qe=g.revokeObjectURL;De&&c(Se,"createObjectURL",(function(e){return De.apply(g,arguments)})),qe&&c(Se,"revokeObjectURL",(function(e){return qe.apply(g,arguments)}))}_(Se,"URL"),o({global:!0,forced:!s,sham:!i},{URL:Se})},{"../internals/an-instance":5,"../internals/array-from":7,"../internals/descriptors":19,"../internals/export":26,"../internals/global":34,"../internals/has-own-property":35,"../internals/internal-state":41,"../internals/native-url":54,"../internals/object-assign":56,"../internals/object-define-properties":58,"../internals/redefine":71,"../internals/set-to-string-tag":74,"../internals/string-multibyte":78,"../internals/string-punycode-to-ascii":79,"../internals/to-string":88,"../modules/es.string.iterator":94,"../modules/web.url-search-params":96}],98:[function(e,n,t){var r,o,i;r=function(e,n,t,o){var i;n[0]=0;for(var s=1;s<n.length;s++){var a=n[s++],l=n[s]?(n[0]|=a?1:2,t[n[s++]]):n[++s];3===a?o[0]=l:4===a?o[1]=Object.assign(o[1]||{},l):5===a?(o[1]=o[1]||{})[n[++s]]=l:6===a?o[1][n[++s]]+=l+"":a?(i=e.apply(l,r(e,l,t,["",null])),o.push(i),l[0]?n[0]|=2:(n[s-2]=0,n[s]=i)):o.push(l)}return o},o=new Map,i=function(e){var n=o.get(this);return n||(n=new Map,o.set(this,n)),(n=r(this,n.get(e)||(n.set(e,n=function(e){for(var n,t,r=1,o="",i="",s=[0],a=function(e){1===r&&(e||(o=o.replace(/^\s*\n\s*|\s*\n\s*$/g,"")))?s.push(0,e,o):3===r&&(e||o)?(s.push(3,e,o),r=2):2===r&&"..."===o&&e?s.push(4,e,0):2===r&&o&&!e?s.push(5,0,!0,o):r>=5&&((o||!e&&5===r)&&(s.push(r,0,o,t),r=6),e&&(s.push(r,e,0,t),r=6)),o=""},l=0;l<e.length;l++){l&&(1===r&&a(),a(l));for(var c=0;c<e[l].length;c++)n=e[l][c],1===r?"<"===n?(a(),s=[s],r=3):o+=n:4===r?"--"===o&&">"===n?(r=1,o=""):o=n+o[0]:i?n===i?i="":o+=n:'"'===n||"'"===n?i=n:">"===n?(a(),r=1):r&&("="===n?(r=5,t=o,o=""):"/"===n&&(r<5||">"===e[l][c+1])?(a(),3===r&&(s=s[0]),r=s,(s=s[0]).push(2,0,r),r=0):" "===n||"\t"===n||"\n"===n||"\r"===n?(a(),r=2):o+=n),3===r&&"!--"===o&&(r=4,s=s[0])}return a(),s}(e)),n),arguments,[])).length>1?n:n[0]},void 0!==n?n.exports=i:self.htm=i},{}],99:[function(e,n,t){var r=e("preact");e("preact/devtools");var o={};function i(e){return e.type===r.Fragment?"Fragment":"function"==typeof e.type?e.type.displayName||e.type.name:"string"==typeof e.type?e.type:"#text"}var s=[],a=[];function l(){return s.length>0?s[s.length-1]:null}var c=!1;function u(e){return"function"==typeof e.type&&e.type!=r.Fragment}function f(e){for(var n=[e],t=e;null!=t.__o;)n.push(t.__o),t=t.__o;return n.reduce((function(e,n){e+="  in "+i(n);var t=n.__source;return t?e+=" (at "+t.fileName+":"+t.lineNumber+")":c||(c=!0,console.warn("Add @babel/plugin-transform-react-jsx-source to get a more detailed component stack. Note that you should not add it to production builds of your App for bundle size reasons.")),e+"\n"}),"")}var p="function"==typeof WeakMap,d=r.Component.prototype.setState;r.Component.prototype.setState=function(e,n){return null==this.__v?null==this.state&&console.warn('Calling "this.setState" inside the constructor of a component is a no-op and might be a bug in your application. Instead, set "this.state = {}" directly.\n\n'+f(l())):null==this.__P&&console.warn('Can\'t call "this.setState" on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.\n\n'+f(this.__v)),d.call(this,e,n)};var h=r.Component.prototype.forceUpdate;function y(e){var n=e.props,t=i(e),r="";for(var o in n)if(n.hasOwnProperty(o)&&"children"!==o){var s=n[o];"function"==typeof s&&(s="function "+(s.displayName||s.name)+"() {}"),s=Object(s)!==s||s.toString?s+"":Object.prototype.toString.call(s),r+=" "+o+"="+JSON.stringify(s)}var a=n.children;return"<"+t+r+(a&&a.length?">..</"+t+">":" />")}r.Component.prototype.forceUpdate=function(e){return null==this.__v?console.warn('Calling "this.forceUpdate" inside the constructor of a component is a no-op and might be a bug in your application.\n\n'+f(l())):null==this.__P&&console.warn('Can\'t call "this.forceUpdate" on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.\n\n'+f(this.__v)),h.call(this,e)},function(){!function(){var e=r.options.__b,n=r.options.diffed,t=r.options.__,o=r.options.vnode,i=r.options.__r;r.options.diffed=function(e){u(e)&&a.pop(),s.pop(),n&&n(e)},r.options.__b=function(n){u(n)&&s.push(n),e&&e(n)},r.options.__=function(e,n){a=[],t&&t(e,n)},r.options.vnode=function(e){e.__o=a.length>0?a[a.length-1]:null,o&&o(e)},r.options.__r=function(e){u(e)&&a.push(e),i&&i(e)}}();var e=!1,n=r.options.__b,t=r.options.diffed,l=r.options.vnode,c=r.options.__e,d=r.options.__,h=r.options.__h,v=p?{useEffect:new WeakMap,useLayoutEffect:new WeakMap,lazyPropTypes:new WeakMap}:null,_=[];r.options.__e=function(e,n,t){if(n&&n.__c&&"function"==typeof e.then){var r=e;e=new Error("Missing Suspense. The throwing component was: "+i(n));for(var o=n;o;o=o.__)if(o.__c&&o.__c.__c){e=r;break}if(e instanceof Error)throw e}try{c(e,n,t),"function"!=typeof e.then&&setTimeout((function(){throw e}))}catch(e){throw e}},r.options.__=function(e,n){if(!n)throw new Error("Undefined parent passed to render(), this is the second argument.\nCheck if the element is available in the DOM/has the correct id.");var t;switch(n.nodeType){case 1:case 11:case 9:t=!0;break;default:t=!1}if(!t){var r=i(e);throw new Error("Expected a valid HTML node as a second argument to render.\tReceived "+n+" instead: render(<"+r+" />, "+n+");")}d&&d(e,n)},r.options.__b=function(t){var r=t.type,s=function e(n){return n?"function"==typeof n.type?e(n.__):n:{}}(t.__);if(e=!0,void 0===r)throw new Error("Undefined component passed to createElement()\n\nYou likely forgot to export your component or might have mixed up default and named imports"+y(t)+"\n\n"+f(t));if(null!=r&&"object"==typeof r){if(void 0!==r.__k&&void 0!==r.__e)throw new Error("Invalid type passed to createElement(): "+r+"\n\nDid you accidentally pass a JSX literal as JSX twice?\n\n  let My"+i(t)+" = "+y(r)+";\n  let vnode = <My"+i(t)+" />;\n\nThis usually happens when you export a JSX literal and not the component.\n\n"+f(t));throw new Error("Invalid type passed to createElement(): "+(Array.isArray(r)?"array":r))}if("thead"!==r&&"tfoot"!==r&&"tbody"!==r||"table"===s.type?"tr"===r&&"thead"!==s.type&&"tfoot"!==s.type&&"tbody"!==s.type&&"table"!==s.type?console.error("Improper nesting of table. Your <tr> should have a <thead/tbody/tfoot/table> parent."+y(t)+"\n\n"+f(t)):"td"===r&&"tr"!==s.type?console.error("Improper nesting of table. Your <td> should have a <tr> parent."+y(t)+"\n\n"+f(t)):"th"===r&&"tr"!==s.type&&console.error("Improper nesting of table. Your <th> should have a <tr>."+y(t)+"\n\n"+f(t)):console.error("Improper nesting of table. Your <thead/tbody/tfoot> should have a <table> parent."+y(t)+"\n\n"+f(t)),void 0!==t.ref&&"function"!=typeof t.ref&&"object"!=typeof t.ref&&!("$$typeof"in t))throw new Error('Component\'s "ref" property should be a function, or an object created by createRef(), but got ['+typeof t.ref+"] instead\n"+y(t)+"\n\n"+f(t));if("string"==typeof t.type)for(var a in t.props)if("o"===a[0]&&"n"===a[1]&&"function"!=typeof t.props[a]&&null!=t.props[a])throw new Error("Component's \""+a+'" property should be a function, but got ['+typeof t.props[a]+"] instead\n"+y(t)+"\n\n"+f(t));if("function"==typeof t.type&&t.type.propTypes){if("Lazy"===t.type.displayName&&v&&!v.lazyPropTypes.has(t.type)){var l="PropTypes are not supported on lazy(). Use propTypes on the wrapped component itself. ";try{var c=t.type();v.lazyPropTypes.set(t.type,!0),console.warn(l+"Component wrapped in lazy() is "+i(c))}catch(t){console.warn(l+"We will log the wrapped component's name once it is loaded.")}}var u=t.props;t.type.__f&&delete(u=function(e,n){for(var t in n)e[t]=n[t];return e}({},u)).ref,function(e,n,t,r,i){Object.keys(e).forEach((function(t){var s;try{s=e[t](n,t,r,"prop",null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(e){s=e}!s||s.message in o||(o[s.message]=!0,console.error("Failed prop type: "+s.message+(i&&"\n"+i()||"")))}))}(t.type.propTypes,u,0,i(t),(function(){return f(t)}))}n&&n(t)},r.options.__h=function(n,t,r){if(!n||!e)throw new Error("Hook can only be invoked from render methods.");h&&h(n,t,r)};var b=function(e,n){return{get:function(){var t="get"+e+n;_&&_.indexOf(t)<0&&(_.push(t),console.warn("getting vnode."+e+" is deprecated, "+n))},set:function(){var t="set"+e+n;_&&_.indexOf(t)<0&&(_.push(t),console.warn("setting vnode."+e+" is not allowed, "+n))}}},m={nodeName:b("nodeName","use vnode.type"),attributes:b("attributes","use vnode.props"),children:b("children","use vnode.props.children")},g=Object.create({},m);r.options.vnode=function(e){var n=e.props;if(null!==e.type&&null!=n&&("__source"in n||"__self"in n)){var t=e.props={};for(var r in n){var o=n[r];"__source"===r?e.__source=o:"__self"===r?e.__self=o:t[r]=o}}e.__proto__=g,l&&l(e)},r.options.diffed=function(n){if(n.__k&&n.__k.forEach((function(e){if(e&&void 0===e.type){delete e.__,delete e.__b;var t=Object.keys(e).join(",");throw new Error("Objects are not valid as a child. Encountered an object with the keys {"+t+"}.\n\n"+f(n))}})),e=!1,t&&t(n),null!=n.__k)for(var r=[],o=0;o<n.__k.length;o++){var i=n.__k[o];if(i&&null!=i.key){var s=i.key;if(-1!==r.indexOf(s)){console.error('Following component has two or more children with the same key attribute: "'+s+'". This may cause glitches and misbehavior in rendering process. Component: \n\n'+y(n)+"\n\n"+f(n));break}r.push(s)}}}}(),t.resetPropWarnings=function(){o={}}},{preact:101,"preact/devtools":100}],100:[function(e,n,t){var r=e("preact");"undefined"!=typeof window&&window.__PREACT_DEVTOOLS__&&window.__PREACT_DEVTOOLS__.attachPreact("10.5.15",r.options,{Fragment:r.Fragment,Component:r.Component}),t.addHookName=function(e,n){return r.options.__a&&r.options.__a(n),e}},{preact:101}],101:[function(e,n,t){var r,o,i,s,a,l,c,u,f={},p=[],d=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function h(e,n){for(var t in n)e[t]=n[t];return e}function y(e){var n=e.parentNode;n&&n.removeChild(e)}function v(e,n,t){var o,i,s,a={};for(s in n)"key"==s?o=n[s]:"ref"==s?i=n[s]:a[s]=n[s];if(arguments.length>2&&(a.children=arguments.length>3?r.call(arguments,2):t),"function"==typeof e&&null!=e.defaultProps)for(s in e.defaultProps)void 0===a[s]&&(a[s]=e.defaultProps[s]);return _(e,a,o,i,null)}function _(e,n,t,r,s){var a={type:e,props:n,key:t,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++i:s};return null==s&&null!=o.vnode&&o.vnode(a),a}function b(e){return e.children}function m(e,n){this.props=e,this.context=n}function g(e,n){if(null==n)return e.__?g(e.__,e.__.__k.indexOf(e)+1):null;for(var t;n<e.__k.length;n++)if(null!=(t=e.__k[n])&&null!=t.__e)return t.__e;return"function"==typeof e.type?g(e):null}function w(e){var n,t;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,n=0;n<e.__k.length;n++)if(null!=(t=e.__k[n])&&null!=t.__e){e.__e=e.__c.base=t.__e;break}return w(e)}}function k(e){(!e.__d&&(e.__d=!0)&&a.push(e)&&!j.__r++||c!==o.debounceRendering)&&((c=o.debounceRendering)||l)(j)}function j(){for(var e;j.__r=a.length;)e=a.sort((function(e,n){return e.__v.__b-n.__v.__b})),a=[],e.some((function(e){var n,t,r,o,i,s;e.__d&&(i=(o=(n=e).__v).__e,(s=n.__P)&&(t=[],(r=h({},o)).__v=o.__v+1,A(s,o,r,n.__n,void 0!==s.ownerSVGElement,null!=o.__h?[i]:null,t,null==i?g(o):i,o.__h),M(t,o),o.__e!=i&&w(o)))}))}function x(e,n,t,r,o,i,s,a,l,c){var u,d,h,y,v,m,w,k=r&&r.__k||p,j=k.length;for(t.__k=[],u=0;u<n.length;u++)if(null!=(y=t.__k[u]=null==(y=n[u])||"boolean"==typeof y?null:"string"==typeof y||"number"==typeof y||"bigint"==typeof y?_(null,y,null,null,y):Array.isArray(y)?_(b,{children:y},null,null,null):y.__b>0?_(y.type,y.props,y.key,null,y.__v):y)){if(y.__=t,y.__b=t.__b+1,null===(h=k[u])||h&&y.key==h.key&&y.type===h.type)k[u]=void 0;else for(d=0;d<j;d++){if((h=k[d])&&y.key==h.key&&y.type===h.type){k[d]=void 0;break}h=null}A(e,y,h=h||f,o,i,s,a,l,c),v=y.__e,(d=y.ref)&&h.ref!=d&&(w||(w=[]),h.ref&&w.push(h.ref,null,y),w.push(d,y.__c||v,y)),null!=v?(null==m&&(m=v),"function"==typeof y.type&&y.__k===h.__k?y.__d=l=O(y,l,e):l=S(e,y,h,k,v,l),"function"==typeof t.type&&(t.__d=l)):l&&h.__e==l&&l.parentNode!=e&&(l=g(h))}for(t.__e=m,u=j;u--;)null!=k[u]&&("function"==typeof t.type&&null!=k[u].__e&&k[u].__e==t.__d&&(t.__d=g(r,u+1)),U(k[u],k[u]));if(w)for(u=0;u<w.length;u++)I(w[u],w[++u],w[++u])}function O(e,n,t){for(var r,o=e.__k,i=0;o&&i<o.length;i++)(r=o[i])&&(r.__=e,n="function"==typeof r.type?O(r,n,t):S(t,r,r,o,r.__e,n));return n}function S(e,n,t,r,o,i){var s,a,l;if(void 0!==n.__d)s=n.__d,n.__d=void 0;else if(null==t||o!=i||null==o.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(o),s=null;else{for(a=i,l=0;(a=a.nextSibling)&&l<r.length;l+=2)if(a==o)break e;e.insertBefore(o,i),s=i}return void 0!==s?s:o.nextSibling}function C(e,n,t){"-"===n[0]?e.setProperty(n,t):e[n]=null==t?"":"number"!=typeof t||d.test(n)?t:t+"px"}function P(e,n,t,r,o){var i;e:if("style"===n)if("string"==typeof t)e.style.cssText=t;else{if("string"==typeof r&&(e.style.cssText=r=""),r)for(n in r)t&&n in t||C(e.style,n,"");if(t)for(n in t)r&&t[n]===r[n]||C(e.style,n,t[n])}else if("o"===n[0]&&"n"===n[1])i=n!==(n=n.replace(/Capture$/,"")),n=n.toLowerCase()in e?n.toLowerCase().slice(2):n.slice(2),e.l||(e.l={}),e.l[n+i]=t,t?r||e.addEventListener(n,i?E:L,i):e.removeEventListener(n,i?E:L,i);else if("dangerouslySetInnerHTML"!==n){if(o)n=n.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==n&&"list"!==n&&"form"!==n&&"tabIndex"!==n&&"download"!==n&&n in e)try{e[n]=null==t?"":t;break e}catch(e){}"function"==typeof t||(null!=t&&(!1!==t||"a"===n[0]&&"r"===n[1])?e.setAttribute(n,t):e.removeAttribute(n))}}function L(e){this.l[e.type+!1](o.event?o.event(e):e)}function E(e){this.l[e.type+!0](o.event?o.event(e):e)}function A(e,n,t,r,i,s,a,l,c){var u,f,p,d,y,v,_,g,w,k,j,O=n.type;if(void 0!==n.constructor)return null;null!=t.__h&&(c=t.__h,l=n.__e=t.__e,n.__h=null,s=[l]),(u=o.__b)&&u(n);try{e:if("function"==typeof O){if(g=n.props,w=(u=O.contextType)&&r[u.__c],k=u?w?w.props.value:u.__:r,t.__c?_=(f=n.__c=t.__c).__=f.__E:("prototype"in O&&O.prototype.render?n.__c=f=new O(g,k):(n.__c=f=new m(g,k),f.constructor=O,f.render=B),w&&w.sub(f),f.props=g,f.state||(f.state={}),f.context=k,f.__n=r,p=f.__d=!0,f.__h=[]),null==f.__s&&(f.__s=f.state),null!=O.getDerivedStateFromProps&&(f.__s==f.state&&(f.__s=h({},f.__s)),h(f.__s,O.getDerivedStateFromProps(g,f.__s))),d=f.props,y=f.state,p)null==O.getDerivedStateFromProps&&null!=f.componentWillMount&&f.componentWillMount(),null!=f.componentDidMount&&f.__h.push(f.componentDidMount);else{if(null==O.getDerivedStateFromProps&&g!==d&&null!=f.componentWillReceiveProps&&f.componentWillReceiveProps(g,k),!f.__e&&null!=f.shouldComponentUpdate&&!1===f.shouldComponentUpdate(g,f.__s,k)||n.__v===t.__v){f.props=g,f.state=f.__s,n.__v!==t.__v&&(f.__d=!1),f.__v=n,n.__e=t.__e,n.__k=t.__k,n.__k.forEach((function(e){e&&(e.__=n)})),f.__h.length&&a.push(f);break e}null!=f.componentWillUpdate&&f.componentWillUpdate(g,f.__s,k),null!=f.componentDidUpdate&&f.__h.push((function(){f.componentDidUpdate(d,y,v)}))}f.context=k,f.props=g,f.state=f.__s,(u=o.__r)&&u(n),f.__d=!1,f.__v=n,f.__P=e,u=f.render(f.props,f.state,f.context),f.state=f.__s,null!=f.getChildContext&&(r=h(h({},r),f.getChildContext())),p||null==f.getSnapshotBeforeUpdate||(v=f.getSnapshotBeforeUpdate(d,y)),j=null!=u&&u.type===b&&null==u.key?u.props.children:u,x(e,Array.isArray(j)?j:[j],n,t,r,i,s,a,l,c),f.base=n.__e,n.__h=null,f.__h.length&&a.push(f),_&&(f.__E=f.__=null),f.__e=!1}else null==s&&n.__v===t.__v?(n.__k=t.__k,n.__e=t.__e):n.__e=T(t.__e,n,t,r,i,s,a,c);(u=o.diffed)&&u(n)}catch(e){n.__v=null,(c||null!=s)&&(n.__e=l,n.__h=!!c,s[s.indexOf(l)]=null),o.__e(e,n,t)}}function M(e,n){o.__c&&o.__c(n,e),e.some((function(n){try{e=n.__h,n.__h=[],e.some((function(e){e.call(n)}))}catch(e){o.__e(e,n.__v)}}))}function T(e,n,t,o,i,s,a,l){var c,u,p,d=t.props,h=n.props,v=n.type,_=0;if("svg"===v&&(i=!0),null!=s)for(;_<s.length;_++)if((c=s[_])&&(c===e||(v?c.localName==v:3==c.nodeType))){e=c,s[_]=null;break}if(null==e){if(null===v)return document.createTextNode(h);e=i?document.createElementNS("http://www.w3.org/2000/svg",v):document.createElement(v,h.is&&h),s=null,l=!1}if(null===v)d===h||l&&e.data===h||(e.data=h);else{if(s=s&&r.call(e.childNodes),u=(d=t.props||f).dangerouslySetInnerHTML,p=h.dangerouslySetInnerHTML,!l){if(null!=s)for(d={},_=0;_<e.attributes.length;_++)d[e.attributes[_].name]=e.attributes[_].value;(p||u)&&(p&&(u&&p.__html==u.__html||p.__html===e.innerHTML)||(e.innerHTML=p&&p.__html||""))}if(function(e,n,t,r,o){var i;for(i in t)"children"===i||"key"===i||i in n||P(e,i,null,t[i],r);for(i in n)o&&"function"!=typeof n[i]||"children"===i||"key"===i||"value"===i||"checked"===i||t[i]===n[i]||P(e,i,n[i],t[i],r)}(e,h,d,i,l),p)n.__k=[];else if(_=n.props.children,x(e,Array.isArray(_)?_:[_],n,t,o,i&&"foreignObject"!==v,s,a,s?s[0]:t.__k&&g(t,0),l),null!=s)for(_=s.length;_--;)null!=s[_]&&y(s[_]);l||("value"in h&&void 0!==(_=h.value)&&(_!==e.value||"progress"===v&&!_)&&P(e,"value",_,d.value,!1),"checked"in h&&void 0!==(_=h.checked)&&_!==e.checked&&P(e,"checked",_,d.checked,!1))}return e}function I(e,n,t){try{"function"==typeof e?e(n):e.current=n}catch(e){o.__e(e,t)}}function U(e,n,t){var r,i;if(o.unmount&&o.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||I(r,null,n)),null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){o.__e(e,n)}r.base=r.__P=null}if(r=e.__k)for(i=0;i<r.length;i++)r[i]&&U(r[i],n,"function"!=typeof e.type);t||null==e.__e||y(e.__e),e.__e=e.__d=void 0}function B(e,n,t){return this.constructor(e,t)}function R(e,n,t){var i,s,a;o.__&&o.__(e,n),s=(i="function"==typeof t)?null:t&&t.__k||n.__k,a=[],A(n,e=(!i&&t||n).__k=v(b,null,[e]),s||f,f,void 0!==n.ownerSVGElement,!i&&t?[t]:s?null:n.firstChild?r.call(n.childNodes):null,a,!i&&t?t:s?s.__e:n.firstChild,i),M(a,e)}r=p.slice,o={__e:function(e,n){for(var t,r,o;n=n.__;)if((t=n.__c)&&!t.__)try{if((r=t.constructor)&&null!=r.getDerivedStateFromError&&(t.setState(r.getDerivedStateFromError(e)),o=t.__d),null!=t.componentDidCatch&&(t.componentDidCatch(e),o=t.__d),o)return t.__E=t}catch(n){e=n}throw e}},i=0,s=function(e){return null!=e&&void 0===e.constructor},m.prototype.setState=function(e,n){var t;t=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=h({},this.state),"function"==typeof e&&(e=e(h({},t),this.props)),e&&h(t,e),null!=e&&this.__v&&(n&&this.__h.push(n),k(this))},m.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),k(this))},m.prototype.render=b,a=[],l="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,j.__r=0,u=0,t.render=R,t.hydrate=function e(n,t){R(n,t,e)},t.createElement=v,t.h=v,t.Fragment=b,t.createRef=function(){return{current:null}},t.isValidElement=s,t.Component=m,t.cloneElement=function(e,n,t){var o,i,s,a=h({},e.props);for(s in n)"key"==s?o=n[s]:"ref"==s?i=n[s]:a[s]=n[s];return arguments.length>2&&(a.children=arguments.length>3?r.call(arguments,2):t),_(e.type,a,o||e.key,i||e.ref,null)},t.createContext=function(e,n){var t={__c:n="__cC"+u++,__:e,Consumer:function(e,n){return e.children(n)},Provider:function(e){var t,r;return this.getChildContext||(t=[],(r={})[n]=this,this.getChildContext=function(){return r},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&t.some(k)},this.sub=function(e){t.push(e);var n=e.componentWillUnmount;e.componentWillUnmount=function(){t.splice(t.indexOf(e),1),n&&n.call(e)}}),e.children}};return t.Provider.__=t.Consumer.contextType=t},t.toChildArray=function e(n,t){return t=t||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some((function(n){e(n,t)})):t.push(n)),t},t.options=o},{}],102:[function(e,n,t){var r,o,i,s=e("preact"),a=0,l=[],c=s.options.__b,u=s.options.__r,f=s.options.diffed,p=s.options.__c,d=s.options.unmount;function h(e,n){s.options.__h&&s.options.__h(o,e,a||n),a=0;var t=o.__H||(o.__H={__:[],__h:[]});return e>=t.__.length&&t.__.push({}),t.__[e]}function y(e){return a=1,v(x,e)}function v(e,n,t){var i=h(r++,2);return i.t=e,i.__c||(i.__=[t?t(n):x(void 0,n),function(e){var n=i.t(i.__[0],e);i.__[0]!==n&&(i.__=[n,i.__[1]],i.__c.setState({}))}],i.__c=o),i.__}function _(e,n){var t=h(r++,4);!s.options.__s&&j(t.__H,n)&&(t.__=e,t.__H=n,o.__h.push(t))}function b(e,n){var t=h(r++,7);return j(t.__H,n)&&(t.__=e(),t.__H=n,t.__h=e),t.__}function m(){l.forEach((function(e){if(e.__P)try{e.__H.__h.forEach(w),e.__H.__h.forEach(k),e.__H.__h=[]}catch(n){e.__H.__h=[],s.options.__e(n,e.__v)}})),l=[]}s.options.__b=function(e){o=null,c&&c(e)},s.options.__r=function(e){u&&u(e),r=0;var n=(o=e.__c).__H;n&&(n.__h.forEach(w),n.__h.forEach(k),n.__h=[])},s.options.diffed=function(e){f&&f(e);var n=e.__c;n&&n.__H&&n.__H.__h.length&&(1!==l.push(n)&&i===s.options.requestAnimationFrame||((i=s.options.requestAnimationFrame)||function(e){var n,t=function(){clearTimeout(r),g&&cancelAnimationFrame(n),setTimeout(e)},r=setTimeout(t,100);g&&(n=requestAnimationFrame(t))})(m)),o=null},s.options.__c=function(e,n){n.some((function(e){try{e.__h.forEach(w),e.__h=e.__h.filter((function(e){return!e.__||k(e)}))}catch(t){n.some((function(e){e.__h&&(e.__h=[])})),n=[],s.options.__e(t,e.__v)}})),p&&p(e,n)},s.options.unmount=function(e){d&&d(e);var n=e.__c;if(n&&n.__H)try{n.__H.__.forEach(w)}catch(e){s.options.__e(e,n.__v)}};var g="function"==typeof requestAnimationFrame;function w(e){var n=o;"function"==typeof e.__c&&e.__c(),o=n}function k(e){var n=o;e.__c=e.__(),o=n}function j(e,n){return!e||e.length!==n.length||n.some((function(n,t){return n!==e[t]}))}function x(e,n){return"function"==typeof n?n(e):n}t.useState=y,t.useReducer=v,t.useEffect=function(e,n){var t=h(r++,3);!s.options.__s&&j(t.__H,n)&&(t.__=e,t.__H=n,o.__H.__h.push(t))},t.useLayoutEffect=_,t.useRef=function(e){return a=5,b((function(){return{current:e}}),[])},t.useImperativeHandle=function(e,n,t){a=6,_((function(){"function"==typeof e?e(n()):e&&(e.current=n())}),null==t?t:t.concat(e))},t.useMemo=b,t.useCallback=function(e,n){return a=8,b((function(){return e}),n)},t.useContext=function(e){var n=o.context[e.__c],t=h(r++,9);return t.c=e,n?(null==t.__&&(t.__=!0,n.sub(o)),n.props.value):e.__},t.useDebugValue=function(e,n){s.options.useDebugValue&&s.options.useDebugValue(n?n(e):e)},t.useErrorBoundary=function(e){var n=h(r++,10),t=y();return n.__=e,o.componentDidCatch||(o.componentDidCatch=function(e){n.__&&n.__(e),t[1](e)}),[t[0],function(){t[1](void 0)}]}},{preact:101}],103:[function(e,n,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPersonalBundleUrl=t.getPersonalBundleKey=t.uploadsS3Bucket=void 0,t.uploadsS3Bucket="doszone-uploads";function r(e,n,t){const r=t.lastIndexOf("/"),o=t.substr(r+1);return"doszone"===e?"personal/"+n+"/"+o:"personal-v2/"+e+"/"+n+"/"+o}t.getPersonalBundleKey=r,t.getPersonalBundleUrl=function(e,n,t){return"https://doszone-uploads.s3.dualstack.eu-central-1.amazonaws.com/"+r(e,n,t)}},{}],104:[function(e,n,t){"use strict";var r,o;function i(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}Object.defineProperty(t,"__esModule",{value:!0}),t.ActionBar=void 0;const s=e("../dom"),a=e("../icons"),l=e("./controls");function c(e){let n="text-gray-600";return void 0!==e.requestClientId&&null===e.clientId?n="text-red-800 animate-pulse":e.sideBar&&(n="text-green-400"),(0,s.html)(o||(o=i(['\n    <div class="h-6 w-6 my-4 ',' cursor-pointer" onClick=',">\n        <",' class="h-6 w-6" />\n    </div>\n    '])),n,(function(){e.sideBar?e.closeSideBar():e.openSideBar()}),a.Icons.DotsHorizontal)}t.ActionBar=function(e){return e.actionBar?(0,s.html)(r||(r=i(['\n    <div class="bg-gray-200 shadow w-10 h-full overflow-hidden flex flex-col items-center">\n        <'," ..."," />\n        <",' column="true" class="flex-grow border-t-2 border-gray-400" ...'," />\n    </div>\n    "])),c,e,l.Controls,e):null}},{"../dom":110,"../icons":112,"./controls":108}],105:[function(e,n,t){"use strict";var r;e("core-js/modules/web.dom-collections.iterator.js"),Object.defineProperty(t,"__esModule",{value:!0}),t.ActionExit=void 0;const o=e("preact/hooks"),i=e("../dom"),s=e("../icons");t.ActionExit=function(e){const[n,t]=(0,o.useState)(!1),[a,l]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{if(!a)return window.addEventListener("beforeunload",n),()=>{window.removeEventListener("beforeunload",n)};function n(n){if(void 0===e.player().ciPromise)return;const r="Please use close button to save progress!";setTimeout((()=>{e.player().layers.notyf.error(r),t(!0)}),16),n.preventDefault(),n.returnValue=r}}),[t,e.player,a]),a?null:(0,i.html)(r||(c=['\n    <div class="filter transition-opacity duration-1000 absolute z-50 \n                                    bg-gray-200 opacity-80 '," w-6 h-6 top-0\n        ",' rounded-br-md cursor-pointer" onClick=','>\n        <div class="h-4 w-4 mt-1 ml-1">\n            <',' class="h-4 w-4" />\n        </div>\n    </div>\n    '],u||(u=c.slice(0)),r=Object.freeze(Object.defineProperties(c,{raw:{value:Object.freeze(u)}}))),n?" text-red-500 animate-pulse":"",e.actionBar?"left-10":"left-0",(async function(){t(!1),l(!0);const n=e.player();n.layers.notyf.success("Saving, please wait...");try{await n.layers.save()}catch(e){return void l(!1)}try{await n.stop()}catch(e){console.error(e)}const r=e.options().onExit;void 0!==r&&r(),l(!1)}),s.Icons.XCircle);var c,u}},{"../dom":110,"../icons":112,"core-js/modules/web.dom-collections.iterator.js":95,"preact/hooks":102}],106:[function(e,n,t){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.ActionHide=void 0;const o=e("../dom"),i=e("../icons");t.ActionHide=function(e){return(0,o.html)(r||(n=['\n    <div class="filter transition-opacity duration-1000 absolute z-50 \n                        bg-gray-200 ',"\n                        w-5 h-12 top-1/2 -mt-6 ",'\n                        rounded-r-md cursor-pointer" onClick=','>\n        <div class="h-4 w-4 my-4">\n            <',' class="h-4 w-4" />\n        </div>\n    </div>\n    '],t||(t=n.slice(0)),r=Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(t)}}))),e.actionBar?"":"opacity-80",e.actionBar?"left-10":"left-0",(()=>e.setActionBar(!e.actionBar)),e.actionBar?i.Icons.ChevronLeft:i.Icons.ChevronRight);var n,t}},{"../dom":110,"../icons":112}],107:[function(e,n,t){"use strict";var r,o;function i(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}e("core-js/modules/web.dom-collections.iterator.js"),Object.defineProperty(t,"__esModule",{value:!0}),t.Client=void 0;const s=e("preact/hooks"),a=e("../dom"),l=e("../icons"),c=e("../dom");t.Client=function(e){const[n,t]=(0,s.useState)(!1);if(void 0===e.requestClientId&&null===e.clientId)return null;if(null===e.clientId){const o=()=>{void 0!==e.requestClientId&&(t(!0),e.requestClientId(!0).then((n=>{t(!1),e.setClientId(n)})).catch((e=>{t(!1),console.error(e)})))};return(0,a.html)(r||(r=i(['\n            <div class="flex flex-row justify-center items-center ','">\n                <div class="h-6 w-6 text-red-800 animate-pulse mr-2">\n                    <',' class="h-6 w-6" />\n                </div>\n                <div class="border-2 rounded px-4\n                    ',' \n                    cursor-pointer" onClick=',">\n                    Login\n                </div>\n            </div>\n        "])),e.class,l.Icons.UserCircle,n?" text-gray-400 border-gray-400":"text-blue-400 border-blue-400",o)}const u=e.clientId.id;return(0,a.html)(o||(o=i(['\n        <div class="flex flex-row justify-center ','">\n            <div class="h-6 w-6 text-green-400 mr-2">\n                <',' class="h-6 w-6" />\n            </div>\n            <div class="flex-shrink overflow-hidden overflow-ellipsis">','</div>\n            <div class="h-6 w-6 ml-2 cursor-pointer" onClick=',">\n                <",' class="h-6 w-6" />\n            </div>\n        </div>\n    '])),e.class,l.Icons.UserCircle,u,(async function(){e.closeSideBar();const n=e.player();try{await async function(e){if(!e.ciPromise)return;const n=await e.ciPromise,t=await n.persist();(0,c.downloadFile)(t,"saves.zip","application/zip")}(n)}catch(e){n.layers.notyf.error("Unexpected error"),console.error(e)}}),l.Icons.Download)}},{"../dom":110,"../icons":112,"core-js/modules/web.dom-collections.iterator.js":95,"preact/hooks":102}],108:[function(e,n,t){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.Controls=void 0;const o=e("../dom"),i=e("../icons");t.Controls=function(e){return(0,o.html)(r||(n=['\n    <div class="flex '," justify-evenly ",'">\n        <div class="h-6 w-6 ',' cursor-pointer"\n            onClick=',">\n            <",' class="h-6 w-6" />\n        </div>\n        <div class="h-6 w-6 ',' cursor-pointer"\n            onClick=',">\n            <",' class="h-6 w-6" />\n        </div>\n        <div class="h-6 w-6 ',' cursor-pointer" onClick=',">\n            <",' class="h-6 w-6" />\n        </div>\n        <div class="h-6 w-6 ',' cursor-pointer" onClick=',">\n            <",' class="h-6 w-6" />\n        </div>\n        <div class="h-6 w-6 ',' cursor-pointer" onClick=',">\n            <",' class="h-6 w-6" />\n        </div>\n    </div>\n    '],t||(t=n.slice(0)),r=Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(t)}}))),e.column?" flex-col":"flex-row",e.class,e.mobileControls?" text-green-400":"",(function(){e.setMobileControls(!e.mobileControls),e.closeSideBar()}),i.Icons.Mobile,e.pause?" text-red-400 animate-pulse":"font-bold",(function(){e.setPause(!e.pause),e.closeSideBar()}),e.pause?i.Icons.Play:i.Icons.Pause,e.mute?" text-green-400":"",(function(){e.setMute(!e.mute),e.closeSideBar()}),e.mute?i.Icons.VolumeOff:i.Icons.VolumeUp,e.keyboard?" text-green-400":"",(function(){e.toggleKeyboard(),e.closeSideBar()}),i.Icons.PencilAlt,e.fullscreen?" text-green-400":"",(function(){e.toggleFullscreen(),e.closeSideBar()}),e.fullscreen?i.Icons.Minimize:i.Icons.Fullscreen);var n,t}},{"../dom":110,"../icons":112}],109:[function(e,n,t){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.SideBar=void 0;const o=e("../dom"),i=e("./client"),s=e("./controls"),a=e("../icons");t.SideBar=function(e){return e.sideBar?(0,o.html)(r||(n=['\n    <div class="flex flex-col filter absolute z-50 top-0 bottom-0 right-0 px-8 pt-6 pb-4\n        w-full sm:w-80 rounded-l-lg drop-shadow-lg bg-white">\n        <div class="transform absolute text-gray-400 hover:text-gray-800\n                     h-8 w-8 top-1 left-1 cursor-pointer hover:scale-125" onClick=',">\n            <",' class="h-8 w-8" />\n        </div>\n        <',' class="mt-2 mb-2 pb-2 border-b-2 border-green-200" ...'," />\n        <",' class="mt-2" ...'," />\n    </div>\n    "],t||(t=n.slice(0)),r=Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(t)}}))),(()=>{e.closeSideBar()}),a.Icons.XCircle,i.Client,e,s.Controls,e):null;var n,t}},{"../dom":110,"../icons":112,"./client":107,"./controls":108}],110:[function(e,n,t){"use strict";e("core-js/modules/web.dom-collections.iterator.js"),e("core-js/modules/web.url.js"),e("core-js/modules/web.url-search-params.js");var r=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.downloadFile=t.click=t.createDiv=t.activeClass=t.primaryClass=t.disabledClass=t.goneClass=t.html=void 0;const o=e("preact"),i=r(e("htm"));t.html=i.default.bind(o.h),t.goneClass="jsdos-player-gone",t.disabledClass="jsdos-player-button-disabled",t.primaryClass="jsdos-player-button-primary",t.activeClass="jsdos-player-button-active",t.createDiv=function(e,n){const t=document.createElement("div");if("string"==typeof e)t.className=e;else for(const n of e)t.classList.add(n);return void 0!==n&&(t.innerHTML=n),t},t.click=function(e,n){for(const t of emulatorsUi.dom.pointers.bind.enders)e.addEventListener(t,(()=>{e.classList.contains("jsdos-player-button-disabled")||n(e)}))};let s=null;t.downloadFile=function(e,n,t){const r=new Blob([e],{type:t});null!==s&&window.URL.revokeObjectURL(s),s=window.URL.createObjectURL(r);const o=document.createElement("a");o.href=s,o.download=n,o.style.display="none",document.body.appendChild(o),o.click(),o.remove()}},{"core-js/modules/web.dom-collections.iterator.js":95,"core-js/modules/web.url-search-params.js":96,"core-js/modules/web.url.js":97,htm:98,preact:101}],111:[function(e,n,t){"use strict";function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var o=Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]},i=Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n},s=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&o(n,e,t);return i(n,e),n};Object.defineProperty(t,"__esModule",{value:!0}),t.hardwareTransportLayerFactory=t.HardwareTransportLayerFactory=void 0;const a=s(e("base64-js")),l=new TextDecoder;class c{constructor(e){r(this,"sessionId",Date.now()+""),r(this,"hardware",void 0),r(this,"alive",!0),r(this,"frameWidth",0),r(this,"frameHeight",0),r(this,"handler",(()=>{})),this.hardware=e}callMain(){this.hardware.sendMessage("wc-install\n"+this.sessionId+"\n"),requestAnimationFrame(this.update.bind(this))}async sendMessageToServer(e,n){if(void 0!==n&&(null==n?void 0:n.sessionId)===this.sessionId)switch(e){case"wc-run":{let e=this.hardware.writeFile("bundle_0.zip",p(n.bundles[0]));if(e.length>0)throw console.error(e),new Error(e);if(void 0!==n.bundles[1]&&(e=this.hardware.writeFile("bundle_1.zip",p(n.bundles[1])),e.length>0))throw console.error(e),new Error(e);const t="wc-run\n";this.hardware.sendMessage(t)}break;case"wc-add-key":this.hardware.addKey(n.key,n.pressed?1:0,n.timeMs);break;case"wc-pause":this.hardware.sendMessage("wc-pause\n"+this.sessionId+"\n");break;case"wc-resume":this.hardware.sendMessage("wc-resume\n"+this.sessionId+"\n");break;case"wc-mute":this.hardware.sendMessage("wc-mute\n"+this.sessionId+"\n");break;case"wc-unmute":this.hardware.sendMessage("wc-unmute\n"+this.sessionId+"\n");break;case"wc-exit":this.alive=!1,this.hardware.sendMessage("wc-exit\n"+this.sessionId+"\n");break;case"wc-mouse-move":this.hardware.mouseMove(n.x,n.y,n.timeMs);break;case"wc-mouse-button":this.hardware.mouseButton(n.button,n.pressed?1:0,n.timeMs);break;case"wc-pack-fs-to-bundle":this.hardware.sendMessage("wc-pack-fs-to-bundle\n"+this.sessionId+"\n");break;default:console.log("Unhandled client message (wc):",e,n)}}initMessageHandler(e){this.handler=e}exit(){this.alive=!1}async onServerMessage(e,n){const t=n||{};switch(e){case"ws-server-ready":{const e=this.hardware.readConfig();this.handler("ws-config",{sessionId:this.sessionId,content:e})}break;case"ws-sound-init":this.handler(e,t),this.handler("ws-server-ready",{sessionId:this.sessionId});break;case"ws-frame-set-size":this.frameWidth=t.width,this.frameHeight=t.height,this.handler(e,t);break;case"ws-sound-push":case"ws-update-lines":console.error(e,"should not be called");break;case"ws-persist":t.bundle=f(t.bundle),this.handler(e,t);break;case"ws-log":case"ws-warn":case"ws-err":case"ws-stdout":void 0!==t.message&&null!==t.message&&t.message.length>0&&(t.message=l.decode(f(t.message))),this.handler(e,t);break;default:this.handler(e,t)}}update(){this.alive&&requestAnimationFrame(this.update.bind(this)),this.updateFrame()}updateFrame(){if(0===this.frameWidth||0===this.frameHeight)return;const e=this.hardware.getFramePayload();if(0===e.length)return;const n=f(e);if(0===n.length)return;const t=[],r=3*this.frameWidth;let o=this.frameHeight,i=-1;for(let e=0;e<this.frameHeight;++e){const s=e===this.frameHeight-1;if(1===n[e]&&-1===i)i=e;else if((s||0===n[e])&&-1!==i){const s=((1===n[e]?e:e-1)-i+1)*r,a=n.slice(o,o+s);t.push({start:i,heapu8:a}),o+=s,i=-1}}this.handler("ws-update-lines",{sessionId:this.sessionId,lines:t})}}class u{constructor(){r(this,"serverMessageHandler",(()=>{})),window.serverMessage=e=>{const n=l.decode(f(e));try{const e=JSON.parse("{"+n.slice(0,-1)+"}");this.serverMessageHandler(e.name,e)}catch(e){throw console.error("Can't parse",n,e),e}},this.createTransportLayer=this.createTransportLayer.bind(this)}createTransportLayer(e){const n=new c(e);return this.serverMessageHandler=n.onServerMessage.bind(n),n.callMain(),n}}function f(e){return a.toByteArray(e)}function p(e){return a.fromByteArray(e)}t.HardwareTransportLayerFactory=u,t.hardwareTransportLayerFactory=new u},{"base64-js":1}],112:[function(e,n,t){"use strict";var r,o,i,s,a,l,c,u,f,p,d,h,y,v,_;function b(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}Object.defineProperty(t,"__esModule",{value:!0}),t.Icons=void 0;const m=e("./dom");t.Icons={XCircle:e=>(0,m.html)(r||(r=b(['\n    <svg fill="none" class=',' viewBox="0 0 24 24" stroke="currentColor">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"\n            d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />\n    </svg>\n'])),e.class),UserCircle:e=>(0,m.html)(o||(o=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"\n            d="M5.121 17.804A13.937 13.937 0 0112 16c2.5 0 4.847.655 6.879 1.804M15 10a3 3 0 11-6 0 3 3 0 016 0zm6 2a9 9 0 11-18 0 9 9 0 0118 0z" />\n    </svg>\n'])),e.class),Mobile:e=>(0,m.html)(i||(i=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"\n            d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />\n    </svg>\n'])),e.class),Pause:e=>(0,m.html)(s||(s=b(["\n    <svg className=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2}\n            d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />\n    </svg>\n'])),e.class),Play:e=>(0,m.html)(a||(a=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"\n            d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />\n    </svg>\n'])),e.class),VolumeUp:e=>(0,m.html)(l||(l=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"\n            d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z" />\n    </svg>\n'])),e.class),VolumeOff:e=>(0,m.html)(c||(c=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"\n            d="M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"\n            clip-rule="evenodd" />\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2" />\n    </svg>\n'])),e.class),PencilAlt:e=>(0,m.html)(u||(u=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"\n            d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />\n    </svg>\n'])),e.class),Fullscreen:e=>(0,m.html)(v||(v=b(["\n    <svg class=",' fill="none" viewBox="-4 -4 24 24" stroke="currentColor">\n        <path\n            d="M5.99 8.99c-.28 0-.53.11-.71.29l-3.29 3.29v-1.59c0-.55-.45-1-1-1s-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1s-.45-1-1-1H3.41L6.7 10.7a1.003 1.003 0 00-.71-1.71zm9-9h-4c-.55 0-1 .45-1 1s.45 1 1 1h1.59l-3.3 3.3a.99.99 0 00-.29.7 1.003 1.003 0 001.71.71l3.29-3.29V5c0 .55.45 1 1 1s1-.45 1-1V1c0-.56-.45-1.01-1-1.01z"\n            fill-rule="evenodd">\n        </path>\n    </svg>\n'])),e.class),Minimize:e=>(0,m.html)(_||(_=b(["\n    <svg class=",' fill="none" viewBox="-2 -4 24 24" stroke="currentColor">\n        <path fill-rule="evenodd" clip-rule="evenodd" d="M8,11H3c-0.55,0-1,0.45-1,1s0.45,1,1,1h2.59l-5.29,5.29C0.11,18.47,0,18.72,0,19\n                 c0,0.55,0.45,1,1,1c0.28,0,0.53-0.11,0.71-0.29L7,14.41V17c0,0.55,0.45,1,1,1s1-0.45,1-1v-5C9,11.45,8.55,11,8,11z M20,1\n                c0-0.55-0.45-1-1-1c-0.28,0-0.53,0.11-0.71,0.29L13,5.59V3c0-0.55-0.45-1-1-1s-1,0.45-1,1v5c0,0.55,0.45,1,1,1h5\n                c0.55,0,1-0.45,1-1s-0.45-1-1-1h-2.59l5.29-5.29C19.89,1.53,20,1.28,20,1z" />\n    </svg>\n'])),e.class),ChevronLeft:e=>(0,m.html)(f||(f=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />\n    </svg>\n'])),e.class),ChevronRight:e=>(0,m.html)(p||(p=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />\n    </svg>\n'])),e.class),DotsHorizontal:e=>(0,m.html)(d||(d=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"\n            d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />\n    </svg>\n'])),e.class),Download:e=>(0,m.html)(h||(h=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />\n    </svg>\n'])),e.class),Upload:e=>(0,m.html)(y||(y=b(["\n    <svg class=",' fill="none" viewBox="0 0 24 24" stroke="currentColor">\n      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />\n    </svg>\n'])),e.class)}},{"./dom":110}],113:[function(e,n,t){"use strict";e("core-js/modules/web.dom-collections.iterator.js"),Object.defineProperty(t,"__esModule",{value:!0}),t.putPersonalBundle=t.getPersonalBundleUrl=void 0;const r=e("../sls/src/personal"),o=e("./xhr");t.getPersonalBundleUrl=function(e,n,t){return(0,r.getPersonalBundleUrl)(e,n,t)},t.putPersonalBundle=async function(e,n,t,r){const i=await async function(e){const n=new zip.ZipReader(new zip.Uint8ArrayReader(e),{useWebWorkers:!1}),t=await n.getEntries();let r=!0;for(const e of t)if(r=!0===e.directory,!r)break;return n.close(),r}(r);if(i)return void console.warn("Ignore empty changes archive");const s=await(0,o.postObject)("https://kdhkdsv558.execute-api.eu-central-1.amazonaws.com/dev/personal/put?namespace="+e+"&id="+n+"&bundleUrl="+encodeURIComponent(t));if(!s.success)throw new Error("Unable to put personal bundle");const a=JSON.parse(s.payload),l=a.signature,c=a.url;if(l["x-amz-content-sha256"]="UNSIGNED-PAYLOAD",await(0,o.send)("put",c,"text",r.buffer,void 0,l),!(await(0,o.postObject)("https://kdhkdsv558.execute-api.eu-central-1.amazonaws.com/dev/personal/acl?namespace="+e+"&id="+n+"&bundleUrl="+t)).success)throw new Error("Can't set ACL to personal bundle")}},{"../sls/src/personal":103,"./xhr":116,"core-js/modules/web.dom-collections.iterator.js":95}],114:[function(e,n,t){"use strict";var r,o;function i(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}e("core-js/modules/web.dom-collections.iterator.js"),Object.defineProperty(t,"__esModule",{value:!0}),t.createPlayerApp=t.PlayerApp=void 0,e("preact/debug");const s=e("preact"),a=e("preact/hooks"),l=e("./dom"),c=e("./components/action-hide"),u=e("./components/action-bar"),f=e("./components/action-exit"),p=e("./components/sidebar");function d(e){const n=e.options().clientId,t="function"==typeof n?e=>n(e):void 0,[o,s]=(0,a.useState)(null),[d,h]=(0,a.useState)(!1),[y,v]=(0,a.useState)(e.player().mobileControls),[_,b]=(0,a.useState)(e.player().layers.keyboardVisible),[m,g]=(0,a.useState)(!1),[w,k]=(0,a.useState)(!1),[j,x]=(0,a.useState)(e.player().layers.fullscreen),[O,S]=(0,a.useState)(!0);(0,a.useEffect)((()=>{void 0!==t&&t(!1).then(s).catch(console.error)}),[n,s]),(0,a.useEffect)((()=>{const e=()=>{const e=null!==document.fullscreenElement;x(e),e||S(!0)};return document.addEventListener("fullscreenchange",e),()=>{document.removeEventListener("fullscreenchange",e)}}),[j,x]);const C={player:e.player,options:e.options,clientId:o,setClientId:s,requestClientId:t,mobileControls:y,setMobileControls:n=>{n?e.player().enableMobileControls():e.player().disableMobileControls(),v(n)},keyboard:_,toggleKeyboard:()=>{b(!e.player().layers.keyboardVisible),e.player().layers.toggleKeyboard()},fullscreen:j,toggleFullscreen:()=>{e.player().layers.toggleFullscreen()},pause:m,setPause:n=>{var t;null===(t=e.player().ciPromise)||void 0===t||t.then((e=>{n?e.pause():e.resume(),g(n)})).catch(console.error)},mute:w,setMute:n=>{var t;null===(t=e.player().ciPromise)||void 0===t||t.then((e=>{n?e.mute():e.unmute(),k(n)})).catch(console.error)},actionBar:O,setActionBar:S,sideBar:d,openSideBar:()=>h(!0),closeSideBar:()=>h(!1)};return(0,l.html)(r||(r=i(['\n    <div class="h-full">\n        <'," ..."," />\n        <"," ..."," />\n        <"," ..."," />\n        <"," ..."," />\n    </div>\n    "])),c.ActionHide,C,p.SideBar,C,u.ActionBar,C,f.ActionExit,C)}t.PlayerApp=d,t.createPlayerApp=function(e,n,t){(0,s.render)((0,l.html)(o||(o=i(["<"," player="," options="," />"])),d,(()=>n),(()=>t)),e)}},{"./components/action-bar":104,"./components/action-exit":105,"./components/action-hide":106,"./components/sidebar":109,"./dom":110,"core-js/modules/web.dom-collections.iterator.js":95,preact:101,"preact/debug":99,"preact/hooks":102}],115:[function(e,n,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DosPlayer=void 0;const r=e("./dom"),o=e("./hardware-transport-layer"),i=e("./personal"),s=e("./player-app"),a=Dos;function l(e,n){if("none"===(n=n||{}).style)return console.warn("If you don't need the jsdos services, please use emulatros + emulators-ui instead"),a(e,n||{});e.classList.add("flex"),e.classList.add("flex-row"),e.classList.add("relative"),e.classList.add("overflow-hidden");const t=(0,r.createDiv)(["flex","flex-col","flex-grow","overflow-hidden"]),l=(0,r.createDiv)("flex-grow"),c=(0,r.createDiv)("flex-grow-0"),u=(0,r.createDiv)("flex-grow-0");t.appendChild(l),t.appendChild(u),e.appendChild(c),e.appendChild(t),n.layersOptions=n.layersOptions||{},n.layersOptions.keyboardDiv=u,n.layersOptions.fullscreenElement=e,n.layersOptions.optionControls=[];const f=n.hardware;null!=f&&(n.createTransportLayer=()=>o.hardwareTransportLayerFactory.createTransportLayer(f),n.emulatorFunction="backend");const p=a(l,n);(0,s.createPlayerApp)(c,p,n),p.bundleUrl=null;const d=p.run;p.run=async(e,t,r)=>{const o=()=>{var e;return void 0!==(null===(e=n)||void 0===e?void 0:e.clientId)?n.clientId(!1):null},s=await o();void 0===t&&void 0===r&&null!==s&&(t=(0,i.getPersonalBundleUrl)(s.namespace,s.id,e)+"?dt="+Date.now());const a=await d.call(p,e,t,r);p.bundleUrl=e;const l=p.layers.getOnSave();return p.layers.setOnSave((async()=>{const n=await o();if(null!==n){const t=await a.persist();return(0,i.putPersonalBundle)(n.namespace,n.id,e,t)}return l.call(p.layers)})),a};const h=p.stop;return p.stop=()=>(p.bundleUrl=null,h.call(p)),p}t.DosPlayer=l,window.Dos=l},{"./dom":110,"./hardware-transport-layer":111,"./personal":113,"./player-app":114}],116:[function(e,n,t){"use strict";function r(e,n,t,r,o,i){return new Promise(((s,a)=>{const l=new XMLHttpRequest;if(l.responseType=t,l.open(e,n,!0),l.addEventListener("load",(()=>{200!==l.status?a(new Error("Wrong status code "+l.status)):"text"===t?s(l.responseText):"arraybuffer"===t?s(l.response):a(new Error("Unsupported responseType "+t))}),!1),l.addEventListener("error",(()=>{a(new Error("HTTP GET failed for url "+n))}),!1),l.addEventListener("abort",(()=>{a(new Error("HTTP GET canceled for url "+n))}),!1),void 0!==o&&(l.onprogress=e=>{if(e.loaded&&e.total&&e.total>0){const n=Math.round(1e4*e.loaded/e.total)/100;o(n)}}),void 0!==i)for(const e of Object.keys(i))l.setRequestHeader(e,i[e]);l.send(r)}))}function o(e,n,t){return r("post",e,n,t)}e("core-js/modules/web.dom-collections.iterator.js"),Object.defineProperty(t,"__esModule",{value:!0}),t.post=t.postObject=t.send=void 0,t.send=r,t.postObject=async function(e,n){const t=JSON.parse(await o(e,"text",n));if(t.success)return t;throw new Error("POST Request failed:\n Payload:\n"+JSON.stringify(t.body,null,2))},t.post=o},{"core-js/modules/web.dom-collections.iterator.js":95}]},{},[115]);


//# sourceMappingURL=data:application/json;charset=utf8;base64,
